{"version":3,"sources":["components/EventSearch.module.css","App.module.css","components/ProvenanceTable.module.css","components/ProvenanceIsolatedNodes.module.css","components/TableDataLoader.module.css","SidePane.module.css","static/taskImages sync /^/.//.*/.png$","static/taskImages/1_manual.png","static/taskImages/1_supported.png","static/taskImages/23_manual.png","static/taskImages/2_supported.png","static/taskImages/41_manual.png","static/taskImages/44_manual.png","static/taskImages/47_manual.png","static/taskImages/4_manual.png","static/taskImages/54_manual.png","static/taskImages/5_supported.png","static/taskImages/60_manual.png","static/taskImages/63_manual.png","static/taskImages/66_manual.png","static/taskImages/6_supported.png","static/taskImages/7_manual.png","static/taskImages/S-task01_adjMatrix.png","static/taskImages/S-task01_nodeLink.png","static/taskImages/S-task02_adjMatrix.png","static/taskImages/S-task02_nodeLink.png","static/taskImages/S-task03_adjMatrix.png","static/taskImages/S-task03_nodeLink.png","static/taskImages/S-task04_adjMatrix.png","static/taskImages/S-task04_nodeLink.png","static/taskImages/S-task05_adjMatrix.png","static/taskImages/S-task05_nodeLink.png","static/taskImages/S-task06_adjMatrix.png","static/taskImages/S-task06_nodeLink.png","static/taskImages/S-task07_adjMatrix.png","static/taskImages/S-task07_nodeLink.png","static/taskImages/S-task08_adjMatrix.png","static/taskImages/S-task08_nodeLink.png","static/taskImages/S-task09_adjMatrix.png","static/taskImages/S-task09_nodeLink.png","static/taskImages/S-task10_adjMatrix.png","static/taskImages/S-task10_nodeLink.png","static/taskImages/S-task11_adjMatrix.png","static/taskImages/S-task11_nodeLink.png","static/taskImages/S-task12_adjMatrix.png","static/taskImages/S-task12_nodeLink.png","static/taskImages/S-task13_adjMatrix.png","static/taskImages/S-task13_nodeLink.png","static/taskImages/S-task14_adjMatrix.png","static/taskImages/S-task14_nodeLink.png","static/taskImages/S-task15_adjMatrix.png","static/taskImages/S-task15_nodeLink.png","static/taskImages/S-task16_adjMatrix.png","static/taskImages/S-task16_nodeLink.png","static/taskImages/Screen Shot 2020-09-07 at 3.25.40 PM.png","static/taskImages/Screen Shot 2020-09-07 at 3.25.55 PM.png","static/taskImages/Screen Shot 2020-09-07 at 3.28.22 PM.png","static/taskImages/Screen Shot 2020-09-07 at 3.28.59 PM.png","static/taskImages/Screen Shot 2020-09-07 at 3.29.22 PM.png","static/taskImages/Screen Shot 2020-09-07 at 3.29.36 PM.png","static/taskImages/Screen Shot 2020-09-07 at 3.31.26 PM.png","static/taskImages/Screen Shot 2020-09-07 at 3.32.07 PM.png","static/taskImages/Screen Shot 2020-09-07 at 3.32.24 PM.png","static/taskImages/Screen Shot 2020-09-07 at 3.32.44 PM.png","static/taskImages/Screen Shot 2020-09-07 at 3.33.05 PM.png","static/taskImages/Screen Shot 2020-09-07 at 3.33.39 PM.png","static/taskImages/Screen Shot 2020-09-07 at 3.33.53 PM.png","static/taskImages/Screen Shot 2020-09-07 at 3.34.49 PM.png","static/taskImages/Screen Shot 2020-09-07 at 3.35.08 PM.png","static/taskImages/Screen Shot 2020-09-07 at 3.35.48 PM.png","static/taskImages/linear regression_supported.png","static/taskImages/outlier.png","static/taskImages/outlier_supported.png","static/taskImages/placeholder.png","static/taskImages/quadratic regression_supported.png","static/taskImages/quadratic_regression_supported.png","static/taskImages/skyline_supported.png","fetchers/fetchMocks.js","hooks/hooks.js","components/eventMapping.js","components/ProvenanceDataContext.tsx","components/ProvenanceIsolatedNodes.tsx","pages/Home.tsx","pages/Study.tsx","pages/Upload.tsx","components/ActionLegend.tsx","components/EventManager.tsx","pages/Overview.tsx","pages/Export.tsx","components/TableFilters.tsx","components/reactTagWrapper.tsx","components/EventSearch.tsx","components/Tagger.tsx","components/ColumnDefinitions.tsx","components/DevExtremeTable.tsx","components/TableDataLoader.tsx","components/ProvenanceController.tsx","pages/Table.tsx","Main.tsx","components/CheckBox.tsx","components/sortMenu.tsx","SidePane.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","host","fetchProvenanceDataByNodeId","nodeId","a","postData","res","getTopPatternsForGroup","groups","participants","parseActionConfiguration","config","elements","replace","JSON","parse","color","name","label","_id","icon","hidden","type","storeActionConfiguration","configList","stringify","updateActionConfigurations","getActionConfigurations","getData","data","getTaskOverviewFromServer","taskID","undefined","console","log","getSchema","tableID","getTaskDataFromServer","getTimelineFromServer","getTaskListFromServer","uri","postBody","fetchOptions","defaultHeaders","url","method","headers","body","completePromise","val","Accept","requestOptions","fetch","response","json","success","ok","useFetchAPIData","fetchingFunc","dependencies","useState","isLoading","setIsLoading","errorMessage","setErrorMessage","fetchedData","setFetchedData","onError","error","useEffect","then","result","message","catch","iconMapping","Add","PanTool","Sort","FiberManualRecordIcon","RadioButtonUncheckedIcon","Search","Clear","Start","PlayArrowIcon","StopIcon","CheckBoxOutlineBlankIcon","RemoveCircle","TabUnselected","Crop75","AspectRatio","VisibilityOff","SelectAll","GetApp","Brush","DragHandleIcon","colors","answerSelectColor","selectColor","clearColor","eventMappingList","ProvenanceDataContext","React","createContext","compileActionListToHashTable","list","newActionObject","forEach","item","newObject","assign","ProvenanceDataContextProvider","children","selectedTaskId","setSelectedTaskId","queryCount","setQueryCount","value","actionConfigurationsFromServer","actionConfigurationsFiltered","filter","setActionConfigurationsListInternal","actionConfigurationsList","actionConfigurations","setActionConfigurations","conditions","metrics","setData","fetchedInitialTask","setFetchedInitialTask","taskList","setTaskList","timelineData","setTimelineData","currentlyVisitedNodes","setCurrentlyVisitedNodes","homeTaskSort","setHomeTaskSort","node","fetched","processedNodes","actionID","time","elapsedTime","nodeID","participantId","participantID","uniqueId","uniqueID","loadingTaskList","taskListFromServer","dataFromServer","timelineDataFromServer","timeout","ms","Promise","setTimeout","newTaskData","handleTagCreation","tag","action","setTaskSort","currentTaskData","setCurrentTaskData","datum","sequence","err","taskDataFromServer","Provider","handleChangeSelectedTaskId","event","target","handleProvenanceNodeClick","setActionConfigurationsList","newActionConfigurationsList","saveActionConfigurationToDB","oldActions","newActions","length","i","difference","k","innerIndex","isStructuralActionChange","IsolatedNode","configToUse","useContext","eventMapping","eventMap","ProvenanceIcon","Tooltip","TransitionComponent","Fade","TransitionProps","title","count","PopperProps","popperOptions","modifiers","offset","enabled","arrow","width","height","x","y","rx","fill","opacity","scale","transform","ProvenanceIsolatedNodes","nodes","selectedItemId","hoveredItemId","handleHover","className","styles","wrapper","style","display","flexDirection","index","determineItemOpacity","key","onMouseEnter","onMouseLeave","onClick","theme","createMuiTheme","overrides","MuiTableCell","root","padding","useStyles","makeStyles","minWidth","flexGrow","table","sortable","cursor","backgroundColor","sorted","media","condition","fontSize","bullet","margin","pos","marginBottom","maxValue","d3","range","domain","BarChart","props","allData","hoveredRow","hoveredRowColor","metric","vert","size","find","m","maxBarHeight","varsToPlot","entries","sort","b","slice","yDomain","v","xDomain","xScale","yScale","barWidth","bandwidth","hoveredStats","stats","hoveredVarsToPlot","nothingToPlot","x1","y1","x2","y2","stroke","strokeWidth","entry","tooltipText","Fragment","textAnchor","d","Stimulus","img","conditionName","classes","imgName","require","Box","mt","mb","mr","boxShadow","CardMedia","component","image","Typography","variant","SequenceCount","row","clickedRow","clickedRowColor","numIconsPerCol","Math","floor","numCols","ceil","iconWidth","currentParticipants","matchingSequences","s","hoveredParticipants","intersection","includes","textWidth","Array","from","fontWeight","alignmentBaseline","SortIconContainer","paddingTop","TableComponent","rows","setHoveredRow","setClickedRow","desc","Count","Pattern","setSort","aValue","seq","bValue","rValue","TableContainer","maxHeight","stickyHeader","aria-label","TableHead","TableRow","header","TableCell","sameKey","TableBody","onMouseDown","background","scope","seqObj","answer","align","Histogram","intersectionRow","intersections","r","hoveredCI","ci","histColor","Grid","DrawHistogram","hovered","setHovered","average","lowerBound","upperBound","bins","hist","textLabel","round","barPadding","cx","cy","ConditionCard","freqPattern","metricValues","setHidden","patterns","topK","Set","container","spacing","xs","justify","overflow","rowHeight","p","Divider","TaskCard","task","Card","CardContent","marginLeft","prompt","cKey","CardActions","Button","TaskContainer","getValues","conditionFilter","sortKey","values","c","push","tasks","aValues","bValues","max","min","taskA","t","taskB","indexOf","Skeleton","categories","StudyCard","hoveredElement","study","eventID","random","conditionGroups","allLevels","level","flat","category","minutesToComplete","reduce","rv","cond","participant","borderBottom","borderColor","averageAccuracy","eventData","metricSquare","barHeight","labelHeight","labelWidth","axisHeight","colorScale","maxTime","duration","phases","filteredData","labelPos","labelStart","labelExtent","n","shortName","metricColorScales","metricYScales","taskTimeScales","colorRange","heightRange","timeScaleRange","getStats","taskInfo","dd","out","trim","rectWidth","onMouseOver","onMouseOut","timeScale","avg","slower","minTime","diff","abs","lineHeight","glyphSize","vertScale","Upload","taskTooltip","filteredMetrics","nodeWidth","actions","frequentActions","evenlabelPos","eveny","labels","textHeight","renderPattern","Item","styled","div","isDragging","ActionLegendDragContainer","collapsed","handleActionItemEdit","isActionLegendEditing","hashMapConfig","listRef","useRef","handleActionConfigurationChange","findIndex","copy","listEvents","onDragEnd","copyListItem","copyListEvents","source","destination","droppableId","reorder","allItemConfig","usedGroupedElements","duplicatedFlag","element","checkIfGroupDuplicates","copiedSource","copiedDestination","movedChanges","move","current","handleAddConfigurationToList","reference","open","ActionLegend","actionItemBeingEdited","setActionItemBeingEdited","setIsActionLegendEditing","setVolatileActionConfigurationList","volatileActionConfigurationList","useMemo","Modal","onClose","alignItems","justifyContent","aria-labelledby","aria-describedby","actionConfiguration","handleActionConfigurationCancel","newConfiguration","configurationIndex","configCopy","EditActionForm","volatileConfiguration","setVolatileConfiguration","handleConfigurationPropertyChange","newValue","clonedConfiguration","order","TextField","onChange","disabled","for","defaultValue","Switch","checked","inputProps","uuid","toString","startIndex","endIndex","splice","removed","droppableSource","droppableDestination","sourceClone","destClone","dragId","Pop","Popper","anchorEl","placement","border","handleEditActionConfiguration","ActionLegendPresentational","renderedItems","ref","isDropDisabled","provided","snapshot","innerRef","isDraggingOver","isDragDisabled","draggableId","draggableProps","dragHandleProps","placeholder","ActionItemNode","ListItem","ListItemText","maxWidth","textOverflow","EventManager","nonHiddenConfigs","handleAddGroup","initialItems","Content","List","Container","Notice","button","ButtonText","GroupedList","newListName","newListEvents","viewBox","actionItem","copyItem","Input","Overview","location","enterButton","PlusSquareOutlined","Export","buckets","currentBins","thresholds","bucket","currentBinCounter","bars","x0","toFixed","brushRef","dayBrush","brushX","extent","on","selection","warn","select","selectAll","enter","append","attr","call","BrushableHistogram","setMinimum","setMaximum","inputs","invert","QuantitativeFilter","onFilter","minimum","maximum","debouncedMin","useDebounce","debouncedMax","filterMin","filterMax","delay","debouncedValue","setDebouncedValue","handler","clearTimeout","TagWrapper","tags","onTagChange","isMaster","autofocus","allowNew","handleDelete","handleAddition","uuidv4","actionName","ActionList","renderClone","items","rubric","shouldRenderClone","draggingFromThisWith","Shop","setAnchorEl","Boolean","IconButton","currentTarget","Popover","anchorOrigin","vertical","horizontal","transformOrigin","searchOptions","ShoppingBag","direction","searchBar","dragID","Discard","EventSearch","shoppingBagItems","setShoppingBagItems","useCallback","state","searchContainer","outerSearchBar","outerSearchOptions","outerSearchDiscard","initialState","mouseX","mouseY","Tagger","text","tagDivId","rowData","setState","setTags","remove","setRemove","handleClose","window","getSelection","currentTags","document","getElementById","querySelectorAll","focus","taggedText","onMouseUp","preventDefault","clientX","clientY","split","substring","Menu","keepMounted","anchorReference","anchorPosition","top","left","MenuItem","newTags","QuantitativeCell","additionalComponents","commonScale","NotesColumn","metaData","this","selectionIndicies","cellStyle","customSort","filterComponent","render","isArray","generateRowId","iterTag","LongTextColumn","hideByDefault","CategoricalColumn","QuantitativeColumn","handleFilterChange","customFilterAndSearch","filterQuantitativeValues","cellComponent","niceX","nice","binner","groupedSummaryComponent","incomingData","pointerEvents","partitionedData","newWidth","Component","EventsSummary","ProvenanceColumn","filterValue","rowValue","master","sub","every","hasSubArrayNonStrict","renderData","GroupedEventSummary","pure","filteredList","errorLoading","patternDataFromServer","float","marginTop","topSequence","borderRadius","GroupDataResolver","setPartitionedData","_","isFunction","toFixedTrunc","f","substr","GroupCellContent","provenanceData","column","groupData","columnSummaries","GroupCell","FilterCells","other","restProps","itemProps","Cell","ProvenanceCells","onSave","workbook","xlsx","writeBuffer","buffer","saveAs","Blob","generateColumnDefinition","columnSchema","columnsMetaData","defaultColumnDefinition","columnMetaData","columnKey","getColumnMetaData","COLUMN_NAME","DATA_TYPE","DevExtremeTable","tableSchema","exporterRef","filters","setFilters","handleFilter","columnName","currentFilterIndex","clonedFilters","accuracy","notes","setColumns","generateColumnObject","columns","setSelectionInternal","setRows","startExport","options","exportGrid","grouping","setGroupingInternal","groupingPredicate","isRowInTrueGroup","integratedGroupingColumnExtensions","group","groupingValue","groupMetaData","criteria","showWhenGrouped","tableGroupColumnExtension","defaultColumnWidths","predicate","IntegratedFiltering","defaultPredicate","filteringColumnExtensions","showInGroupFooter","alignByColumn","groupSummaryItems","defaultHiddenColumnNames","Paper","onGroupingChange","newGrouping","secondArray","newlyAddedGroups","firstArrayItem","some","secondArrayItem","currentFilter","filterItem","newGroupIndex","newGroup","columnGroupingEnabled","columnExtensions","groupItems","calculator","getValue","onFiltersChange","onSelectionChange","showGroupingControls","showSelectAll","rowComponent","groupedRowHeader","groupedBy","columnInfo","groupIndex","repeat","join","groupHeaderRow","colSpan","groupHeaderContent","Row","summaryCellComponent","contentComponent","showColumnsWhenGrouped","stubCellComponent","stubProps","shouldHideStub","groupedByRow","tableRow","TableDataLoader","setHeight","setTableSchema","schemaFromServer","hiddenColumns","hideAggregate","concat","ORDINAL_POSITION","bounds","onResize","contentRect","measureRef","LoaderStyles","loader","animation","freeze","adjMatrix","nodeLink","ProvenanceController","selectedNode","playInterval","setPlayInterval","setHoveredItemId","setSelectedItemIdInternal","currentIndex","currentNode","querySelector","contentWindow","postMessage","setSelectedItemId","handleForward","previousId","src","gridTemplateRows","gridTemplateColumns","gridRow","clearInterval","setInterval","TimeLine","Table","Wrapper","withRouter","TransitionGroup","CSSTransition","classNames","path","Home","Study","CheckBox","visible","checkBoxCallback","setChecked","Checkbox","evt","stopPropagation","MenuWrapper","option","handleMenuItemClickCallback","setHoveredRowCallback","selectedIndex","filterConditions","setConditions","currentState","checkboxes","selected","SortMenu","setSelectedIndex","handleMenuItemClick","sortObj","aria-haspopup","aria-controls","primary","secondary","createStyles","typography","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","leavingScreen","appBarShift","enteringScreen","menuButton","marginRight","hide","flexShrink","whiteSpace","drawerOpen","drawerClose","overflowX","breakpoints","up","toolbar","mixins","content","SidePane","selectedPrompt","useTheme","setOpen","HomeLink","forwardRef","to","StudyLink","useLocation","CssBaseline","AppBar","position","clsx","Toolbar","edge","pathname","FormControl","SelectedTaskInput","Select","labelId","ml","noWrap","Drawer","paper","link","HomeIcon","ComputerIcon","TableChart","ListItemIcon","isCurrent","Icon","makeIcon","App","initialEntries","initialIndex","sidePane","main","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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,+C,oBCA3CD,EAAOC,QAAU,IAA0B,gD,oBCA3CD,EAAOC,QAAU,IAA0B,+C,oBCA3CD,EAAOC,QAAU,IAA0B,gD,oBCA3CD,EAAOC,QAAU,IAA0B,+C,oBCA3CD,EAAOC,QAAU,IAA0B,gD,oBCA3CD,EAAOC,QAAU,IAA0B,+C,oBCA3CD,EAAOC,QAAU,IAA0B,gD,oBCA3CD,EAAOC,QAAU,IAA0B,+C,oBCA3CD,EAAOC,QAAU,IAA0B,gD,oBCA3CD,EAAOC,QAAU,IAA0B,+C,oBCA3CD,EAAOC,QAAU,IAA0B,gD,oBCA3CD,EAAOC,QAAU,IAA0B,+C,oBCA3CD,EAAOC,QAAU,IAA0B,gD,oBCA3CD,EAAOC,QAAU,IAA0B,+C,oBCA3CD,EAAOC,QAAU,IAA0B,gD,oBCA3CD,EAAOC,QAAU,IAA0B,+C,oBCA3CD,EAAOC,QAAU,IAA0B,gD,oBCA3CD,EAAOC,QAAU,IAA0B,+C,oBCA3CD,EAAOC,QAAU,IAA0B,kE,oBCA3CD,EAAOC,QAAU,IAA0B,kE,oBCA3CD,EAAOC,QAAU,IAA0B,kE,oBCA3CD,EAAOC,QAAU,IAA0B,kE,oBCA3CD,EAAOC,QAAU,IAA0B,kE,oBCA3CD,EAAOC,QAAU,IAA0B,kE,oBCA3CD,EAAOC,QAAU,IAA0B,kE,oBCA3CD,EAAOC,QAAU,IAA0B,kE,oBCA3CD,EAAOC,QAAU,IAA0B,kE,oBCA3CD,EAAOC,QAAU,IAA0B,kE,oBCA3CD,EAAOC,QAAU,IAA0B,kE,oBCA3CD,EAAOC,QAAU,IAA0B,kE,oBCA3CD,EAAOC,QAAU,IAA0B,kE,oBCA3CD,EAAOC,QAAU,IAA0B,kE,oBCA3CD,EAAOC,QAAU,IAA0B,kE,oBCA3CD,EAAOC,QAAU,IAA0B,kE,oBCA3CD,EAAOC,QAAU,IAA0B,yD,oBCA3CD,EAAOC,QAAU,IAA0B,qC,oBCA3CD,EAAOC,QAAU,IAA0B,+C,oBCA3CD,EAAOC,QAAU,IAA0B,yC,oBCA3CD,EAAOC,QAAU,IAA0B,4D,oBCA3CD,EAAOC,QAAU,IAA0B,4D,oBCA3CD,EAAOC,QAAU,IAA0B,+C,8ZCEvCc,G,cAAyC,wBAEtC,SAAeC,EAAtB,kC,4CAAO,WAA2CC,GAA3C,eAAAC,EAAA,sEACWC,GAASJ,EAAO,YAAcE,GADzC,cACDG,EADC,yBAEEA,GAFF,4C,sBAKA,SAAeC,EAAtB,kC,4CAAO,WAAsCC,GAAtC,eAAAJ,EAAA,sEACWC,GAAS,GAAD,OAAIJ,EAAJ,kBAA0B,CAChDO,OAAQ,CAAC,CAAEjB,GAAI,SAAUkB,aAAcD,MAFpC,cACDF,EADC,yBAIEA,GAJF,4C,sBAWP,SAASI,EAAyBC,GAShC,OARIA,EAAOC,WACTD,EAAOC,SAAWD,EAAOC,SAASC,QAAQ,SAAU,WACpDF,EAAOC,SAAWD,EAAOC,SAASC,QAAQ,QAAS,UAEnDF,EAAOC,SAAWE,KAAKC,MAAMJ,EAAOC,WAEtCD,EAAOK,MAAQL,EAAOK,MAAMH,QAAQ,KAAM,IAEnC,CACLG,MAAOL,EAAOK,MACdC,KAAMN,EAAOO,MACb3B,GAAIoB,EAAOQ,IACXP,SAAUD,EAAOC,SACjBQ,KAAMT,EAAOS,KACbC,OAAQV,EAAOU,OACfC,KAAMX,EAAOW,MAGjB,SAASC,EAAyBC,GAChC,OAAOA,EAAWpC,KAAI,SAACuB,GACrB,MAAO,CACLQ,IAAKR,EAAOpB,GACZ2B,MAAOP,EAAOM,KACdL,SAAUD,EAAOC,SAAWE,KAAKW,UAAUd,EAAOC,UAAY,KAC9DQ,KAAMT,EAAOS,KACbE,KAAMX,EAAOW,KACbN,MAAOL,EAAOK,MACdK,OAAQV,EAAOU,W,4CAId,WAA2CK,GAA3C,eAAAtB,EAAA,sEACWC,GACdJ,EAAO,wBACPsB,EAAyBG,IAHtB,cACDpB,EADC,yBAMEA,GANF,4C,sBAQA,SAAeqB,IAAtB,+B,4CAAO,4BAAAvB,EAAA,sEAEWwB,GAAQ3B,EAAO,yBAF1B,cAEDK,EAFC,QAGDuB,KAAOvB,EAAIuB,KAAKzC,IAAIsB,GAHnB,kBAKEJ,GALF,4C,sBAOA,SAAewB,IAAtB,gC,8CAAO,0CAAA1B,EAAA,yDAAyC2B,EAAzC,oCAAkDC,EAAlD,UAOOD,EAPP,gCAQO1B,GAASJ,EAAI,oBAAgB8B,IARpC,2DASO1B,GAASJ,EAAI,sBATpB,mCAOCK,EAPD,uBAYIA,GAZJ,kCAcH2B,QAAQC,IAAI,eAAZ,MAdG,2D,sBAiBA,SAAeC,GAAtB,mC,8CAAO,WAAyBC,GAAzB,eAAAhC,EAAA,sEACWwB,GAAQ,GAAD,OAAI3B,EAAJ,kBAAkBmC,EAAlB,YADlB,cACD9B,EADC,yBAEEA,GAFF,4C,sBAIA,SAAe+B,GAAtB,mC,8CAAO,WAAqCN,GAArC,eAAA3B,EAAA,sEACWwB,GAAQ,GAAD,OAAI3B,EAAJ,sBAAsB8B,IADxC,cACDzB,EADC,yBAEEA,GAFF,4C,sBAKA,SAAegC,KAAtB,gC,8CAAO,4BAAAlC,EAAA,sEAEWwB,GAAQ,GAAD,OAAI3B,EAAJ,cAFlB,cAEDK,EAFC,yBAIEA,GAJF,4C,sBAQA,SAAeiC,KAAtB,gC,8CAAO,4BAAAnC,EAAA,sEACWwB,GAAQ,GAAD,OAAI3B,EAAJ,cADlB,cACDK,EADC,yBAEEA,GAFF,4C,sBAUA,SAAeD,GAAtB,uC,8CAAO,WAAwBmC,EAAKC,EAAUC,GAAvC,iBAAAtC,EAAA,6DAEDuC,EAAiB,CACnBC,IAAKJ,EAELK,OAAQ,OACRC,QAAS,CACP,eAAgB,mCAElBC,KAAMjC,KAAKW,UAAUgB,IATlB,SAYaO,GAAgBR,EAAKG,GAZlC,cAYCM,EAZD,yBAcEA,GAdF,4C,sBAiBA,SAAerB,GAAtB,qC,8CAAO,WAAuBY,EAAKE,GAA5B,eAAAtC,EAAA,6DACDuC,EAAiB,CACnBG,QAAS,CACPI,OAAQ,qBAHP,SAMQF,GAAgBR,EAAKG,GAN7B,oF,sBASA,SAAeK,GAAtB,qC,8CAAO,WAA+BR,EAAKW,GAApC,eAAA/C,EAAA,+EAGcgD,MAAMZ,EAAKW,GAHzB,cAGHE,EAHG,gBAOmBA,EAASC,OAP5B,OAOHD,EAASxB,KAPN,OAQHwB,EAASE,QAAUF,EAASG,GARzB,wDAYHvB,QAAQC,IAAI,QAAZ,MAZG,sCAeEmB,GAfF,2D,sBCpIA,SAASI,GAAgBC,EAAcC,GAAe,IAAD,EACtBC,mBAAS,MADa,mBACjDC,EADiD,KACtCC,EADsC,OAEhBF,mBAAS,MAFO,mBAEjDG,EAFiD,KAEnCC,EAFmC,OAGlBJ,mBAAS,MAHS,mBAGjDK,EAHiD,KAGpCC,EAHoC,KAUlDC,EAAU,SAACC,GACbN,GAAa,GACbE,EAAgBI,IA6BpB,OArBAC,qBAAU,WAdNP,GAAa,GACbE,EAAgB,IAehBN,IACKY,MACG,SAACC,GACG,IAVO1C,EAUS0C,GAAUA,EAAOhB,SAClBgB,EAAO1C,MAXfA,EAaW0C,EAAO1C,KAZrCqC,EAAerC,GACfiC,GAAa,IAaGK,EAAQ,+CAGhB,SAACC,GACGD,EAAQ,mCAAD,cAAoCC,QAApC,IAAoCA,OAApC,EAAoCA,EAAOI,aAGzDC,OAAM,SAACL,GACJD,EAAQ,oCAAD,cAAqCC,QAArC,IAAqCA,OAArC,EAAqCA,EAAOI,eAlBtD,YAoBFb,IACA,CAACE,EAAWE,EAAcE,G,mZCxBxBS,GAAc,CACzBC,SACAC,aACAC,SACAC,2BACAC,8BACAC,YACAC,WACAC,WACAC,mBACAC,cACAC,8BACAC,kBACAC,mBACAC,YACAC,iBACAC,mBACAC,eACAC,YACAC,WACAC,qBAEIC,GAAS,CACb,UACA,UACA,UACA,UACA,UACA,WAGIC,GAAoBD,GAAO,GAG3BE,GAAcF,GAAO,GAErBG,GAAaH,GAAO,GAEbI,GAAmB,CAC9B,CACE/E,KAAM,gBACNJ,MAAO,UACPzB,GAAI,oBACJ0B,KAAM,aACNK,KAAM,MACND,QAAQ,GAGV,CACED,KAAM,WACNJ,MAAO,UACPzB,GAAI,gBACJ0B,KAAM,gBACNK,KAAM,MACND,QAAQ,GAEV,CACED,KAAM,MACNJ,MAAOgF,GACPzG,GAAI,gBACJ0B,KAAM,gBACNK,KAAM,MACND,QAAQ,GAEV,CACED,KAAM,UACNJ,MAlCc+E,GAAO,GAmCrB9E,KAAM,eACN1B,GAAI,eACJ+B,KAAM,MACND,QAAQ,GAEV,CACED,KAAM,OACNJ,MAzCc+E,GAAO,GA0CrBxG,GAAI,OACJ0B,KAAM,OACNK,KAAM,MACND,QAAQ,GAEV,CACED,KAAM,wBACNJ,MAAOiF,GACP1G,GAAI,UACJ0B,KAAM,yBACNK,KAAM,MACND,QAAQ,GAEV,CACED,KAAM,2BACNJ,MAAOgF,GACPzG,GAAI,kBACJ0B,KAAM,mBAER,CACEG,KAAM,wBACNJ,MAAOiF,GACP1G,GAAI,cACJ0B,KAAM,gBACNK,KAAM,MACND,QAAQ,GAEV,CACED,KAAM,wBACNJ,MAAOiF,GACP1G,GAAI,WACJ0B,KAAM,yBAER,CACEG,KAAM,wBACNJ,MAAOiF,GACP1G,GAAI,WACJ0B,KAAM,qBACNK,KAAM,MACND,QAAQ,GAEV,CACED,KAAM,SACNJ,MAnFgB+E,GAAO,GAoFvBxG,GAAI,SACJ0B,KAAM,SACNK,KAAM,MACND,QAAQ,GAEV,CACED,KAAM,wBACNJ,MAAOiF,GACP1G,GAAI,OACJ0B,KAAM,cACNK,KAAM,MACND,QAAQ,GAGV,CACED,KAAM,2BACNJ,MAAOiF,GACP1G,GAAI,gBACJ0B,KAAM,gBACNK,KAAM,MACND,QAAQ,GAEV,CACED,KAAM,QACNJ,MAAOkF,GACP3G,GAAI,QACJ0B,KAAM,mBACNK,KAAM,MACND,QAAQ,GAEV,CACED,KAAM,QACNJ,MAAOkF,GACP3G,GAAI,aACJ0B,KAAM,gBACNK,KAAM,QACND,QAAQ,EACRT,SAAU,CACR,CACEQ,KAAM,QACNJ,MAAOkF,GACP3G,GAAI,QACJ0B,KAAM,mBACNK,KAAM,MACND,QAAQ,GAEV,CACED,KAAM,2BACNJ,MAAOiF,GACP1G,GAAI,gBACJ0B,KAAM,gBACNK,KAAM,MACND,QAAQ,MCtJhB,IAkBM+E,GAAwBC,IAAMC,cAAc,IAClD,SAASC,GAA6BC,GACpC,IAAIC,EAAkB,GAMtB,OALAD,EAAKE,SAAQ,SAACC,GACZ,IAAIC,EAAY,GAChBA,EAAUD,EAAKpH,IAAMoH,EACrB5G,OAAO8G,OAAOJ,EAAiBG,MAE1BH,EAEF,IAAMK,GAAgC,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EAEjBV,IAAMzC,SAAS,MAFE,mBAEtDoD,EAFsD,KAEtCC,EAFsC,OAKzBrD,mBAAS,GALgB,mBAKtDsD,EALsD,KAK1CC,EAL0C,OAWzD1D,GAAe,sBAAC,4BAAArD,EAAA,sEACEuB,IADF,cACZyF,EADY,yBAEXA,GAFW,2CAGjB,CAACF,IAdyD,mBAU3DG,GAV2D,gBAgB7DhD,qBAAU,WAER,GAAIgD,EAAgC,CAClC,IAAMC,EAA+BD,EAA+BE,QAClE,SAAC5G,GAAD,MAA4B,UAAhBA,EAAOW,QAErBkG,EAAoCF,MAErC,CAACD,IAxByD,MAqFzDzD,mBAAS,IArFgD,mBAmF3D6D,EAnF2D,KAoF3DD,EApF2D,OAuFL5D,mBACtD2C,GAA6BJ,KAxF8B,mBAuFtDuB,EAvFsD,KAuFhCC,EAvFgC,KA0F7DtD,qBAAU,WACRsD,EACEpB,GAA6BkB,MAE9B,CAACA,IA9FyD,IA0GzDG,EACAC,EA3GyD,EAgGrCjE,qBAhGqC,mBAgGtD/B,EAhGsD,KAgGhDiG,EAhGgD,OAiGTlE,oBAAS,GAjGA,mBAiGtDmE,EAjGsD,KAiGlCC,EAjGkC,OAkG7BpE,qBAlG6B,mBAkGtDqE,EAlGsD,KAkG5CC,EAlG4C,OAmGrBtE,qBAnGqB,mBAmGtDuE,EAnGsD,KAmGxCC,EAnGwC,OAoGH/B,IAAMzC,SAC9D,MArG2D,mBAoGtDyE,EApGsD,KAoG/BC,EApG+B,KA6GzDzG,IACF+F,EAAa/F,EAAK+F,WAClBC,EAAUhG,EAAKgG,SA/G4C,MAkHvBjE,qBAlHuB,mBAkHxD2E,GAlHwD,KAkH1CC,GAlH0C,mDAoH7D,WAAyCC,GAAzC,iBAAArI,EAAA,6DACE6B,QAAQC,IAAI,wCAAyCuG,GAG/B,2BAJxB,SAKsBvI,EAA4BuI,EAAKlJ,IALvD,QAKMmJ,EALN,QAMcnF,UACJoF,EAAiBD,EAAQ7G,KAAKzC,KAAI,SAACqJ,GACvC,MAAO,CACLlJ,GAAIkJ,EAAKlJ,GACT0B,KAAMwH,EAAKG,SACXC,KAAMJ,EAAKK,YACXC,OAAQN,EAAKM,OACbnG,IAAK6F,EAAK7F,IACVoG,cAAeP,EAAKQ,cACpBC,SAAUT,EAAKU,aAGnBb,EAAyBK,IAlB7B,4CApH6D,6BAsJflF,GAAe,sBAAC,sBAAArD,EAAA,6DAC5D6B,QAAQC,IAAI,oCADgD,SAE/CK,KAF+C,mFAG3D,IAzJ0D,qBAsJtD6G,GAtJsD,MAsJrCC,GAtJqC,MA2J7DhF,qBAAU,WACJgF,IACFpC,EAAkBoC,GAAmB,GAAGtH,UAEzC,CAACsH,KA/JyD,OAkKlB5F,GAAe,sBAAC,sBAAArD,EAAA,6DACzD6B,QAAQC,IAAI,gCAAiC+F,EAAS,IADG,SAE5CnG,EAA0BmG,EAAS,GAAGlG,QAFM,mFAGxD,CAACkG,EAAUf,IArK+C,qBAkKpCoC,IAlKoC,sBAwK1B7F,GAAe,sBAAC,sBAAArD,EAAA,6DACjD6B,QAAQC,IAAI,yCADqC,SAEpCI,KAFoC,mFAGhD,IAHMiH,GAxKoD,qBA2N7D,SAASC,GAAQC,GACf,OAAO,IAAIC,SAAQ,SAAC1J,GAAD,OAAa2J,WAAW3J,EAASyJ,MA5CtDpF,qBAAU,WACRpC,QAAQC,IAAI,4BAA6BqH,IACzCnB,EAAgBmB,MACf,CAACA,KAEJlF,qBAAU,WACJiF,KACFxB,EAAQwB,IACRtB,GAAuBD,MAExB,CAACuB,KAiBJ7F,GAAe,sBAAC,sBAAArD,EAAA,sDACVkJ,KACFrH,QAAQC,IAAI,wBACZJ,IAA4BwC,MAAK,SAACsF,GAChC3H,QAAQC,IAAI,cAAe0H,EAAY/H,MACvCiG,EAAQ8B,EAAY/H,UALV,2CAQb,CAACyH,KAEJjF,qBAAU,WACRpC,QAAQC,IAAI,uBAAwBmH,IACpCnB,EAAYmB,MACX,CAACA,KAOJ,IAAMQ,GAAiB,uCAAG,WAAOZ,EAAelH,EAAQ+H,EAAKC,GAAnC,SAAA3J,EAAA,sEAClBoJ,GAAQ,KADU,gCAGjBM,GAHiB,2CAAH,4DA/NsC,GAoO/BlG,mBAAS,QApOsB,qBAoO9CoG,IApO8C,gBA0Of3D,IAAMzC,SAAS,IA1OA,qBA0OtDqG,GA1OsD,MA0OrCC,GA1OqC,SAgPzDzG,GAAe,sBAAC,4BAAArD,EAAA,sEACKiC,GAAsB2E,GAD3B,cACZ3D,EADY,QAETxB,KAAOwB,EAASxB,KAAKzC,KAAI,SAAC+K,GAIjC,IACEA,EAAMC,SAAWtJ,KAAKC,MAAL,WAAeoJ,EAAMC,SAArB,MACjB,MAAOC,GACPpI,QAAQmC,MAAR,kDAC6C+F,EAAMlB,cADnD,qFAGAkB,EAAMC,SAAW,GAEnB,OAAOD,KAdS,kBAgBX9G,GAhBW,2CAiBjB,CAAC2D,EAAgBE,IAjQyC,qBA+O3DoD,IA/O2D,mBA2Q7D,OARAjG,qBAAU,WACR6F,GAAmBI,MAClB,CAACA,KAOF,kBAAClE,GAAsBmE,SAAvB,CACEnD,MAAO,CACL6C,mBACAO,2BARN,SAAoCC,GAClCxD,EAAkB,CAACwD,EAAMC,OAAOtD,SAQ5BJ,iBACAnF,OACAuH,mBACAnB,WACAE,eACAN,UACAmC,eACAzB,gBACAC,mBACAZ,aACAiC,qBACAc,0BA3RuD,6CA4RvDtC,wBACAC,2BACAZ,uBACAkD,4BApON,SAAqCC,IH9EhC,SAAP,mCGmFIC,CAA4BD,GAA6BvG,MACvD,SAACjB,IAhCL,SAAkC0H,EAAYC,GAE5C,GAAID,EAAWE,SAAWD,EAAWC,OACnC,OAAO,EAIT,IAPwD,eAO/CC,GAKP,IAJA,IAAIC,EAAapL,OAAOD,KAAKiL,EAAWG,IAAI3D,QAC1C,SAAC6D,GAAD,OACEtK,KAAKW,UAAUsJ,EAAWG,GAAGE,MAAQtK,KAAKW,UAAUuJ,EAAWE,GAAGE,OAE7DC,EAAa,EAAGA,EAAaF,EAAWF,OAAQI,IACvD,GAC6B,aAA3BF,EAAWE,IACgB,WAA3BF,EAAWE,IACgB,OAA3BF,EAAWE,GAEX,MAAM,CAAN,GAAO,IAXJH,EAAI,EAAGA,EAAIH,EAAWE,OAAQC,IAAK,CAAC,IAAD,IAAnCA,GAAmC,kCAgB5C,OAAO,EAYDI,CACE7D,EACAoD,GAOFrD,EAAoCqD,GAHpC1D,EAAcD,EAAa,OAsN7BO,6BAEDV,IA6GQX,U,+BC9ZFmF,GAAe,SAAC,GAA2B,IAAzB9C,EAAwB,EAAxBA,KAAM+C,EAAkB,EAAlBA,YAC7B9D,EAAyB+D,qBAAWrF,IAApCsB,qBAGF8D,IACF9D,EAAuB8D,GAGzB,IAAME,EAAehE,EAEjBiE,EAAWD,EAAajD,EAAKxH,MAC7ByK,EAAajD,EAAKxH,MAClB,CAAEG,KAAM,MAAOJ,MAAO,QAEtB4K,EAAiBlH,GAAYiH,EAASvK,MAO1C,OANKwK,IACHA,EAAiB,kBAAM,8BAMvB,kBAACC,EAAA,EAAD,CACEC,oBAAqBC,KACrBC,gBAAiB,CAAExC,QAAS,KAC5ByC,MAAK,UAAKxD,EAAKxH,KAAV,YAAkBwH,EAAKyD,MAAL,WAAiBzD,EAAKyD,MAAtB,KAAiC,IACxDC,YAAa,CACXC,cAAe,CACbC,UAAW,CACTC,OAAQ,CACNC,SAAS,EACTD,OAAQ,gBAKhBE,OAAK,GACL,yBAAKC,MAAO,GAAIC,OAAQ,IACtB,0BACEC,EAAG,EACHC,EAAG,EACHH,MAAO,GACPC,OAAQ,GACRG,GAAI,EACJC,KAAMnB,EAAS3K,MACf+L,QAAStE,EAAKuE,OAAS,IACzB,uBAAGC,UAAS,kBACT,kBAACrB,EAAD,CAAgBa,MAAO,GAAIC,OAAQ,SAU/BQ,GAvGiB,SAAC,GAM1B,IALLC,EAKI,EALJA,MACAC,EAII,EAJJA,eACAC,EAGI,EAHJA,cAGI,IAFJC,mBAEI,MAFU,aAEV,MADJ3C,iCACI,MADwB,aACxB,EAeJ,OACE,yBACE4C,UAAWC,KAAOC,QAClBC,MAAO,CAAEC,QAAS,OAAQC,cAAe,QACxCT,EAAM/N,KAAI,SAACqJ,EAAMoF,GAChB,IAAMd,EAlBZ,SAA8BtE,EAAM2E,EAAgBC,GAClD,IAAIN,EASJ,OARIK,GAAkB3E,EAAKlJ,KAAO6N,GAEvBC,GAAiB5E,EAAKlJ,KAAO8N,KADtCN,EAAU,IAIRtE,EAAKlJ,KAAO8N,GAAiB5E,EAAKlJ,KAAO6N,IAC3CL,EAAU,GAELA,EAQae,CACdrF,EACA2E,EACAC,GAEF,OACE,yBACEU,IAAKF,EACLH,MAAO,CAAEX,WACTiB,aAAc,kBAAMV,EAAY7E,EAAKlJ,KACrC0O,aAAc,kBAAMX,EAAY,OAChCY,QAAS,kBAAMvD,EAA0BlC,KACzC,kBAAC,GAAD,CAAcA,KAAMA,U,UCI1B0F,GAAQC,YAAe,CAC3BC,UAAW,CACTC,aAAc,CACZC,KAAM,CACJC,QAAS,QAMXC,GAAYC,YAAW,CAC3BH,KAAM,CACJI,SAAU,IACVC,SAAU,GAEZC,MAAO,CACLL,QAAS,QAEXM,SAAU,CACRC,OAAQ,UACRC,gBAAiB,oBAEnBC,OAAQ,CACNnC,KAAM,WAERoC,MAAO,CACLzC,MA5Bc,IA6BdC,OA9BY,KAiCdyC,UAAW,CACTC,SAAU,OAEZC,OAAQ,CACN1B,QAAS,eACT2B,OAAQ,QACRrC,UAAW,cAEbhB,MAAO,CACLmD,SAAU,IAEZG,IAAK,CACHC,aAAc,MAWlB,SAASxC,GAAMP,EAAOgD,GACpB,OAAOC,MAAiBC,MAAM,CAAC,GAAIlD,IAAQmD,OAAO,CAAC,EAAGH,IAGvCzC,GAAM,GAAI,GACTA,GAAM,GAAI,MAD5B,IAGa6C,GAAW,SAACC,GAAW,IAEhCC,EAMED,EANFC,QACAC,EAKEF,EALFE,WACAC,EAIEH,EAJFG,gBACAC,EAGEJ,EAHFI,OAL+B,EAQ7BJ,EAFFK,YAN+B,WAQ7BL,EADFM,YAP+B,MAOxB,CAAE3D,MAAO,IAAKC,OAAQ,KAPE,EAU7B7K,EAAOkO,EAAQM,MAAK,SAACC,GAAD,OAAOA,EAAEJ,QAAUA,KAC3C,GAAiB,QAAbrO,EAAKP,MAA+B,YAAbO,EAAKP,KAAoB,CAClD,IAAImL,EAAQ0D,EAAOC,EAAK3D,MAAQ,IAC5BC,EAASyD,EAAOC,EAAK1D,OAAS,GAE9B6D,EAAeJ,EAAO,GAAKzD,EAAS,GAEpC8D,EAAazQ,OAAO0Q,QAAQ5O,EAAKqK,OAClCwE,MAAK,SAACtQ,EAAGuQ,GAAJ,OAAWvQ,EAAE,GAAKuQ,EAAE,IAAM,EAAI,KACnCC,MAAM,EAAG,IAGRC,EAAUL,EAAWpR,KAAI,SAAC0R,GAAD,OAAOA,EAAE,MAClCC,EAAUrB,IAAUc,EAAWpR,KAAI,SAAC0R,GAAD,OAAOA,EAAE,OAE5CE,EAAStB,MAAiBE,OAAOmB,GAASpB,MAAM,CAAC,EAAGY,IAEpDU,EAASvB,MAEVE,OAAOiB,GACPlB,MAAM,CAAC,EAAGjD,IACV8B,QAAQ,KAEP0C,EAAWD,EAAOE,YAElBC,EAAepB,EACfA,EAAWqB,MAAMhB,MAAK,SAACC,GAAD,OAAOA,EAAEJ,QAAUA,UACzClO,EACAsP,EAAoBF,EACpBrR,OAAO0Q,QAAQW,EAAalF,OACzBwE,MAAK,SAACtQ,EAAGuQ,GAAJ,OAAWvQ,EAAE,GAAKuQ,EAAE,IAAM,EAAI,KACnCC,MAAM,EAAG,IACZ,GAECT,IACHY,EAAUP,EAAWpR,KAAI,SAAC0R,GAAD,OAAOA,EAAE,MAClCD,EAAU,CAAC,EAAGnB,IAAUc,EAAWpR,KAAI,SAAC0R,GAAD,OAAOA,EAAE,OAAK,IAErDG,EAASvB,MAAiBE,OAAOiB,GAASlB,MAAM,CAAC,GAAIY,IAErDS,EAAStB,MAAeE,OAAOmB,GAASpB,MAAM,CAAC,EAAGlD,IAAQ+B,QAAQ,IAElE0C,EAAWF,EAAOG,aAGpB,IAAII,EAAgBf,EAAWvF,OAAS,EACpCgC,EAAYkD,EAAO,uBAAyB,uBAE9C,OAAOoB,EAAgB,KACrB,yBAAK9E,MAAOA,EAAQ,GAAIC,OAAQA,EAAS,IAEvC,uBAAGgB,MAAO,CAAET,UAAWA,IACrB,0BACEuE,GAAI,EACJC,GAAItB,EAAOc,EAAOtB,QAAQ,GAAKsB,EAAOtB,QAAQ,GAC9C+B,GAAIvB,EAAO,EAAIa,EAAOrB,QAAQ,GAC9BgC,GAAIV,EAAOtB,QAAQ,GACnBjC,MAAO,CAAEkE,OAAQ,kBAAmBC,YAAa,KAClDrB,EAAWpR,KAAI,SAAC0S,GACf,IAAI/D,EAAM+D,EAAM,GACZ1K,EAAQ0K,EAAM,GACdC,EAAchE,EAAM,MAAQ3G,EAE5BuF,EAAIwD,EAAOa,EAAO5J,GAAS,EAAI4J,EAAOjD,GAAO,EAC7CnB,EAAIuD,EACJc,EAAOlD,GAAOmD,EACdxE,EAASuE,EAAOtB,QAAQ,GAC5B,OACE,kBAAC,IAAMqC,SAAP,CAAgBjE,IAAKA,GACnB,kBAAClC,EAAA,EAAD,CAASI,MAAO8F,GACd,0BACExE,UAAU,QACVQ,IAAK,KAAOA,EACZL,MAAO,CACLX,QAASkD,EAAkB,GAAM,EACjCnD,KAAM,qBAERH,EAAGwD,EAAO,EAAIa,EAAOjD,GACrBnB,EACEuD,EACIc,EAAOlD,GACPrB,EAASuE,EAAOtB,QAAQ,GAAKsB,EAAO7J,GAE1CqF,MAAO0D,EAAOa,EAAO5J,GAAS8J,EAC9BxE,OAAQyD,EAAOe,EAAWD,EAAO7J,MAErC,kBAACyE,EAAA,EAAD,CAASI,MAAO8F,GACd,0BACErE,MAAO,CACL0B,SAAU,MACV6C,WAAY,QACZhF,UACE,aAAeN,EAAI,MAAQC,EAAI,sBAEnCD,EAAG,EACHC,EAAG,GACF,IACAmB,EAAK,MAGTkC,EACC,GAEA,0BACEvC,MAAO,CACL0B,SAAU,MACV6C,WAAY,UAEdtF,EAAGwD,GAAQ,EAAIa,EAAOjD,GAAOmD,EAAW,EACxCtE,EACEuD,EACIc,EAAOlD,GAAOmD,EACdxE,EAASuE,EAAOtB,QAAQ,GAAKsB,EAAO7J,GAAS,GAElD,IACAA,EAAO,SAQjBkK,EACE/J,QAAO,SAAC2K,GAAD,OAAOlB,EAAOkB,EAAE,OACvB9S,KAAI,SAAC0S,GACJ,IAAI/D,EAAM+D,EAAM,GACZ1K,EAAQ0K,EAAM,GACdC,EAAchE,EAAM,MAAQ3G,EAEjB4J,EAAPb,EAAc/I,EAAoB2G,GAClCoC,EACJc,EAAOlD,GACEkD,EAAOtB,QAAQ,GAC5B,OACE,kBAAC,IAAMqC,SAAP,CAAgBjE,IAAK,UAAYA,GAC/B,kBAAClC,EAAA,EAAD,CAASI,MAAO8F,GACd,0BACExE,UAAU,QACVQ,IAAK,KAAOA,EACZL,MAAO,CAAEZ,KAAMmD,GACftD,EAAGwD,EAAO,EAAIa,EAAOjD,GACrBnB,EACEuD,EACIc,EAAOlD,GACPrB,EAASuE,EAAOtB,QAAQ,GAAKsB,EAAO7J,GAE1CqF,MAAO0D,EAAOa,EAAO5J,GAAS8J,EAC9BxE,OAAQyD,EAAOe,EAAWD,EAAO7J,MAGrC,0BACEsG,MAAO,CACL0B,SAAU,MACV6C,WAAY,UAEdtF,EAAGwD,GAAQ,EAAIa,EAAOjD,GAAOmD,EAAW,EACxCtE,EACEuD,EACIc,EAAOlD,GAAOmD,EACdxE,EAASuE,EAAOtB,QAAQ,GAAKsB,EAAO7J,GAAS,GAElD,IACAA,EAAO,WAW5B,OAAO,MA2BQsI,MAAiBC,MAAM,CAAC,EAAG,KAAKC,OAAO,CAAC,EAAG,MAE5D,SAASuC,GAAT,GAAuD,IAYjDC,EAZcrQ,EAAkC,EAAlCA,OAAQsQ,EAA0B,EAA1BA,cAAeC,EAAW,EAAXA,QAIrCC,EAAU,wBAA0BxQ,EAAS,IAAMsQ,EAAgB,OASvE,IACED,EAAMI,OAAQ,KACZzQ,EACA,IACAsQ,EACA,QACF,MAAOhI,GAEP+H,EAAM,GAGR,OACE,oCACE,kBAACK,EAAA,EAAD,CAAKC,GAAI,MAAOC,GAAI,MAAOC,GAAI,OAAQC,UAAW,GAChD,kBAACC,EAAA,EAAD,CACEpF,MAAO,CAAEC,QAAS,gBAClBJ,UAAW+E,EAAQpD,MACnB6D,UAAU,MACVC,MAAOZ,EAEPnG,MAAOsG,KAGX,kBAACU,EAAA,EAAD,CAAY1F,UAAW+E,EAAQ/C,IAAK2D,QAAQ,WAAWlS,MAAM,WAA7D,aAQN,SAASmS,GAAT,GAA2F,IAAlEC,EAAiE,EAAjEA,IAAKpD,EAA4D,EAA5DA,WAAYC,EAAgD,EAAhDA,gBAAiBoD,EAA+B,EAA/BA,WAAYC,EAAmB,EAAnBA,gBAKjEC,EAAiBC,KAAKC,MAAM/G,MAC5BgH,EAAUF,KAAKG,KALP,IAKoBJ,GAC5B9G,EAAe,EAAPiH,EAIR1C,EAAStB,MAEVC,MAAM,CAAC,EAAGiE,IACVhE,OAAO,CAAC,EAAG,IACVqB,EAASvB,MAAiBC,MAAM,CAAC,EAbxB,KAaoCC,OAAO,CAAC,EAAG2D,IAExDM,EAAsBT,EAAIU,kBAAkB1U,KAAI,SAAC2U,GAAD,OAAOA,EAAE9K,iBACzD+K,EAAqB,GAGvBA,EADEX,EACqBA,EAAWS,kBAAkB1U,KAAI,SAAC2U,GAAD,OAAOA,EAAE9K,iBAE3C+G,EACpBA,EAAW8D,kBAAkB1U,KAAI,SAAC2U,GAAD,OAAOA,EAAE9K,iBAC1C,GAUJ,IAAIgL,EAAeJ,EAAoBtM,QAAO,SAACoF,GAAD,OAC5CqH,EAAoBE,SAASvH,MAK/B,OACE,yBAAKF,MAAOA,EAAQ0H,IAAazH,OAxCtB,IAyCR0H,MAAMC,KAAKD,MA1CJ,KA0CiBtU,QAAQV,KAAI,SAAC2O,GACpC,OACE,0BACEA,IAAKA,EACLpB,EAAGqE,EAAOwC,KAAKC,MAAM1F,EAAMwF,IAC3B3G,EAAGqE,EAAOlD,EAAMwF,GA5CZ,EA6CJ9G,MA9CM,EA+CNC,OA/CM,EAgDNgB,MAAO,CAELZ,KACEiB,EAAMkG,EAAahJ,OACfgF,GAAmB,qBACnBlC,EAAMqF,EAAIlH,MACT8D,GAAcqD,EAAaC,EAAkB,qBAC9C,2BAKd,0BACE3G,EAAGqE,EAAO0C,GA5DF,EA6DR9G,EAAGqE,EAAOsC,EAAiB,GAC3B7F,MAAO,CACL4G,WAAY,OACZC,kBAAmB,SACnBtC,WAAY,QACZnF,KAAO,uBAERsG,EAAIlH,OAGN8D,EAAa,0BACZrD,EAAGqE,EAAO0C,GAxEF,EAwEuB,GAC/B9G,EAAGqE,EAAOsC,EAAiB,GAC3B7F,MAAO,CACL4G,WAAY,OACZC,kBAAmB,SACnBtC,WAAY,QACZnF,KAAMmD,IAEP,MAAQgE,EAAahJ,QACd,qCAEToI,GAAcrD,EAAY,0BACzBrD,EAAGqE,EAAO0C,GApFF,EAoFuB,GAC/B9G,EAAGqE,EAAOsC,EAAiB,GAC3B7F,MAAO,CACL4G,WAAY,OACZC,kBAAmB,SACnBtC,WAAY,QACZnF,KAAMwG,IAEP,MAAQF,EAAIlH,MAAQ+H,EAAahJ,SAC1B,sCA8BhB,SAASuJ,GAAT,GAAiD,IAApBvF,EAAmB,EAAnBA,OAAQqD,EAAW,EAAXA,QAEnC,OACE,yBAAK7F,MAFI,GAESC,OAFT,GAEuBgB,MAAO,CAAE+G,WAAY,QACnD,kBAAC,IAAD,CACElH,UAAW0B,EAASqD,EAAQrD,OAAS,GACrCvB,MAAO,CAAET,UAAW,mBACpBR,MANK,GAOLC,OAPK,MAcb,SAASgI,GAAT,GAQI,IAPFC,EAOC,EAPDA,KACA1E,EAMC,EANDA,gBAMC,IALDD,kBAKC,WALYhO,EAKZ,MAJD4S,qBAIC,WAJe5S,EAIf,EAHDsR,EAGC,EAHDA,gBAGC,IAFDD,kBAEC,WAFYrR,EAEZ,MADD6S,qBACC,WADe7S,EACf,EAIKsQ,EAAU7D,KAJf,EAMqB7K,mBAAS,CAC7BwD,MAAO,QACP0N,KAAM,CAAEC,OAAO,EAAMC,SAAS,KAR/B,mBAMItE,EANJ,KAMUuE,EANV,KAqBD,OATAN,EAAKjE,MAAK,SAACtQ,EAAGuQ,GACZ,IAAIuE,EAAuB,SAAdxE,EAAKtJ,MAAmBhH,EAAE8L,MAAQ9L,EAAE+U,IAAIlK,OACjDmK,EAAuB,SAAd1E,EAAKtJ,MAAmBuJ,EAAEzE,MAAQyE,EAAEwE,IAAIlK,OACjDoK,EAAS3E,EAAKoE,KAAKpE,EAAKtJ,QAAU,EAAI,EAC1C,OAAO8N,EAASE,EAASC,GAAUA,KAMnC,kBAAC,IAAD,CAAkBlH,MAAOA,IACvB,kBAACmH,EAAA,EAAD,CAAgB5H,MAAO,CAAE6H,UAAW,UAClC,kBAAC,IAAD,CAAOC,cAAY,EAACC,aAAW,gBAC7B,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACG,CACC,CAAE5H,IAAK,UAAW9B,MAAO,uBACzB,CAAE8B,IAAK,QAAS9B,MAAO,sBACvB7M,KAAI,SAACwW,GACL,OACE,kBAACC,EAAA,EAAD,CACE9H,IAAK6H,EAAM,IACX1H,QAAS,WAEP,IAAI4H,GADJpF,EAAI,eAAQA,IACOtJ,OAASwO,EAAO7H,IACnC2C,EAAKtJ,MAAQwO,EAAO7H,IACpB2C,EAAKoE,KAAKc,EAAO7H,MAAO+H,IACnBpF,EAAKoE,KAAKc,EAAO7H,KAEtBkH,EAAQvE,IAEVnD,UAAW+E,EAAQxD,UAClB,IACA8G,EAAO3J,MACR,kBAACuI,GAAD,CACElC,QAASA,EACTrD,OAAQyB,EAAKtJ,OAASwO,EAAO7H,YAMzC,kBAACgI,EAAA,EAAD,KACGpB,EAAKvV,KAAI,SAACgU,EAAKlI,GAEd,OACE,kBAACyK,EAAA,EAAD,CACE5H,IAAKqF,EAAI7T,GACTyW,YAAa,WACX3C,GAAcD,EAAMyB,IAAkBA,EAAczB,IAEtDpF,aAAc,WACZ4G,EAAcxB,IAEhBnF,aAAc,kBAAM2G,KACpBlH,MAAO,CACLuI,WAAY5C,GAAcD,EAAO,mBAAqBpD,GAAcoD,EAAM,mBAAsB,UAElG,kBAACyC,EAAA,EAAD,CACE9C,UAAU,KACVmD,MAAM,MACNxI,MAAO,CAAEjB,MAAO,QAAS+B,QAAS,SACjC4E,EAAI+B,IACH,kBAAC,GAAD,CAEEhI,MAAOiG,EAAI+C,OACX/I,oBAAgBpL,EAChB2I,0BAA2B,eAE7ByI,EAAIgD,QAGPhD,EAAI+B,IACH,kBAACU,EAAA,EAAD,CAAWQ,MAAM,QACf,kBAAClD,GAAD,CACEC,IAAKA,EACLpD,WAAYA,EACZC,gBAAiBA,EACjBoD,WAAcA,EACdC,gBAAmBA,KAIvB,6CAgBpB,SAASgD,GAAT,GAAgG,IAA3EzU,EAA0E,EAA1EA,KAAMmO,EAAoE,EAApEA,WAAYE,EAAwD,EAAxDA,OAAQD,EAAgD,EAAhDA,gBAAiBoD,EAA+B,EAA/BA,WAAYC,EAAmB,EAAnBA,gBAGtElM,EAAQvF,EAAKwO,MAAK,SAACC,GAAD,OAAOA,EAAEJ,QAAUA,KACzC,GAAkB,OAAd9I,EAAM9F,MAA+B,SAAd8F,EAAM9F,KAAiB,CAChD,IAAI8P,EAEJ,GAAIiC,GAAcrD,GAAcqD,GAAcrD,EAC5CoB,EAAepB,EACbA,EAAWqB,MAAMhB,MAAK,SAACC,GAAD,OAAOA,EAAEJ,QAAUA,UACzClO,EACFC,QAAQC,IAAI,uBAAwB8N,EAAW8D,kBAAkB7I,aAG9D,GAAIoI,EAAW,CAElB,IAAIkD,EAAkBvG,EAAaqD,EAAWmD,cAAcnG,MAAK,SAAAoG,GAAC,OAAEA,EAAElX,IAAMyQ,EAAWzQ,WAAMyC,EAC7FoP,EAAemF,EACbA,EAAgBlF,MAAMhB,MAAK,SAACC,GAAD,OAAOA,EAAEJ,QAAUA,UAC9ClO,EACEuU,GACFtU,QAAQC,IAAI,uBAAwBqU,EAAgBzC,kBAAkB7I,aAGxEmG,EAAepB,EACbA,EAAWqB,MAAMhB,MAAK,SAACC,GAAD,OAAOA,EAAEJ,QAAUA,UACzClO,EAKJ,IAAI0U,EAAYtF,EAAeA,EAAauF,QAAK3U,EAC7C4U,EAAYvD,GAAcA,IAAerD,EAAasD,EAAmBrD,EAC7E,OACE,kBAAC4G,GAAA,EAAD,CAAM9I,IAAKmC,EAAS,QAASvJ,MAAI,GAE7B,kBAAC,GAAD,CACEsJ,gBAAiB2G,EACjB/U,KAAMuP,GAAgBhK,EACtBuP,GAAID,GAAatP,EAAMuP,KAG3B,kBAAC1D,EAAA,EAAD,CACEvF,MAAO,CAAEC,QAAS,SAClB3M,MAAM,UACNkS,QAAQ,YACPhD,IAkBT,OAAO,qCAGF,IAAM4G,GAAgB,SAAChH,GAAW,IAErCjO,EAIEiO,EAJFjO,KACAoO,EAGEH,EAHFG,gBACA0G,EAEE7G,EAFF6G,GAJoC,EAMlC7G,EADFM,YALoC,MAK7B,CAAE3D,MAAO,IAAKC,OAAQ,IALO,IAQV9I,oBAAS,GARC,mBAQjCmT,EARiC,KAQxBC,EARwB,KAgClCC,EAAUN,EAAG,GACbO,EAAaP,EAAG,GAChBQ,EAAaR,EAAG,GAEhBlK,EAAQ2D,EAAK3D,MACbC,EAAS0D,EAAK1D,OAKdqE,EAAUrB,IAAU7N,EAAKuV,MACzBvG,EAAUnB,IAAU7N,EAAKwV,MAEzBrG,EAAStB,MAEVE,OAAOmB,GACPpB,MAAM,CAAC,GAAIlD,EAAQ,KAElBwE,EAASvB,MAAiBE,OAAOiB,GAASlB,MAAM,CAAC,EAXrC,KAaZuB,EAAWF,EAAOnP,EAAKuV,KAAK,IAAMpG,EAAOnP,EAAKuV,KAAK,IAZtC,EAcbE,EAAY9D,KAAK+D,MAAgB,GAAVN,GAAgB,GAE3C,OACE,oCACE,yBACEvJ,MAAO,CAAET,UAAW,wBACpBR,MAAOA,EACPC,OAAQA,EACRsB,aAAc,kBAAMgJ,GAAW,IAC/B/I,aAAc,kBAAM+I,GAAW,KAC/B,uBAAG/J,UAAW,mBACZ,0BACEuE,GAAI,EACJC,GAAIR,EAAOtB,QAAQ,GACnB+B,GAAIV,EAAOrB,QAAQ,GACnBgC,GAAIV,EAAOtB,QAAQ,GACnBjC,MAAO,CAAEkE,OAAQ,kBAAmBC,YAAa,KAClDhQ,EAAKwV,KAAKjY,KAAI,SAAC8S,EAAGhH,GAAJ,OACb,0BACEqC,UAAU,QACVQ,IAAK,KAAOlM,EAAKuV,KAAKlM,GACtBwC,MAAO,CAAEZ,KAAMmD,GAAmB,oBAClCtD,EAAGqE,EAAOnP,EAAKuV,KAAKlM,IAAMsM,EAC1B5K,EAtCI,GAsCWqE,EAAOiB,GACtBzF,MAAOyE,EACPxE,OAAQuE,EAAOiB,QAEnB,4BACE3E,UAAU,QACVG,MAAO,CAAEZ,KAAM,UAAWC,QAAS,GACnC0K,GAAIzG,EAAOiG,GACXS,GAAIzG,EAAOtB,QAAQ,GAAK,EACxB8G,EAAG,IAEL,0BACElJ,UAAU,QACVG,MAAO,CAAEkE,OAAQ,QAASC,YAAa,EAAG9E,QAAS,IACnDyE,GAAIR,EAAOkG,GACXxF,GAAIV,EAAOmG,GACX1F,GAAIR,EAAOtB,QAAQ,GAAK,EACxBgC,GAAIV,EAAOtB,QAAQ,GAAK,IAE1B,0BACEjC,MAAO,CAAE0B,SAAU,MAAO6C,WAAY,UACtCtF,EAAGqE,EAAOiG,GACVrK,EAAG,IACF,IACA0K,EAAW,KAGbP,EACC,oCACE,0BACErJ,MAAO,CACLZ,KAAM,kBACNsC,SAAU,MACV6C,WAAY,OAEdtF,GAAI,EACJC,EAAG,IACF,IACA4G,KAAKC,MAAMzC,EAAOpB,SAAS,IAAK,KAEnC,0BACElC,MAAO,CACLZ,KAAM,kBACNsC,SAAU,MACV6C,WAAY,SAEdtF,EAAGqE,EAAOrB,QAAQ,GAAK,EACvB/C,EAAG,IACF,IACA4G,KAAKG,KAAK3C,EAAOpB,SAAS,IAAK,MAGlC,SAQd,SAAS+H,GAAT,GAAuE,IAQjEC,EAAa/V,EAAMgW,EARA1I,EAA6C,EAA7CA,UAAWkD,EAAkC,EAAlCA,cAAeC,EAAmB,EAAnBA,QAASvQ,EAAU,EAAVA,OAAU,EAEhC6B,qBAFgC,mBAE7DoM,EAF6D,KAEjD4E,EAFiD,OAGhChR,qBAHgC,mBAG7DyP,EAH6D,KAGjDwB,EAHiD,OAI1CjR,oBAAS,GAJiC,mBAI/DvC,EAJ+D,KAIvDyW,EAJuD,KA+BpE,OAlBAF,EAAczI,EAAU4I,SAAS,GAAGC,KACpCnW,EAAOsN,EAAUkC,MAEjBwG,EAAY,YAAO,IAAII,IAAIpW,EAAKzC,KAAI,SAACkR,GAAD,OAAOA,EAAEJ,YAE7C0H,EAAYxY,KAAI,SAAC2K,EAAQmB,GAOvB,OANAnB,EAAOxK,GAAK2L,EACZnB,EAAOoM,OAASpM,EAAOoL,IAAI/V,KAAI,SAACgB,GAAD,MAAQ,CACrCa,KAAMb,EACNb,GAAIa,EACJ8L,MAAOnC,EAAOmC,UAETnC,KAMD8N,EAGN,kBAAC,IAAM7F,SAAP,CAAgBjE,IAAK,iBAAmBsE,GACtC,kBAACY,EAAA,EAAD,CACE/E,QAAS,WACP4J,GAAWzW,IAEbqM,MAAO,CAAEqB,OAAQ,WACjBxB,UAAW+E,EAAQnD,UACnB+D,QAAQ,YACPb,GAEFhR,EACC,qCAEA,kBAACwV,GAAA,EAAD,CAAMqB,WAAS,EAAC3K,UAAW+E,EAAQ/D,KAAM4J,QAAS,GAChD,kBAACtB,GAAA,EAAD,CAAMlQ,MAAI,EAACyR,GAAI,IACb,kBAACvB,GAAA,EAAD,CAAMqB,WAAS,EAACG,QAAQ,aAAaF,QAAS,GAC5C,kBAACtB,GAAA,EAAD,CAAM9I,IAAK,MAAOpH,MAAI,GACpB,kBAACwL,GAAD,CACEpQ,OAAQA,EACRuQ,QAASA,EACTD,cAAeA,KAEnB,kBAACwE,GAAA,EAAD,CAAM9I,IAAK,OAAQpH,MAAI,GACrB,kBAAC8L,EAAA,EAAD,CACE/F,OA30BF,IA40BED,MAAO,IACPiG,GAAI,MACJC,GAAI,MACJC,GAAI,OACJC,UAAW,EACXnF,MAAO,CAAE4K,SAAU,WAEjB,kBAAC5D,GAAD,CACEC,KAAMiD,EACN5H,WAAYA,EACZC,gBAAiBD,EA/Df,eA+D8ChO,EAChD4S,cAAeA,EACfvB,WAAYA,EACZC,gBAAiBD,EAjEf,eAiE8CrR,EAChD6S,cAAeA,KAGrB,kBAAC5B,EAAA,EAAD,CACE1F,UAAW+E,EAAQ/C,IACnB2D,QAAQ,WACRlS,MAAM,WAHR,YAOF,kBAAC6V,GAAA,EAAD,CAAM9I,IAAK,qBAAsBpH,MAAI,EAACyR,IAAE,GACtC,kBAACvB,GAAA,EAAD,CACE9I,IAAK,qBACLpH,MAAI,EACJ+G,MAAO,CAAEC,QAAS,UAClB,kBAAC8E,EAAA,EAAD,CACE/F,OAAQ6L,IACRC,EAAG,OACH9F,GAAI,MACJC,GAAI,MACJC,GAAI,OACJlF,MAAO,CAAE4K,SAAU,SAAU3K,QAAS,eACtCkF,UAAW,GACVgF,EAAazY,KAAI,SAAC8Q,GACjB,OACE,kBAAC,GAAD,CACEnC,IAAKmC,EACLrO,KAAMA,EACNmO,WAAYA,EACZC,gBACED,EAjGJ,eAiGmChO,EAEjCqR,WAAYA,EACZC,gBACED,EApGJ,eAoGmCrR,EAEjCkO,OAAQA,QAIhB,kBAAC+C,EAAA,EAAD,CACE1F,UAAW+E,EAAQ/C,IACnB2D,QAAQ,WACRlS,MAAM,UACN0M,MAAO,CAAEC,QAAS,UAJpB,wBASF,kBAACkJ,GAAA,EAAD,CAAM9I,IAAK,WAAYpH,MAAI,EAACyR,IAAE,GAC5B,kBAAC3F,EAAA,EAAD,CACE/F,OAAQ6L,IACR9L,MAAO,EACPiG,GAAI,MACJC,GAAI,MACJC,GAAI,OACJC,UAAW,EACXnF,MAAO,CAAE4K,SAAU,WAClBT,EAAazY,KAAI,SAAC8Q,GACjB,OACE,kBAAC,GAAD,CACEnC,IAAKmC,EACLH,QAASlO,EACTmO,WAAYA,EACZC,gBACED,EApIJ,eAoImChO,EAEjCkO,OAAQA,QAMhB,kBAAC+C,EAAA,EAAD,CACE1F,UAAW+E,EAAQ/C,IACnB2D,QAAQ,WACRlS,MAAM,WAHR,8CAuBZ,kBAACyX,EAAA,EAAD,OAzIF,qCA8IJ,SAASC,GAAT,GAAsC,IAAlBC,EAAiB,EAAjBA,KAAMrG,EAAW,EAAXA,QAAW,EACT1O,oBAAS,GADA,mBAC9BvC,EAD8B,KACtByW,EADsB,KAGnC,OACE,kBAACrF,EAAA,EAAD,CACEnC,EAAG,EACHvC,IAAK,OAAS4K,EAAK5W,QAInB,kBAAC6W,EAAA,EAAD,CAAMrL,UAAW+E,EAAQ/D,KAAMR,IAAK4K,EAAK5W,QACvC,kBAAC8W,EAAA,EAAD,KACE,kBAAC5F,EAAA,EAAD,CACEC,QAAQ,KACRH,UAAU,KACV7E,QAAS,WACP4J,GAAWzW,IAEbqM,MAAO,CAAEqB,OAAQ,UAAWpB,QAAS,iBACpCgL,EAAK1X,MAGR,kBAACgS,EAAA,EAAD,CACE1F,UAAW+E,EAAQ/C,IACnBvO,MAAM,gBACN0M,MAAO,CAAEC,QAAS,eAAgBmL,WAAY,SAC7CH,EAAKI,OAAS,MAAQJ,EAAKvC,OAAS,KAEvC,kBAACqC,EAAA,EAAD,MAECpX,EACC,qCAEAtB,OAAOD,KAAK6Y,EAAK/Q,YAAYxI,KAAI,SAAC4Z,GAChC,IAAI7J,EAAYwJ,EAAK/Q,WAAWoR,GAChC,OACE,kBAACrB,GAAD,CACE5J,IAAK4K,EAAK5W,OAASiX,EACnB7J,UAAWA,EACXkD,cAAe2G,EACfjX,OAAQ4W,EAAK5W,OACbuQ,QAASA,QAKlBjR,EACC,qCAEA,kBAAC4X,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQ9I,KAAK,SAAb,cAQG,SAAS+I,KACtB,IAAM7G,EAAU7D,KADsB,GAER6D,EAAQjD,OAEP5D,qBAAWrF,KAAlCvE,EAJ8B,EAI9BA,KAAM0G,EAJwB,EAIxBA,aAOd,SAAS6Q,EAAUT,EAAMU,EAAiBC,GACxC,IAAI1R,EAAa7H,OAAOD,KAAK6Y,EAAK/Q,YAC9B2R,EAAS,GASb,OARA3R,EAAWxI,KAAI,SAACoa,GACd,GAAIH,EAAgBG,GAAI,CACtB,IAAI3B,EAAec,EAAK/Q,WAAW4R,GAAGnI,MAAMhB,MAC1C,SAAC0D,GAAD,OAAOA,EAAE7D,QAAUoJ,KAErBC,EAAOE,KAAK5B,EAAalB,GAAG,QAGzB4C,EAET,GAAI1X,GAGE0G,EAAc,CAChBtG,QAAQC,IAAI,eAAgBqG,GAC5B,IAAI+Q,EAAU/Q,EAAa2H,OACvB4E,EAAOvM,EAAauM,KACpBuE,EAAkB9Q,EAAaX,WAEnC/F,EAAK6X,MAAMhJ,MAAK,SAACtQ,EAAGuQ,GAClB,IAAIuE,EAAQE,EACZ,GAAe,QAAXkE,EACFpE,EAAS9U,EAAEkZ,GACXlE,EAASzE,EAAE2I,OACN,CACL,IAAIK,EAAUP,EAAUhZ,EAAGiZ,EAAiBC,GACxCM,EAAUR,EAAUzI,EAAG0I,EAAiBC,GAC5CpE,EAASJ,EAAOtB,KAAKqG,IAAL,MAAArG,KAAI,YAAQmG,IAAWnG,KAAKsG,IAAL,MAAAtG,KAAI,YAAQmG,IACnDvE,EAASN,EAAOtB,KAAKqG,IAAL,MAAArG,KAAI,YAAQoG,IAAWpG,KAAKsG,IAAL,MAAAtG,KAAI,YAAQoG,IAGrD,IAAIvE,EAASP,GAAQ,EAAI,EACzB,OAAOI,EAASE,EAASC,GAAUA,KAGrCxT,EAAKoG,SAASyI,MAAK,SAACtQ,EAAGuQ,GACrB,IAAIoJ,EAAQlY,EAAK6X,MAAMrJ,MAAK,SAAC2J,GAAD,OAAOA,EAAEjY,QAAU3B,KAC3C6Z,EAAQpY,EAAK6X,MAAMrJ,MAAK,SAAC2J,GAAD,OAAOA,EAAEjY,QAAU4O,KAE/C,OAAKoJ,GAAUE,GAGFpY,EAAK6X,MAAMQ,QAAQH,GACnBlY,EAAK6X,MAAMQ,QAAQD,GAEP,GALf,KAQZhY,QAAQC,IAAI,gBAKCwN,MAGdE,OAAO,CAAC,EAAG,MACXD,MAAM,CAAC,GAAK,IAKf,YAAgB3N,GAFJH,EAGV,qCAEA,oCACGA,EAAKoG,SAAS7I,KAAI,SAAC2C,GAClB,IAAI4W,EAAO9W,EAAK6X,MAAMrJ,MAAK,SAAC2J,GAAD,OAAOA,EAAEjY,QAAUA,KAC9C,OAAO4W,EACL,kBAACD,GAAD,CAAU3K,IAAK4K,EAAK1X,KAAM0X,KAAMA,EAAMrG,QAASA,IAE/C,kBAAC6H,EAAA,EAAD,CACEpM,IAAKhM,EACLmR,QAAQ,OACRzG,MAAO,MACPC,OAAQ,IACRgB,MAAO,CAAE4B,OAAQ,OAAQd,QAAS,SALpC,WAMWzM,OCvmCrB,IAiCIgP,GAASF,GAASuJ,GAjChB3L,GAAYC,YAAW,CACzBH,KAAM,CACFI,SAAU,IACVC,SAAU,GAEdS,OAAQ,CACJ1B,QAAS,eACT2B,OAAQ,QACRrC,UAAW,cAEfhB,MAAO,CACHmD,SAAU,IAEdG,IAAK,CACDC,aAAc,MAsBP,SAAS6K,KACpB,IAAM/H,EAAU7D,KADgB,GAEF6D,EAAQjD,OACV5D,qBAAWrF,KAAjCvE,EAH0B,EAG1BA,KAAKsG,EAHqB,EAGrBA,aAwTX,SAAS4O,EAAQ7E,GACToI,IAAmBpI,EAAE/I,UACrB6N,EAAW9E,EAAE/I,UAxTrBpJ,OAAO8G,OAAOhF,EAAKsG,GA6TnB9D,qBAAU,WACFxC,IACApB,EAAeoB,EAAKpB,cACPrB,KAAI,SAAAoZ,GACbA,EAAE+B,MAAMnb,KAAI,SAAA8S,GACRA,EAAE/I,SAAW+I,EAAEsI,QAAU,IAAMhH,KAAKiH,iBAKjD,CAAC5Y,IA5U4B,IAgV5BpB,EAAcia,EAlWM3M,EAkBQ,EA8UGnK,qBA9UH,mBA8U3B0W,EA9U2B,KA8UXtD,EA9UW,KAiVhC,GAAInV,EAAM,CAIN,IAAI8Y,GAHJla,EAAeoB,EAAKpB,cAGSrB,KAAI,SAAAoZ,GAAC,OAAIA,EAAE+B,MAAMnb,KAAI,SAAA2U,GAAC,OAAIA,EAAE6G,YAAQC,OAEjET,GAAU,YAAQ,IAAInC,IAAIxX,EAAarB,KAAI,SAAAoZ,GAAC,OAAIA,EAAE+B,MAAMnb,KAAI,SAAA2U,GAAC,OAAIA,EAAE+G,eAAWD,SAC9E9J,GAAUrB,IAAUjP,GAAc,SAAAyR,GAAC,OAAIA,EAAE6I,qBACzClK,GAAUnB,IAAUiL,GA3WA5M,EA6WoB,YAAxC2M,EAA0Bja,EA5WpBua,QAAO,SAAUC,EAAItO,GAE3B,OADCsO,EAAGtO,EAAEoB,IAAQkN,EAAGtO,EAAEoB,KAAS,IAAI0L,KAAK9M,GAC9BsO,IACR,IA8WcvL,MAEZE,OAAO,CAAC,EAAG,MACXD,MAAM,CAAC,GAAK,IAQjB,YAAiB3N,GALLH,EAKiB,qCAAQ,kBAAC,IAAMmQ,SAAP,CAAgBjE,IAAK,UACtD,kBAAC0E,EAAA,EAAD,CAAKnC,EAAG,EAAG5C,MAAO,CAAEC,QAAS,iBACzB,kBAACiL,EAAA,EAAD,CAAMrL,UAAW+E,EAAQ/D,KAAMR,IAAK,uBAChC,kBAAC8K,EAAA,EAAD,KACI,kBAAC5F,EAAA,EAAD,CAAYC,QAAQ,KAAKH,UAAU,MAAnC,wBAMA,kBAAC0F,EAAA,EAAD,MACA,kBAAChG,EAAA,EAAD,CAAKC,GAAI,GACL,kBAACmE,GAAA,EAAD,CAAMqB,WAAS,EAAC3K,UAAW+E,EAAQ/D,KAAM4J,QAAS,GAC7CpY,OAAOD,KAAK4a,GAAiBtb,KAAI,SAAA8b,GAAI,OAClC,kBAACrE,GAAA,EAAD,CAAMlQ,MAAI,EAACyR,GAAI,GAAIrK,IAAKmN,GACpB,kBAACrE,GAAA,EAAD,CAAMqB,WAAS,EAACG,QAAQ,aAAaF,QAAS,GAO1C,kBAACM,EAAA,EAAD,MAECiC,EAAgBQ,GAAMtK,MAAM,EAAG,GAAGxR,KAAI,SAAA+b,GACnC,OAAO,oCACH,kBAACtE,GAAA,EAAD,CAAM9I,IAAKoN,EAAYlS,cAAetC,MAAI,GACtC,kBAAC8L,EAAA,EAAD,CAAK2I,aAAc,EAAGvI,UAAW,EAAG2F,EAAG,EAAG9K,MAAO,CAAE2N,YAAa,6BAG5D,kBAACpI,EAAA,EAAD,CAAYvF,MAAO,CAAEC,QAAS,SAAW3M,MAAM,UAAUkS,QAAQ,YAC5D,kBAAoBiI,EAAYlS,eAErC,kBAACgK,EAAA,EAAD,CAAYvF,MAAO,CAAEC,QAAS,SAAW3M,MAAM,UAAUkS,QAAQ,YAC5D,mBAAqBM,KAAK+D,MAAoC,IAA9B4D,EAAYG,iBAAyB,UAAOtZ,IArYrI,SAAkBuZ,GAA+C,IAApCnL,EAAmC,uDAA5B,CAAE3D,MAAO,IAAKC,OAAQ,IAElDD,EAAQ2D,EAAK3D,MACbC,EAAS0D,EAAK1D,OAEdsE,EAAStB,MAAiBE,OAAO,CAAC,EAAGmB,GAAQ,KAAKpB,MAAM,CAAC,EAAGlD,EAAQ,KACpEwE,EAASvB,MAAiBE,OAAOiB,IAASlB,MAAM,CAACjD,EAAQ,IAGzD7E,EAAU,CAAC,YAIX2P,EAAa,EACbgE,EAAe,EACfC,EAAY,GACZC,EAAc,GACdvH,EAAY,GACZwH,EAAaxH,EACbyH,EAAa3K,EAAOtB,QAAQ,GAAK8L,EAAY,EAM7C1V,EAAS,CAAC,mBAAoB,mBAAoB,mBAAoB,mBAAoB,mBAAoB,oBAG9G8V,EAAanM,IAAgB3J,GAAQ6J,OAAOwK,IAE5CpZ,EAAQ,SAAUkR,GAClB,MAAqB,QAAbA,EAAEsI,QAAoB,wBAAuC,eAAbtI,EAAEsI,QAA2B,QAAUqB,EAAW3J,EAAE4I,WAO5GgB,EAAUtI,KAAKqG,IAAL,MAAArG,KAAI,YAAQ+H,EAAUnc,KAAI,SAAA8S,GAAC,OAAIA,EAAEpJ,YAAcoJ,EAAE6J,cAC3DC,EAAST,EAAUhU,QAAO,SAAA2K,GAAC,OAAe,GAAXA,EAAE0I,SAEjCqB,EAAeV,EAAUhU,QAAO,SAAA2K,GAAC,MAAiB,QAAbA,EAAEsI,SAAqBtI,EAAEnQ,QAAUmQ,EAAEnQ,UAAQ2O,MAAK,SAACtQ,EAAGuQ,GAAJ,OAAUvQ,EAAE0I,YAAc6H,EAAE7H,YAAc,GAAM,KAGvI8D,EAAI,EACJsP,EAAW,GAEX/O,EAAQ8O,EAAa7c,KAAI,SAAA8S,GACzB,IAAIiK,EAAanL,EAAOkB,EAAEpJ,aACtBsT,EAAcpL,EAAOkB,EAAEpJ,aAAe6S,EAAa,EACnDf,EAAQsB,EAAS7L,MAAK,SAAAmI,GAAC,OAAIA,EAAE7L,EAAIwP,KACjCE,EAAI,GAaR,OAZAA,EAAC,KAAWnK,EACP0I,GAKDyB,EAAC,EAAQzB,EAAMhO,GACfsP,EAAWA,EAAS3U,QAAO,SAAAiR,GAAC,OAAIA,EAAE5L,IAAMgO,EAAMhO,MACrC6M,KAAK,CAAE7M,EAAGgO,EAAMhO,EAAGD,EAAGyP,EAAalb,MAAOgR,EAAEoK,YACrDJ,EAASxL,MAAK,SAACtQ,EAAGuQ,GAAJ,OAAUvQ,EAAEwM,EAAI+D,EAAE/D,GAAK,EAAI,OAPzCA,GAAQ,EACRsP,EAASzC,KAAK,CAAE7M,IAAGD,EAAGyP,EAAalb,MAAOgR,EAAEoK,YAC5CD,EAAC,EAAQzP,GAObyP,EAAC,WAAiBV,EACXU,KAGPE,EAAkB,GAClBC,EAAc,GACdC,EAAiB,GAEjBC,EAAa,CAAC,UAAW,WACzBC,EAAc,CAACnF,EAAYkE,EAAclE,GACzCoF,EAAiB,CAACpF,EAAYrD,EAAU,EAAEqD,GAG1CqF,EAAW,SAAS9a,EAAOoN,EAAUe,GACrC,IAAI4M,EAAWjb,EAAK6X,MAAMrJ,MAAK,SAAA0M,GAAE,OAAIA,EAAGhb,QAAUA,KAC9Cib,EAAM,GACV,GAAIF,EAAU,CACV,IAAIzL,EAAQyL,EAASlV,WAAWuH,EAAU8N,QAAQ5L,MAAMhB,MAAK,SAAA2J,GAAC,OAAIA,EAAE9J,QAAUA,KAC1EmB,IACA2L,EAAG,QAAc3L,EAAMsF,GAAG,GAC9BqG,EAAG,WAAiB3L,EAAMsF,GAAG,GAC7BqG,EAAG,WAAiB3L,EAAMsF,GAAG,GAC7BqG,EAAG,IAAS3L,EAAMyI,IAClBkD,EAAG,IAAU3L,EAAMwI,KAKvB,OAAOmD,GA8BX,OA1BA7P,EAAM/N,KAAI,SAAAid,GACNA,EAAExa,KAAKwP,MAAM,GACbxJ,EAAQzI,KAAI,SAAA8Q,GACRmM,EAAExa,KAAKwP,MAAMnB,GAAU2M,EAASR,EAAExa,KAAKE,OAAOsa,EAAExa,KAAKsN,UAAUe,MAEnEmM,EAAExa,KAAKwP,MAAP,KAAuBwL,EAASR,EAAExa,KAAKE,OAAOsa,EAAExa,KAAKsN,UAAU,WAGnEtH,EAAQzI,KAAI,SAAA8Q,GAERqM,EAAkBrM,GAAUR,MAAiBC,MAAM+M,GAAY9M,OAAO/N,EAAKgG,QAAQqI,IACnFsM,EAActM,GAAUR,MAAiBC,MAAMgN,GAAa/M,OAAO/N,EAAKgG,QAAQqI,OAGpFrO,EAAKoG,SAAS7I,KAAI,SAAAuZ,GACd9W,EAAK+F,WAAWxI,KAAI,SAAA+P,GAChB,IAAIkC,EAAQwL,EAASlE,EAAMxJ,EAAW,QAEtCsN,EAAe9D,GAAQjJ,MAAiBC,MAAMiN,GAAgBhN,OAAO,CAACyB,EAAK,IAASA,EAAK,YAS7F,yBAAK5E,MAAOA,EAAOC,OAAQ,KAGvB,uBAAGgB,MAAO,CAAE,UAAa,0BAEpB6N,EAAUnc,KAAI,SAAC8S,EAAGhH,GACf,IAAIgS,EAAalM,EAAOkB,EAAE6J,UAAY,EAAK/K,EAAOkB,EAAE6J,UAAYvE,EAAaxG,EAAOkB,EAAE6J,UAiBtF,OAfmB,kBAAC,IAAM/J,SAAP,CAAgBjE,IAAKmE,EAAEjJ,cAAgB,IAAMuK,KAAKiH,UAEjE,0BAAMlN,UAAU,QAAQQ,IAAK,KAAOmE,EAAEsI,QAAU,IAAMtI,EAAEpJ,YAAaqU,YAAa,kBAAMpG,EAAQ7E,IAAIkL,WAAY,kBAAMpG,OAAWhV,IAAY0L,MAAO,CAAEZ,KAAM9L,EAAMkR,GAAInF,QAAuB,QAAbmF,EAAEsI,QAAoB,GAAK,IACvM7N,EAAGqE,EAAOkB,EAAEpJ,aAAe0O,EAC3B5K,EAAGqE,EAAOiB,EAAE0I,OACZnO,MAAOyQ,EACPxQ,OAAqB,QAAbwF,EAAEsI,QAAoBiB,EAAYA,EAAY,QAcjEtO,EAAM/N,KAAI,SAAAid,GAAC,OAAI,0BAAM7K,GAAIR,EAAOqL,EAAExa,KAAKiH,aAAe0O,EAAY/F,GAAIR,EAAOoL,EAAExa,KAAK+Y,OAAS,GAAIlJ,GAAIV,EAAOqL,EAAExa,KAAKiH,aAAe0O,EAAY7F,GAAIV,EAAOoL,EAAEzP,GAAG8O,EAAahO,MAAO,CAAEkE,OAAQ,mBAAoBC,YAAa,aAE7N1E,EAAM/N,KAAI,SAAAid,GACP,IAEIgB,EAAYZ,EAAeJ,EAAExa,KAAKE,QAElCb,EAAQ,uBAAGwM,MAAO,CAAE,UAAa,cAAgBsD,EAAOqL,EAAExa,KAAKiH,aAAa0O,GAAc,OAAUvG,EAAOoL,EAAEzP,GAAM,QACvH,0BAAMW,UAAU,QAAQQ,IAAK,cAAgBsO,EAAExa,KAAK2Y,QAAS9M,MAAO,CAAEZ,KAAM,oBACpEH,EAAG,EACHC,EAAG,EACHH,MAAOkP,EACPjP,OAAQgP,IAEZ,0BAAMlK,GAAI,EAAGC,GAAIiK,EAAahK,GAAI2K,EAAEV,WAAYhK,GAAI+J,EAAahO,MAAO,CAAEkE,OAAQ,mBAAoBC,YAAa,UAEnH,0BACInE,MAAO,CAAE0B,SAAU,QAASkF,WAAW,OAAQrC,WAAY,QAASnF,KAAM,gBAAiByH,kBAAmB,WAC9G5H,EAAc,EAAX6K,EACH5K,EAAG4K,GACF,IACA6E,EAAExa,KAAKya,UAAW,MAI3B,GAAIvc,OAAOD,KAAKuc,EAAExa,KAAKwP,OAAO6C,SAAS,QAAS,CAC1BjD,EAAOoL,EAAEzP,GACZ4G,KAAKqG,IAAI7I,EAAOqL,EAAExa,KAAKka,UAAYvE,EAAYxG,EAAOqL,EAAExa,KAAKsV,aAD5E,IAGImG,EAAMjB,EAAExa,KAAKwP,MAAP,KAAqB4F,QAC3BsG,EAASD,EAAMjB,EAAExa,KAAKka,SACtByB,EAAUhK,KAAKsG,IAAIwD,EAAIjB,EAAExa,KAAKka,UAC9B0B,EAAOjK,KAAKkK,IAAIJ,EAAMjB,EAAExa,KAAKka,UAMxB,uBAAGrO,MAAO,CAAE,UAAa,cAAgBsD,EAAOqL,EAAExa,KAAKiH,cAAgB6S,EAAaxH,GAAaqD,GAAc,OAAUvG,EAAOoL,EAAEzP,GAAM,QAE7I,0BAAM4E,GAAI6L,EAAU1N,QAAQ,GAAI8B,GAAIiK,EAAY,EAAEiC,EAAcjM,GAAI2L,EAAU1N,QAAQ,GAAIgC,GAAI+J,EAAY,EAAEiC,EAAcjQ,MAAO,CAAEkE,OAAQ,mBAAoBC,YAAa,UAa5K,0BAAMlF,EAAG0Q,EAAUG,GAAU5Q,EAnBf,EAmB+BH,MAAO+G,KAAKkK,IAAIL,EAAUC,GAAOD,EAAUhB,EAAExa,KAAKka,WAAYrP,OAAQgP,EAAc,EAAiBhO,MAAO,CAAEZ,KAAMyQ,EAAS,UAAY,kBAAmBxQ,QAAS,QAElN,0BAAMJ,EAAG0Q,EAAUG,GAAU5Q,EAAG8O,EAAY,EAAGjP,MAAO4Q,EAAUI,GAAO/Q,OAnB1D,EAmB8EgB,MAAO,CAAEZ,KAAMyQ,EAAS,UAAY,kBAAmBxQ,QAAS,QAI3J,0BAAMJ,EAAG,EAAGC,EAAG,EAAGH,MAxBN,EAwByBC,OAxBzB,EAwB6CgB,MAAO,CAAEZ,KAAM,QAASC,QAAS,IAAKE,UAAW,aAAeoQ,EAAUC,GAAO,OAAU5B,EAAY,EAAIkC,GAAe,uBAEnL,0BAAMjR,EAAG,EAAGC,EAAG,EAAGH,MA1BN,EA0ByBC,OA1BzB,EA0B6CgB,MAAO,CAAEZ,KAAM,MAAOC,QAAS,IAAKE,UAAW,aAAeoQ,EAAUhB,EAAExa,KAAKka,UAAY,OAAUL,EAAY,EAAIkC,GAAe,wBAiBrM,OAAO,6CA3EK3H,EA2EL,IAAiB/U,EAAjB,UAKViM,EAAM/N,KAAI,SAAAid,GAEU,aACZxU,EAAQzI,KAAI,SAACkR,EAAGpF,GAEb,IAAIoS,EAAMjB,EAAExa,KAAKwP,MAAMf,GAAG2G,QACtB7P,EAAQiV,EAAExa,KAAKyO,GACfuN,EAAYrB,EAAclM,GAC1BuL,EAAaU,EAAkBjM,GAE/Bb,EAAW+D,KAAKqG,IAAIyD,EAAKlW,GAClBoM,KAAKkK,IAAIJ,EAAMlW,GAG1B,OAAO,uBAAGsG,MAAO,CAAE,UAAa,cAAgBsD,EAAOqL,EAAExa,KAAKiH,aAAeqL,EAAYqD,EAAatM,GAAKsQ,EAAehE,IAAe,OAASvG,EAAOoL,EAAEzP,GAAK,QAO5J,0BAAMW,UAAU,QAAQQ,IAAK,KAAOsO,EAAExa,KAAK2Y,QAAUhH,KAAKiH,SAAU/M,MAAO,CAAEZ,KAAM,QAASC,QAAS,GACjGJ,EAAG,EACHC,EAAG8O,EAAcmC,EAAUP,GAC3B7Q,MAAyB,QAAlB4P,EAAExa,KAAK2Y,QAAoBgB,EAAe,EACjD9O,OAAQ,IASZ,0BAAMa,UAAU,QAAQQ,IAAK,KAAOsO,EAAExa,KAAK2Y,QAAUhH,KAAKiH,SAAU/M,MAAO,CAAEZ,KAAM+O,EAAWzU,GAAQ2F,QAAS,IAC3GJ,EAAG,EACHC,EAAG8O,EAAcmC,EAAUpO,GAC3BhD,MAAyB,QAAlB4P,EAAExa,KAAK2Y,QAAoBgB,EAAe,EACjD9O,OAAQ8G,KAAKkK,IAAIG,EAAUP,GAAOO,EAAUzW,UAS5D,OAAO,wCAKV4U,EAAO5c,KAAI,SAAAoZ,GAAC,OACT,0BACI9K,MAAO,CAAE0B,SAAU,MAAO6C,WAAY,QAASnF,KAAM,iBACrDH,EAAGqE,EAAOwH,EAAE1P,aACZ8D,EAAGgP,EAAa,GACf,IACApD,EAAEtX,MAAO,QAGlB,0BACIwM,MAAO,CAAE0B,SAAU,MAAO6C,WAAY,QAASnF,KAAM,iBACrDH,EAAGqE,EAAO8K,GAAW,EACrBlP,EAAGgP,EAAa,GACf,IACApI,KAAK+D,MAAMuE,GAAW,OAAQ,OAiGEnQ,CAASwP,EAAYZ,MAAO,CAAE9N,MAAO,KAAMC,OAAQ,sBC/b5G,IAAM+B,GAAYC,YAAW,CAC3BH,KAAM,CACJI,SAAU,IACVC,SAAU,GAEZS,OAAQ,CACN1B,QAAS,eACT2B,OAAQ,QACRrC,UAAW,cAEbhB,MAAO,CACLmD,SAAU,IAEZG,IAAK,CACHC,aAAc,MAWH,SAASsO,KAEtB,IAAMxL,EAAU7D,KAGR5M,GAFsByQ,EAAQjD,OAErB5D,qBACfrF,IADMvE,MAKS6N,MAGdE,OAAO,CAAC,EAAG,MACXD,MAAM,CAAC,GAAK,IAKf,YAAgB3N,GAFJH,EAGV,qCAEE,oCAEGA,EAAK6X,MAAMta,KAAI,SAAAuZ,GACd,IAAIoF,EAAc,kBAAC9K,EAAA,EAAD,KAAa0F,EAAKI,QACpC,OACE,kBAACtG,EAAA,EAAD,CACEnC,EAAG,EACHvC,IAAK,OAAS4K,EAAK5W,OACnB2L,MAAO,CAAEC,QAAS,iBAElB,kBAACiL,EAAA,EAAD,CAAMrL,UAAW+E,EAAQ/D,KAAMR,IAAK4K,EAAK5W,QACvC,kBAAC8W,EAAA,EAAD,KACE,kBAAC5F,EAAA,EAAD,CAAYC,QAAQ,KAAKH,UAAU,MAChC4F,EAAK1X,MAER,kBAAC4K,EAAA,EAAD,CAASI,MAAO8R,GACd,kBAAC9K,EAAA,EAAD,CAAY1F,UAAW+E,EAAQ/C,IAAKvO,MAAM,iBACvC2X,EAAKI,OAAOnI,MAAM,EAAG,MAG1B,kBAAC6H,EAAA,EAAD,MAEC1Y,OAAOD,KAAK6Y,EAAK/Q,YAAYxI,KAAI,SAAA2O,GAChC,IAAIoB,EAAYwJ,EAAK/Q,WAAWmG,GAC5B6J,EAAczI,EAAU4I,SAAS,GAAGC,KAGpCgG,EAAkB7O,EAAUkC,MAS5BL,GAPY,YACX,IAAIiH,IAAI+F,EAAgB5e,KAAI,SAACkR,GAAD,OAAOA,EAAEJ,YAM7BR,MAAiBE,OAAO,CAAC,EAAG,IAAID,MAAM,CAAC,EAAGsO,MACnDhN,EAASvB,MAAiBE,OAAO,CAAC,EAAG,IAAID,MAAM,CAAC,EAAG,KACnDkM,EAAanM,IAAgBA,KAAoBE,OAAO/N,EAAKqc,SA8CjE,OACE,kBAAC,IAAMlM,SAAP,CAAgBjE,IAAK,YAAcA,GACjC,kBAACkF,EAAA,EAAD,CAAYC,QAAQ,YAAYnF,GAEhC,kBAAC8I,GAAA,EAAD,CAAMqB,WAAS,EAAC3K,UAAW+E,EAAQ/D,KAAM4J,QAAS,GAChD,kBAACtB,GAAA,EAAD,CAAMlQ,MAAI,EAACyR,GAAI,IACb,kBAACvB,GAAA,EAAD,CAAMqB,WAAS,EAACG,QAAQ,aAAaF,QAAS,GAC5C,kBAACtB,GAAA,EAAD,CAAM9I,IAAK,OAAQpH,MAAI,GACrB,oCAAG,CAAC,EAAG,EAAG,GAAGvH,KAAI,SAAA8L,GACf,IAAIiT,EAAkBvG,EAAY1M,GAAGiK,IAAI/V,KAAI,SAAAgB,GAAC,MAAK,CAAEqK,MAAOrK,EAAGb,GAAIa,EAAG8L,MAAO0L,EAAY1M,GAAGgB,MAAOc,MAAO6O,EAAWjE,EAAY1M,GAAGgB,WAEhIkS,EAAe,GACfC,EAAQ,EACRnC,EAAW,GACXtP,EAAI,GACJO,EAAQgR,EAAgB/e,KAAI,SAAC8S,EAAGhH,GAElC,IAII0P,EAJAuB,EAAanL,EAAO9F,GACpBkR,EApEC,EAoEalK,EAAEzH,MAAMQ,OAA0B,GAChDoR,EAAI,GAsCR,OArCAA,EAAC,KAAWnK,GAGT0I,EADC1P,EAAE,GAAK,EACAkT,EAAa/N,MAAK,SAAAmI,GAAC,OAAIA,EAAE7L,EAAIwP,KAE9BD,EAAS7L,MAAK,SAAAmI,GAAC,OAAIA,EAAE7L,EAAIwP,OAiB/BE,EAAC,EAAQzB,EAAMhO,GACfsP,EAAWA,EAAS3U,QAAO,SAAAiR,GAAC,OAAIA,EAAE5L,IAAMgO,EAAMhO,MACrC6M,KAAK,CAAE7M,EAAGgO,EAAMhO,EAAGD,EAAGyP,EAAalb,MAAOgR,EAAEoK,YACrDJ,EAASxL,MAAK,SAACtQ,EAAGuQ,GAAJ,OAAUvQ,EAAEwM,EAAI+D,EAAE/D,GAAK,EAAI,MAhBvC1B,EAAE,GAAK,GACTmT,GAAgB,EAChBD,EAAa3E,KAAK,CAAE7M,EAAEyR,EAAO1R,EAAGyP,EAAalb,MAAOgR,EAAEoK,YACtDD,EAAC,EAAQgC,IAETzR,GAAQ,EACRsP,EAASzC,KAAK,CAAE7M,IAAGD,EAAGyP,EAAalb,MAAOgR,EAAEoK,YAC5CD,EAAC,EAAQzP,GAmBbyP,EAAC,EAAQF,EACTE,EAAC,YAAkBD,EACZC,KAGT,OAAO,kBAAC5J,EAAA,EAAD,CAAKC,GAAI,MAAOC,GAAI,OAxGrB,SAAUxF,GAC5B,IAAI8I,EAAa9I,EAAM/N,KAAI,SAACid,GAC1B,OAAO,oCAEL,0BAAM7K,GAAI6K,EAAE1P,EAAIsR,KAAexM,GAAIR,EAAOoL,EAAEzP,GAAI8E,GAAI2K,EAAE1P,EAAIsR,KAAetM,GAAIV,EAAO,GAX1E,GAW0FvD,MAAO,CAAEkE,OAAQ,mBAAoBC,YAAa,QAAS,cAAgB,WAC/K,0BAAML,GAAI6K,EAAE1P,EAAIsR,KAAexM,GAAIR,EAAOoL,EAAEzP,GAAI8E,GAAI2K,EAAE1P,EAAIsR,KAAgB,EAAGtM,GAAIV,EAAOoL,EAAEzP,GAAIc,MAAO,CAAEkE,OAAQ,mBAAoBC,YAAa,WAChJ,0BAAMtE,UAAU,QAAQQ,IAAK,cAAgBsO,EAAE5R,MAAOiD,MAAO,CAAEZ,KAAM+O,EAAWQ,EAAExa,KAAK4I,OAAQmH,OAAQ,QAASC,YAAa,MAAO,GAAM,GACxIlF,EAAG0P,EAAE1P,EACLC,EAAGqE,EAAO,GACVxE,MAhBQ,GAiBRC,OAjBQ,SAsBV4R,EAASnR,EAAM/N,KAAI,SAACid,GACtB,OAAO,oCACL,0BAAM9O,UAAU,QAAQQ,IAAK,cAAgBsO,EAAE5R,MAAOiD,MAAO,CAAEZ,KAAM,QAAS8E,OAAQ,QAASC,YAAa,OAC1GlF,EAAG0P,EAAE1P,EAAIsR,KAAc,EACvBrR,EAAGqE,EAAOoL,EAAEzP,GAAG,EACfH,MAAO4P,EAAED,YACT1P,OA1BS,IA4BX,0BACEgB,MAAO,CAAE0B,SAAU,QAAS6C,WAAY,QAASnF,KAAM,iBACvDH,EAAG0P,EAAE1P,EAAIsR,KAAgB,EACzBrR,EAAGqE,EAAOoL,EAAEzP,GAAK2R,GAChB,IACAlC,EAAExa,KAAK4I,MAAO,SAMrB,OAAO,yBAAKgC,MAAO,IAAKC,OAAQuE,EAAOuC,KAAKqG,IAAL,MAAArG,KAAI,YAAQrG,EAAM/N,KAAI,SAAAid,GAAC,OAAIA,EAAEzP,QAAO,IACzE,uBAAGc,MAAO,CAAE,UAAa,0BAEtBuI,EAFH,IAEgBqI,IAoEHE,CAAcrR,YAS3B,kBAACsL,EAAA,EAAD,UAIN,+BAEF,kBAACQ,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQ9I,KAAK,SAAb,kB,sjBChNlB,IAAMqO,GAAOC,IAAOC,IAAV,MAUM,SAAC7O,GAAD,OAAYA,EAAM8O,WAAa,cAAgB,gBAGjDF,YAAOD,GAAPC,CAAH,MAsBX,IAAMG,GAA4B,SAAC/O,GAAU,IAMzCpI,EAMEoI,EANFpI,qBACAkD,EAKEkF,EALFlF,4BACAkU,EAIEhP,EAJFgP,UACAC,EAGEjP,EAHFiP,qBACAC,EAEElP,EAFFkP,sBACAC,EACEnP,EADFmP,cAEIC,EAAUC,iBAAO,MAqGvB,SAASC,EAAgCzY,GAEvC,IAAMkH,EAAQnG,EAAqB2X,WACjC,SAAC1e,GAAD,OAAYA,EAAOpB,KAAOoH,EAAKpH,MAE7B+f,EAAI,YAAO5X,GACf4X,EAAKzR,GAASlH,EACdiE,EAA4B0U,GAI9B,IAAIC,EAAa,GAcjB,OAbA7X,EAAqBhB,SAAQ,SAAC/F,GAC5B4e,EAAW5e,EAAOpB,IAAMoB,KAaxB,kBAAC,KAAD,CAAiB6e,UAlHnB,SAAmBjb,GAAS,IAOtBkb,EAAcC,EANVC,EAAwBpb,EAAxBob,OAAQC,EAAgBrb,EAAhBqb,YAGhB,GAAKA,EAIL,OAAQD,EAAOE,aACb,KAAKD,EAAYC,YACfH,EAAc,eAAQH,GAEtBE,EAAe3e,KAAKC,MAClBD,KAAKW,UAAUie,EAAeE,EAAYC,eAS5CT,EAPAK,EAAe1f,OAAO8G,OAAO4Y,EAAc,CACzC7e,SAAUkf,GACRP,EAAWI,EAAOE,aAAajf,SAC/B+e,EAAO9R,MACP+R,EAAY/R,UAKhB6R,EAAeE,EAAYC,aAAeJ,EAG1C,MACF,IAAK,QAiBH,GAhBAC,EAAc,eAAQH,GAEtBE,EAAe3e,KAAKC,MAClBD,KAAKW,UAAUie,EAAeE,EAAYC,eAE5CJ,EAAe1f,OAAO8G,OAAO4Y,EAAc,CACzC7e,SAAU0e,GACR5X,EACA6X,EAAWK,EAAYC,aAAajf,SACpC+e,EACAC,KAGJF,EAAeE,EAAYC,aAAeJ,EApFlD,SAAgCM,GAC9B,IAAMC,EAAsB,GACxBC,GAAiB,EAYrB,OAXAlgB,OAAO0Q,QAAQsP,GAAe3gB,KAAI,YAAmB,IAAD,mBAAXgI,GAAW,WAC/B,UAAfA,EAAM9F,MACR8F,EAAMxG,SAAS8F,SAAQ,SAACwZ,GAClBF,EAAoBE,EAAQ3gB,IAC9B0gB,GAAiB,EAGnBD,EAAoBE,EAAQ3gB,KAAM,QAIjC0gB,EAyEGE,CAAuBT,GAEzB,YADAzd,QAAQmC,MAAM,uCAGhBgb,EAAgCK,GAEhC,MACF,QAEEC,EAAc,eAAQH,GAEtB,IAAIa,EAAetf,KAAKC,MACtBD,KAAKW,UAAUie,EAAeC,EAAOE,eAEnCQ,EAAoBvf,KAAKC,MAC3BD,KAAKW,UAAUie,EAAeE,EAAYC,eAGtCS,EAAeC,GACnBhB,EAAWI,EAAOE,aAAajf,SAC/B2e,EAAWK,EAAYC,aAAajf,SACpC+e,EACAC,GAGFQ,EAAergB,OAAO8G,OAAOuZ,EAAc,CACzCxf,SAAU0f,EAAaX,EAAOE,eAEhCQ,EAAoBtgB,OAAO8G,OAAOwZ,EAAmB,CACnDzf,SAAU0f,EAAaV,EAAYC,eAErCT,EAAgCgB,GAChChB,EAAgCiB,GAEhCX,EAAeC,EAAOE,aAAeO,EACrCV,EAAeE,EAAYC,aAAeQ,KAmC5C,kBAAC,GAAD,iBACMvQ,EADN,CAEEoP,QAASA,KACVA,EAAQsB,SAAWxB,GAClB,kBAAC,GAAD,CACEC,cAAeA,EACfxX,yBAA0BC,EAC1B+Y,6BArIR,SAAsC9Z,GACpC,IAAM2Y,EAAI,YAAO5X,GACjB4X,EAAK7F,KAAK9S,GACViE,EAA4B0U,IAmItBoB,UAAWxB,EAAQsB,QACnBG,MAAO7B,EACPC,qBAAsBA,MAczB,IAAM6B,GAAe,SAAC9Q,GAAW,IAAD,EACqBlM,mBAAS,MAD9B,mBAC9Bid,EAD8B,KACPC,EADO,OAEqBld,oBAAS,GAF9B,mBAE9Bob,EAF8B,KAEP+B,EAFO,OAG6BtV,qBAChErF,IADMqB,EAH6B,EAG7BA,yBAA0BmD,EAHG,EAGHA,4BAGlCvG,qBAAU,WACR2c,EAAmCvZ,KAClC,CAACA,IARiC,MAYjC7D,mBAAS6D,GAZwB,mBAUnCwZ,EAVmC,KAWnCD,EAXmC,KAc/B/B,EAAgBiC,mBAAQ,WAS5B,OAhCJ,SAAsC1a,GACpC,IAAIC,EAAkB,GAMtB,OALAD,EAAKE,SAAQ,SAACC,GACZ,IAAIC,EAAY,GAChBA,EAAUD,EAAKpH,IAAMoH,EACrB5G,OAAO8G,OAAOJ,EAAiBG,MAE1BH,EAiBcF,CACjB0a,KAQD,CAACA,IAyBJ,OACE,6BACInR,EAAMgP,UAiBJ,KAhBFE,EACE,6BACE,kBAAC9F,EAAA,EAAD,CAAQhG,QAAS,UAAWhF,QATtC,WACEtD,EAA4BqW,GAC5BF,GAAyB,KAOjB,iBAGA,kBAAC7H,EAAA,EAAD,CAAQhG,QAAQ,YAAYhF,QAhCtC,WAEE8S,EAAmCvZ,GACnCsZ,GAAyB,KA6BjB,WAKF,kBAAC7H,EAAA,EAAD,CACEhG,QAAS,UACThF,QAAS,kBAAM6S,GAAyB,KAF1C,oBAOJ,kBAAC,GAAD,CACE9B,cAAeA,EACfD,sBAAuBA,EACvBpU,4BAA6BoW,EAC7BtZ,qBAAsBuZ,EACtBlC,qBACEC,EAAwB8B,EAA2B,KAErDhC,UAAWhP,EAAMgP,YAClB+B,GACC,kBAACM,GAAA,EAAD,CACER,OAAQE,EACRO,QAAS,kBAAMN,EAAyB,OACxCpT,MAAO,CACLC,QAAS,OACT0T,WAAY,SACZC,eAAgB,UAElBC,kBAAgB,qBAChBC,mBAAiB,4BACjB,kBAAC,GAAD,CACEC,oBAAqBZ,EACrBa,gCAAiC,kBAC/BZ,EAAyB,OAE3B1B,gCAhEV,SAAuCuC,GACrC,IAAMC,EAAqBX,EAAgC5B,WACzD,SAAC1e,GAAD,OAAYA,EAAOpB,KAAOoiB,EAAiBpiB,MAEzCsiB,EAAU,YAAOZ,GACrBY,EAAWD,GAAsBD,EAOjCX,EAAmCa,GACnCf,EAAyB,YA+FvBgB,GAAiB,SAAC,GAIjB,IAHLL,EAGI,EAHJA,oBACArC,EAEI,EAFJA,gCACAsC,EACI,EADJA,gCACI,EAGsD9d,mBACxD6d,GAJE,mBAGGM,EAHH,KAG0BC,EAH1B,KAOJ,IAAKP,EAAoBliB,GAEvB,OAAO,8BAET,SAAS0iB,EAAkClU,EAAKmU,GAE9C,IAAIC,EAAsBrhB,KAAKC,MAAMD,KAAKW,UAAUsgB,IAChDJ,EAAmB,GACvBA,EAAiB5T,GAAOmU,EAExBC,EAAsBpiB,OAAO8G,OAAOsb,EAAqBR,GACzDK,EAAyBG,GAG3B,OACE,yBACEzU,MAAO,CACLjB,MAAO,QACPC,OAAQ,QACRiB,QAAS,OACTC,cAAe,SACfoB,gBAAiB,UAEnB,yBAAKtB,MAAO,CAAE0U,MAAO,EAAG9S,OAAQ,SAC9B,kBAAC+S,GAAA,EAAD,CACEjb,MAAO2a,EAAqB,GAC5BO,SAAU,SAACJ,GAAD,OACRD,EAAkC,KAAMC,EAASxX,OAAOtD,QAE1Dmb,UAAQ,EACRhjB,GAAG,iBACH2B,MAAO,QAGX,yBAAKwM,MAAO,CAAE0U,MAAO,EAAG9S,OAAQ,SAC9B,kBAAC+S,GAAA,EAAD,CACEjb,MAAO2a,EAAqB,KAC5BO,SAAU,SAACJ,GAAD,OACRD,EAAkC,OAAQC,EAASxX,OAAOtD,QAE5D7H,GAAG,iBACH2B,MAAO,UAGX,yBAAKwM,MAAO,CAAE0U,MAAO,EAAG9S,OAAQ,SAC9B,2BACEkT,IAAK,cACLjV,UACE,wGAHJ,gBAOA,kBAAC,KAAD,CACEtM,KAAM,cACN1B,GAAI,cACJkjB,aAAcV,EAAqB,MACnC3a,MAAO2a,EAAqB,MAC5BO,SAAU,SAACJ,GACTD,EAAkC,QAASC,OAIjD,yBAAKxU,MAAO,CAAE0U,MAAO,EAAG9S,OAAQ,SAC9B,2BACEkT,IAAK,eACLjV,UACE,wGAE8B,QAA/BwU,EAAsBzgB,KACnB,eACA,kBAEN,kBAACohB,GAAA,EAAD,CACEnjB,GAAI,eACJojB,QAASZ,EAAsB1gB,OAC/BihB,SAAU,SAAC7X,GAAD,OACRwX,EACE,UACCF,EAAsB1gB,SAG3BJ,KAAK,WACL2hB,WAAY,CAAE,aAAc,yBAGhC,yBAAKlV,MAAO,CAAE0U,MAAO,KACrB,yBAAK1U,MAAO,CAAE0U,MAAO,EAAG9S,OAAQ,SAC9B,kBAAC4J,EAAA,EAAD,CACElY,MAAM,UACNkN,QAAS,kBACPkR,EAAgC2C,KAHpC,UAOA,kBAAC7I,EAAA,EAAD,CAAQhL,QAASwT,GAAjB,aAKR,SAASmB,KACP,MAAO,uCAAuChiB,QAAQ,SAAS,SAAU2Y,GACvE,IAAI/C,EAAqB,GAAhBjD,KAAKiH,SAAiB,EAE/B,OADW,KAALjB,EAAW/C,EAAS,EAAJA,EAAW,GACxBqM,SAAS,OAItB,IAAMhD,GAAU,SAACtZ,EAAMuc,EAAYC,GACjC,IAAMze,EAAS6P,MAAMC,KAAK7N,GADoB,EAE5BjC,EAAO0e,OAAOF,EAAY,GAArCG,EAFuC,oBAK9C,OAFA3e,EAAO0e,OAAOD,EAAU,EAAGE,GAEpB3e,GAKH+a,GAAO,SAACK,EAAQC,EAAauD,EAAiBC,GAClD,IAAMC,EAAcjP,MAAMC,KAAKsL,GACzB2D,EAAYlP,MAAMC,KAAKuL,GACvBjZ,EAAO0c,EAAYF,EAAgBtV,OAGzC,OADAyV,EAAUL,OAAOG,EAAqBvV,MAAO,EAA7C,2BAAqDlH,GAArD,IAA2D4c,OAAQV,QAC5DS,GAGH/C,GAAO,SAACZ,EAAQC,EAAauD,EAAiBC,GAClD,IAAMC,EAAcjP,MAAMC,KAAKsL,GACzB2D,EAAYlP,MAAMC,KAAKuL,GAF8C,EAGzDyD,EAAYJ,OAAOE,EAAgBtV,MAAO,GAArDqV,EAHoE,oBAK3EI,EAAUL,OAAOG,EAAqBvV,MAAO,EAAGqV,GAEhD,IAAM3e,EAAS,GAIf,OAHAA,EAAO4e,EAAgBtD,aAAewD,EACtC9e,EAAO6e,EAAqBvD,aAAeyD,EAEpC/e,GAEHif,GAAM,SAAC,GAON,IANL7C,EAMI,EANJA,KACA5B,EAKI,EALJA,qBACA2B,EAII,EAJJA,UACAD,EAGI,EAHJA,6BACAhZ,EAEI,EAFJA,yBACAwX,EACI,EADJA,cAGA,OACE,6BAEI,kBAACwE,GAAA,EAAD,CACE9C,KAAMA,EACNphB,GAAI,YACJmkB,SAAUhD,EACViD,UAAW,eACX,yBACEjW,MAAO,CACLsB,gBAAiB,QACjBvC,MAAO,QACPC,OAAQ,OACR8B,QAAS,MACTb,QAAS,OACT2K,SAAU,OACVsL,OAAQ,wBAGR,kBAAC,GAAD,CACE3E,cAAeA,EACfxX,yBAA0BA,EAC1BgZ,6BAA8BA,EAC9BoD,8BACE9E,QASZ+E,GAA6B,SAAC,GAM7B,IALLpc,EAKI,EALJA,qBACAqX,EAII,EAJJA,qBACAD,EAGI,EAHJA,UACAI,EAEI,EAFJA,QACAD,EACI,EADJA,cAEM8E,EAAgB1d,IAAM6a,SAAQ,WAClC,OAAOxZ,EAAqBtI,KAAI,SAACuB,GAAD,OAC9BZ,OAAO8G,OAAOlG,EAAQ,CAAE4iB,OAAQV,YAEjC,CAACnb,IAeJ,OACE,kBAAC,IAAMsK,SAAP,KACE,yBAAKgS,IAAK9E,GACR,kBAAC,KAAD,CAAWW,YAAY,QAAQoE,gBAAgB,IAC5C,SAACC,EAAUC,GAAX,OACC,yBACEH,IAAKE,EAASE,SACdC,eAAgBF,EAASE,gBACxBN,EAAc3kB,KAAI,SAACuH,EAAMkH,GAAP,OACjB,kBAAC,KAAD,CACEyW,eAAgBxF,EAChB/Q,IAAKpH,EAAK4c,OACVgB,YAAa5d,EAAK4c,OAClB1V,MAAOA,IACN,SAACqW,EAAUC,GAAX,OACC,kBAAC,IAAMnS,SAAP,KACE,uCACEgS,IAAKE,EAASE,UACVF,EAASM,eACTN,EAASO,gBAHf,CAIE7F,WAAYuF,EAASvF,WACrBlR,MAAOwW,EAASM,eAAe9W,QAE7B,kBAAC,GAAD,CACEuR,cAAeA,EACfH,UAAWA,EACXC,qBAAsBA,EACtB0C,oBAAqB9a,KAG1Bwd,EAASvF,YACR,6BACE,kBAAC,GAAD,CACEE,UAAWA,EACXG,cAAeA,EACfF,qBAAsBA,EACtB0C,oBAAqB9a,YAOlCud,EAASQ,mBASXC,GAAiB,SAAC,GAKxB,IAJLlD,EAII,EAJJA,oBACA1C,EAGI,EAHJA,qBACAD,EAEI,EAFJA,UACAG,EACI,EADJA,cAGA,OACE,kBAAC2F,GAAA,EAAD,KACE,kBAAC,GAAD,CACEnc,KAAM,CAAExH,KAAMwgB,EAAoBliB,IAClCiM,YAAayT,KACbH,GACA,kBAAC,IAAM9M,SAAP,KACE,kBAAC6S,GAAA,EAAD,CACEnX,MAAO,CACLoX,SAAU,QACVxM,SAAU,SACVyM,aAAc,aAEftD,EAAoBxgB,MAEtB8d,GACC,kBAAC,KAAD,CACErR,MAAO,CAAEqB,OAAQ,UAAW,cAAe,QAC3Cb,QAAS,kBACP6Q,EAAqB0C,S,ogEC3oBrC,IAqCeuD,GArCM,SAAC,GAKf,IAJLvE,EAII,EAJJA,6BACAoD,EAGI,EAHJA,8BACApc,EAEI,EAFJA,yBACAwX,EACI,EADJA,cAIA,OACE,yBAAKvR,MAAO,CAAEC,QAAS,SACpB,CAAC,WAAY,SAASvO,KAAI,SAACkC,GAC1BW,QAAQC,MACR,IAGM+iB,EAHexd,EAAyBF,QAC5C,SAAC5G,GAAD,OAAYA,EAAOW,OAASA,KAEQiG,QAAO,SAAC5G,GAE5C,OADAsB,QAAQC,IAAIvB,GACa,IAAlBA,EAAOU,SAAkC,IAAlBV,EAAOU,UAEnCke,EAAa,GAIjB,OAHA0F,EAAiBve,SAAQ,SAAC/F,GACxB4e,EAAW5e,EAAOpB,IAAMoB,KAGxB,kBAAC,GAAD,CACEse,cAAeA,EACfM,WAAYA,EACZ2F,eAAgBzE,EAChB0E,aAAc1d,EACdoc,8BAA+BA,EAC/BviB,KAAMA,SAWZ8jB,GAAU1G,IAAOC,IAAV,MAIPF,GAAOC,IAAOC,IAAV,MAUM,SAAC7O,GAAD,OAAYA,EAAM8O,WAAa,cAAgB,gBAuBzDyG,IApBQ3G,YAAOD,GAAPC,CAAH,MAMIA,IAAOC,IAAV,MAcCD,IAAOC,IAAV,MAEJ,SAAC7O,GAAD,OAAYA,EAAMuU,eAAiB,cAAgB,iBAgBnDiB,IARQ5G,YAAO2G,GAAP3G,CAAH,MAQOA,YAAO2G,GAAP3G,CAAH,OAIT6G,GAAS7G,IAAOC,IAAV,MAYNzF,GAASwF,IAAO8G,OAAV,MAeNC,GAAa/G,IAAOC,IAAV,MAUT,IAAM+G,GAAc,SAAC,GAOrB,IANLP,EAMI,EANJA,aACA7jB,EAKI,EALJA,KACA4jB,EAII,EAJJA,eACArB,EAGI,EAHJA,8BACAtE,EAEI,EAFJA,WACAN,EACI,EADJA,cAoCA,OAlCAhd,QAAQC,IAAIijB,GAEZ9gB,qBAAU,WACRpC,QAAQC,IAAI,sCACX,IA6BHD,QAAQC,IAAIqd,GAEV,6BAGE,kBAAC,GAAD,KACE,kBAAC,GAAD,CAAQrR,QAhCd,SAAiBvO,GAEf,IAAIgmB,EAvBC,uCAAuC9kB,QAAQ,SAAS,SAAU2Y,GACvE,IAAI/C,EAAqB,GAAhBjD,KAAKiH,SAAiB,EAE/B,OADW,KAALjB,EAAW/C,EAAS,EAAJA,EAAW,GACxBqM,SAAS,OAsBd8C,EAAa,gBACdD,EAAc,CACbpmB,GAAIomB,EACJ1kB,KAAK,GAAD,OAAKK,EAAL,YAAaqkB,GACjBrkB,KAAMA,EACND,QAAQ,EACRD,KAAM,MACNJ,MAAO,OACPJ,SAAU,KAGdskB,EAAeU,EAAcD,MAkBvB,yBAAKlZ,MAAM,KAAKC,OAAO,KAAKmZ,QAAQ,aAClC,0BACE/Y,KAAK,eACLoF,EAAE,+CAGN,kBAACuT,GAAD,YAAiBnkB,IAMlBvB,OAAOD,KAAKyf,GAAYngB,KAAI,SAACoH,EAAM0E,GAAP,OAC3B,kBAAC,IAAM8G,SAAP,KACE,kBAAC,KAAD,CAAWjE,IAAKvH,EAAMqZ,YAAarZ,IAChC,SAAC0d,EAAUC,GAAX,OACC,kBAACmB,GAAD,CACEtB,IAAKE,EAASE,SACdC,eAAgBF,EAASE,gBACzB,6BACE,kBAAC,GAAD,CACEpF,cAAeA,EACfF,qBAAsB,SAAC+G,GACrB7jB,QAAQC,IAAI,8BAA+B4jB,GAC3CjC,EAA8BiC,IAEhCrE,oBAAqBlC,EAAW/Y,MAEnC+Y,EAAW/Y,GAAM5F,SAASqK,OACvBsU,EAAW/Y,GAAM5F,SAASxB,KAAI,SAACuH,EAAMkH,GAAP,OAC5B,kBAAC,KAAD,CACEE,IAAKpH,EAAK4c,OACVgB,YAAa5d,EAAK4c,OAClB1V,MAAOA,IACN,SAACqW,EAAUC,GACV,IAAI4B,EAAWhmB,OAAO8G,OAAO,GAAIF,GAIjC,OACE,kBAAC,GAAD,eACEqd,IAAKE,EAASE,UACVF,EAASM,eAFf,CAGE5F,WAAYuF,EAASvF,WACrBlR,MAAOwW,EAASM,eAAe9W,QAC/B,wBAASwW,EAASO,gBAEd,kBAAC,GAAD,CACExF,cAAeA,EACfwC,oBACEsE,aASjB7B,EAASQ,aAAe,kBAACa,GAAD,wBAC5BrB,EAASQ,oBAMgB,IAAnC3kB,OAAOD,KAAKyf,GAAYtU,QACvB,oCACM3J,EADN,kCAC2CA,EAD3C,sC,UCrPF0D,GAAWghB,KAAXhhB,OA8COihB,GA5CE,SAAC,GAAiB,EAAfC,SACDza,qBAAWrF,IAApBvE,KAD0B,IAAD,EAGLwE,IAAMzC,SAAS,IAHV,6BAajC,OACE,yBAAK8J,MAAO,CAAEc,QAAS,SACrB,kBAAC,GAAD,CACEkW,YAAY,oBACZyB,YAAa,kBAACC,GAAA,EAAD,MACbhW,KAAK,QAGL1C,MAAO,CAAEjB,MAAO,OAGlB,yBAAKiB,MAAO,CAAE+G,WAAY,SAUtB,kBAAC,GAAD,CACEoP,8BAA+B,SAAC5gB,GAAD,OAC7BhB,QAAQC,IAAIe,SC5CXojB,GAJA,WACb,OAAO,iD,6GCaF,IAuEM/P,GAAY,SAAC,GAOnB,IANLS,EAMI,EANJA,QACAlV,EAKI,EALJA,KACAmP,EAII,EAJJA,OACAsV,EAGI,EAHJA,QACArV,EAEI,EAFJA,OACAvE,EACI,EADJA,OACI,EAEesE,EAAOpB,SAFtB,mBAEGkK,EAFH,KAEQD,EAFR,KAQE0M,EALoB7W,MAEvBE,OAAO,CAACkK,EAAM,KAAOD,EAAM,OAC3B2M,WAAWF,EAAQlnB,KAAI,SAACqnB,GAAD,OAAYA,EAAOjV,MAEzBkV,CAAkB7kB,GAChCoV,EAAUvH,IAAQ7N,GAClB8kB,EACJ,uBAAG1Z,UAAS,oBAAgB,EAAI,EAVjB,GAUH,QACTqZ,EAAQlnB,KAAI,SAACqnB,EAAQ5Y,GACpB,OACE,uBAAGE,IAAKF,GACN,0BACEE,IAAG,aAAQF,GACXlB,EAAGqE,EAAOyV,EAAOG,IAAM,EACvBha,EAAGqE,EAAOwV,EAAOxb,QACjBwB,MAlBK,GAmBLK,KAAM,OACNC,QAAS,GACTL,OAAQA,EAASuE,EAAOwV,EAAOxb,UACjC,0BACE8C,IAAKF,EACLlB,EAAGqE,EAAOyV,EAAOG,IAAM,EACvBha,EAAGqE,EAAOsV,EAAY1Y,GAAO5C,QAC7BwB,MA1BK,GA2BLK,KAAM,QACNJ,OAAQA,EAASuE,EAAOsV,EAAY1Y,GAAO5C,eAOvD,OACE,2BAEI,0BACEwB,MAAOuE,EAAOrB,QAAQ,GAAKqB,EAAOrB,QAAQ,GAC1C7C,KAAM,YACNH,EAAG,EACHC,EAAGF,EAAS,EACZA,OAAQ,IAGXia,EACD,2BACe,OAAZ1P,GACC,2BACE,0BACEtK,EAAGqE,EAAOiG,GACVrK,EAAG,EACHF,OAAQA,EACRD,MAAO,EACPK,KAAM,sBACR,0BACEY,MAAO,CACLZ,KAAM,oBACNsC,SAAU,MACV6C,WAAY,SACZL,OAAQ,OACR,cAAe,SACf,eAAgB,OAElBjF,EAAGqE,EAAOiG,GACVrK,EAAGF,EAAS,IACXuK,EAAQ4P,QAAQ,MAKzB,uBAAGtZ,UAAW,0BACbwJ,GACC,oCACE,0BACErJ,MAAO,CACLZ,KAAM,kBACNsC,SAAU,MACV6C,WAAY,MACZL,OAAQ,OACR,cAAe,SAEf,eAAgB,OAElBjF,EAAG,GACHC,EAAG,IACF,IACA4G,KAAK+D,MAAMvG,EAAOpB,SAAS,IAAK,KAGnC,0BACElC,MAAO,CACLZ,KAAM,kBACNsC,SAAU,MACV6C,WAAY,MACZL,OAAQ,OACR,cAAe,SAEf,eAAgB,OAElBjF,EAAGqE,EAAOrB,QAAQ,GAClB/C,EAAG,IACF,IACA4G,KAAK+D,MAAMvG,EAAOpB,SAAS,IAAK,QAQvC/J,GAAQ,SAACiK,GAAW,IAChBrD,EAA4BqD,EAA5BrD,MAAOC,EAAqBoD,EAArBpD,OAAQ4V,EAAaxS,EAAbwS,SACjBwE,EAAW3H,iBAAO,MAqCxB,OAnCA9a,qBAAU,WACR,IAAMoE,EAAOqe,EAAStG,QAEhBuG,EAAWC,eACdC,OAAO,CACN,CAAC,EAAG,GACJ,CAACxa,EAAOC,KAGTwa,GAAG,OAiBN,WAEOzc,KAAM0c,YACT1c,KAAM0c,UAAY,CAAC,EAAG1a,IAExBxK,QAAQmlB,KAAK,QAAS3c,MACtB6X,EAAS7X,KAAM0c,cArBjBE,aAAO5e,GACJ6e,UAAU,WACVzlB,KAAK,CAAC,IACN0lB,QACAC,OAAO,KACPC,KAAK,QAAS,SAEjBJ,aAAO5e,GAAM4e,OAAO,WAAWK,KAAKX,MAkBpC,yBAAK/C,IAAK8C,EAAUpa,OAAQA,EAAS,GAAID,MAAOA,EAAQ,IACtD,uBAAGQ,UAAW,kBAAmB6C,EAAM/I,YAKvC4gB,GAAqB,SAAC,GAQrB,IAPL9lB,EAOI,EAPJA,KACAmP,EAMI,EANJA,OACAsV,EAKI,EALJA,QACArV,EAII,EAJJA,OACAvE,EAGI,EAHJA,OACAkb,EAEI,EAFJA,WACAC,EACI,EADJA,WAEMpb,EAAQuE,EAAOrB,QAAQ,GADzB,EAE0BtJ,IAAMzC,UAAS,GAFzC,mBAEGmT,EAFH,KAEYC,EAFZ,KAcJ,OACE,yBACEhJ,aAAc,kBAAMgJ,GAAW,IAC/B/I,aAAc,kBAAM+I,GAAW,KAC/B,kBAAC,GAAD,CAAOvK,MAAOA,EAAOC,OAAQA,EAAQ4V,SAdzC,SAAyBwF,GAAS,IAAD,EACR,KAAb,QAAN,EAAAA,SAAA,eAAQ7c,UACV6c,EAAS9W,EAAOpB,UAGlBgY,EAAW5W,EAAO+W,OAAOD,EAAO,KAEhCD,EAAW7W,EAAO+W,OAAOD,EAAO,OAQ5B,kBAAC,GAAD,CACE/Q,QAASA,EACTlV,KAAMA,EACN4K,MAAOA,EACPC,OAAQA,EACRuE,OAAQA,EACRD,OAAQA,EACRsV,QAASA,OAMN0B,GAAqB,SAAC,GAO5B,IANLnmB,EAMI,EANJA,KACAmP,EAKI,EALJA,OACAsV,EAII,EAJJA,QACA5Z,EAGI,EAHJA,OACAuE,EAEI,EAFJA,OAEI,IADJgX,gBACI,MADO,SAAChlB,KACR,IAC0BW,mBAAS8L,IAAO7N,IAD1C,mBACGqmB,EADH,KACYN,EADZ,OAE0BhkB,mBAAS8L,IAAO7N,IAF1C,mBAEGsmB,EAFH,KAEYN,EAFZ,KAGEO,EAAeC,GAAYH,EAAS,KACpCI,EAAeD,GAAYF,EAAS,KAI1C,OAHA9jB,qBAAU,WACR4jB,EAAS,CAAEM,UAAWH,EAAcI,UAAWF,MAC9C,CAACF,EAAcE,IAEhB,kBAAC,GAAD,CACErX,OAAQA,EACRD,OAAQA,EACRsV,QAASA,EACT5Z,OAAQA,EACR7K,KAAMA,EACN+lB,WAAYA,EACZC,WAAYA,KAGlB,SAASQ,GAAYjhB,EAAOqhB,GAAO,MAEW7kB,mBAASwD,GAFpB,mBAE1BshB,EAF0B,KAEVC,EAFU,KAqBjC,OAjBAtkB,qBACE,WAEE,IAAMukB,EAAUjf,YAAW,WACzBgf,EAAkBvhB,KACjBqhB,GAKH,OAAO,WACLI,aAAaD,MAGjB,CAACxhB,EAAOqhB,IAGHC,E,wDC1TMI,I,OAvBI,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,YAAuBzpB,GAAS,EAAnB0pB,SAAmB,EAAT1pB,IAWjD,OADA0C,QAAQC,IAAI,WAAY3C,GAEtB,yBAAKA,GAAIA,GACP,kBAAC,KAAD,CACE2pB,WAAW,EACXH,KAAMA,EACNI,UAAU,EACVC,aAZN,SAAyBle,GACvB,IACMpB,EADUif,EAAKnY,MAAM,GACPqS,OAAO/X,EAAG,GAC9B8d,EAAY,SAAUlf,IAUlBuf,eAjBN,SAAsBvf,GACpBkf,EAAY,MAAOlf,S,mFCKvB,SAASwf,KACP,MAAO,uCAAuCzoB,QAAQ,SAAS,SAAU2Y,GACvE,IAAI/C,EAAqB,GAAhBjD,KAAKiH,SAAiB,EAE/B,OADW,KAALjB,EAAW/C,EAAS,EAAJA,EAAW,GACxBqM,SAAS,OAIN,CACd,gBACA,cACA,oBACA,eACA,gBACA,SACA,WACA,OACA,UACA,YACA,OACA,WACA,6BACA,QACA,yBACA,wBAEyB1jB,KAAI,SAACmqB,GAC9B,MAAO,CAAEhqB,GAAI+pB,KAAUpoB,MAAOqoB,MAoBhC,SAASC,GAAW1Z,GAClB,OACE,yBACEpC,MAAO,CAAEjB,MAAO,OAAQC,OAAQ,OAAQsC,gBAAiB,eACzD,kBAAC,KAAD,CACEya,aArBeC,EAqBY5Z,EAAM4Z,MAAO5Z,EAAMvC,UArBV,SAAC2W,EAAUC,EAAUwF,GAC/D,IAAMhjB,EAAO+iB,EAAMC,EAAOhK,OAAO9R,OACjC,OACE,kBAAC,IAAMmE,SAAP,KACE,yCACMkS,EAASM,eACTN,EAASO,gBAFf,CAGET,IAAKE,EAASE,SACd1W,MAAOwW,EAASM,eAAe9W,MAC/BH,UAAW4W,EAASvF,WAAa,WAAa,KAC9C,kBAAC,GAAD,CAAcnW,KAAM,CAAExH,KAAM0F,EAAKpH,UAYjCsgB,YAAa/P,EAAM+P,YACnBoE,gBAAgB,IACf,SAACC,EAAUC,GAAX,OACC,yBAAKH,IAAKE,EAASE,SAAU7W,UAAWuC,EAAMvC,WAC3CuC,EAAM4Z,MAAMtqB,KAAI,SAACuH,EAAMkH,GACtB,IAAM+b,EACJjjB,EAAKpH,KAAO4kB,EAAS0F,qBACvB,OACE,kBAAC,IAAM7X,SAAP,CAAgBjE,IAAKpH,EAAKpH,IACvBqqB,EACC,yBAAKrc,UAAU,2BACZ,IACD,kBAAC,GAAD,CAAc9E,KAAM,CAAExH,KAAM0F,EAAKpH,OAGnC,kBAAC,KAAD,CAAWglB,YAAa5d,EAAKpH,GAAIsO,MAAOA,IACrC,SAACqW,EAAUC,GACV,OACE,kBAAC,IAAMnS,SAAP,KACE,uCACEgS,IAAKE,EAASE,UACVF,EAASM,eACTN,EAASO,gBAHf,CAIElX,UAAW4W,EAASvF,WAAa,WAAa,KAC9C,kBAAC,GAAD,CACE7Q,IAAG,eAAUpH,EAAKpH,IAClBkJ,KAAM,CAAExH,KAAM0F,EAAKpH,eAWtC2kB,EAASQ,iBA3DA,IAACgF,EAmEvB,SAASI,GAAKha,GAAQ,IAAD,EACazJ,IAAMzC,SAAS,MAD5B,mBACZ8f,EADY,KACFqG,EADE,KAWbpJ,EAAOqJ,QAAQtG,GACfnkB,EAAKohB,EAAO,sBAAmB3e,EAErC,OACE,kBAAC,IAAMgQ,SAAP,KACE,kBAACiY,GAAA,EAAD,CAAYxU,aAAW,kBAAkBvH,QAbzB,SAACzD,GACnBsf,EAAYtf,EAAMyf,iBAad,kBAAC,KAAD,OAGF,kBAACC,GAAA,EAAD,CACE5qB,GAAIA,EACJohB,KAAMA,EACN+C,SAAUA,EACVtC,QAjBc,WAClB2I,EAAY,OAiBRK,aAAc,CACZC,SAAU,SACVC,WAAY,UAEdC,gBAAiB,CACfF,SAAU,MACVC,WAAY,WAEd,yBAAK5c,MAAO,CAAE4K,SAAU,OAAQ7L,MAAO,QAASC,OAAQ,UACtD,kBAAC8c,GAAD,CACE3J,YAAY,OACZtS,UAAWC,KAAOgd,cAClBd,MAAO5Z,EAAM4Z,WAQzB,SAASe,GAAY3a,GACnB,OACE,yBAAKpC,MAAO,CAAEjB,MAAO,OAAQC,OAAQ,SACnC,kBAAC,KAAD,CAAWmT,YAAY,MAAM6K,UAAW,eACrC,SAACxG,EAAUC,GAAX,OACC,yBAAKH,IAAKE,EAASE,SAAU7W,UAAWC,KAAOmd,WAC5C7a,EAAM4Z,MAAMtqB,KAAI,SAACuH,EAAMkH,GAAP,OACf,kBAAC,KAAD,CACEE,IAAKpH,EAAKikB,OACVrG,YAAa5d,EAAKikB,OAClB/c,MAAOA,IACN,SAACqW,EAAUC,GAAX,OACC,uCACEH,IAAKE,EAASE,UACVF,EAASM,eACTN,EAASO,gBAHf,CAIE/W,MAAOwW,EAASM,eAAe9W,QAC/B,kBAAC,GAAD,CAAcjF,KAAM,CAAExH,KAAM0F,EAAKpH,aAKxC2kB,EAASQ,iBAQtB,IAmFMmG,GAAU,SAAC/a,GACf,OACE,kBAAC,KAAD,CAAW+P,YAAa,UAAWoE,gBAAgB,IAChD,SAACC,EAAUC,GAAX,OACC,yBAAKH,IAAKE,EAASE,SAAU7W,UAAWuC,EAAMvC,WAC5C,kBAAC0c,GAAA,EAAD,KACG,IACD,kBAAC,KAAD,YAOGa,GAjFK,SAAC,GAAgC,IAAD,IAA7B7C,gBAA6B,MAAlB,SAAChlB,KAAiB,EAC1CwE,EAA6BgE,qBAAWrF,IAAxCqB,yBAD0C,GAE/ByZ,mBACjB,kBACEzZ,EAAyBrI,KAAI,SAACuB,GAC5B,IAAIyG,EAAQrH,OAAO8G,OAAO,GAAIlG,GAE9B,OADAyG,EAAQrH,OAAO8G,OAAOO,EAAO,CAAEwjB,OAAQtB,YAG3C,CAAC7hB,IAG6CpB,IAAMzC,SAAS,KAZb,mBAY3CmnB,EAZ2C,KAYzBC,EAZyB,KAalD3mB,qBAAU,WACJ4jB,GACFA,EAAS8C,EAAiB9f,OAAS,EAAI8f,EAAmB,QAE3D,CAACA,IACJ,IAAMvL,EAAYnZ,IAAM4kB,aACtB,SAAC1mB,GAAY,IACHob,EAAwBpb,EAAxBob,OAAQC,EAAgBrb,EAAhBqb,YAGhB,GAAKA,EAUL,OAAQD,EAAOE,aACb,KAAKD,EAAYC,YACfmL,GAAoB,SAACE,GAAD,OAnDd,SAAC1kB,EAAMuc,EAAYC,GAAc,IAAD,EAC5Bxc,EAAKyc,OAAOF,EAAY,GAAnCG,EADuC,oBAI9C,OAFA1c,EAAKyc,OAAOD,EAAU,EAAGE,GAElB,YAAI1c,GAgDDsZ,CAAQoL,EAAOvL,EAAO9R,MAAO+R,EAAY/R,UAE3C,MACF,IAAK,OACHmd,GAAoB,SAACE,GAAD,OAjDjB,SAACvL,EAAQC,EAAauD,EAAiBC,GAClD,IAAMzc,EAAOgZ,EAAOwD,EAAgBtV,OAKpC,OAJA+R,EAAYqD,OAAOG,EAAqBvV,MAAO,EAA/C,2BACKlH,GADL,IAEEikB,OAAO,OAAD,OAAStB,SAEV,YAAI1J,GA4CDN,CAAK7X,EAA0ByjB,EAAOvL,EAAQC,WAjBlDoL,GAAoB,SAACE,GACnB,IAAM5L,EAAI,YAAO4L,GAGjB,OAFA5L,EAAK2D,OAAOtD,EAAO9R,MAAO,GAEnByR,OAoBb,CAACyL,IAGH,OACE,yBAAKxd,UAAWC,KAAO2d,iBACrB,kBAAC,KAAD,CAAiB3L,UAAWA,GAC1B,yBAAKjS,UAAWC,KAAO4d,gBACrB,kBAACX,GAAD,CAAaf,MAAOqB,KAEtB,yBAAKxd,UAAWC,KAAO6d,oBACrB,kBAACvB,GAAD,CAAMJ,MAAOjiB,KAEf,yBAAK8F,UAAWC,KAAO8d,oBACrB,kBAAC,GAAD,U,oBC/PJC,GAAe,CACnBC,OAAQ,KACRC,OAAQ,MAGK,SAASC,GAAT,GAA0D,IAAD,IAAvCC,YAAuC,WAAhC3pB,EAAgC,EAArB4pB,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,QAAW,EAC5CxlB,IAAMzC,SAG7B2nB,IAJmE,mBAC/DL,EAD+D,KACxDY,EADwD,OAM9CloB,mBAAS,IANqC,mBAM/DmlB,EAN+D,KAMzDgD,EANyD,OAO1CnoB,qBAP0C,mBAO/DooB,EAP+D,KAOvDC,EAPuD,KAQtEhqB,QAAQC,IAAIypB,EAAM5C,GAMlB,IAcMmD,EAAc,WAAO,IAAD,EACpBpiB,EAAMqiB,OAAOC,eAAetJ,WAGhC,GAFAmJ,OAAUjqB,GAEN8H,EAAImB,OAAS,EAAG,CAClB,IAAIohB,EAAW,YAAOtD,GACtBsD,EAAY5S,KAAK3P,GACjBiiB,EAAQM,IAEV,UAAIC,SAASC,eAAeX,UAA5B,aAAI,EAAmCY,iBAAiB,WACtD7iB,YAAW,WACT2iB,SAASC,eAAeX,GAAUY,iBAAiB,SAAS,GAAGC,UAC9D,KAGLX,EAASP,KAaPmB,EA/CJf,EACEA,GACA,6kBAuDF,OARA5C,EAAK3pB,KAAI,SAAC4a,GACR/X,QAAQC,IAAI,SAAUwqB,GAEtBA,EAAaA,EAAW7rB,QAAQmZ,EAAG,SAAWA,EAAI,SAClD/X,QAAQC,IAAI,QAASwqB,MAEvBzqB,QAAQC,IAAIwqB,GAGV,yBAAKC,UArDa,SAACliB,GACnBA,EAAMmiB,iBACN3qB,QAAQC,IAAIiqB,OAAOC,eAAetJ,aAE9BqJ,OAAOC,eAAetJ,WAAW7X,OAAS,GAAK+gB,IACjDF,EAAS,CACPN,OAAQ/gB,EAAMoiB,QAAU,EACxBpB,OAAQhhB,EAAMqiB,QAAU,MA+CzB/D,EAAK9d,OAAS,EACb,kBAACgI,EAAA,EAAD,KACG,IACAyZ,EAAWK,MAAM,SAAS3tB,KAAI,SAAC4a,EAAG9O,GACjC,MAAY,KAAR8O,EAAE,IACJA,EAAIA,EAAEgT,UAAU,GAChB/qB,QAAQC,IAAI2pB,EAAQ9C,KAAM7d,GAExB,kBAACW,EAAA,EAAD,CAASI,MAAO,uBACd,0BACE+J,YAAa,kBAAMiW,EAAUjS,IAC7BtM,MAAO,CACLqB,OAAQ,UACRC,gBAAiB,yBAElBgL,KAKA,8BAAOA,OAQpB,kBAAC/G,EAAA,EAAD,KAAa0Y,GAEf,kBAACsB,GAAA,EAAD,CACEC,aAAW,EACXvM,KAAuB,OAAjBuK,EAAMO,OACZrK,QAAS8K,EACTiB,gBAAgB,iBAChBC,eACmB,OAAjBlC,EAAMO,QAAoC,OAAjBP,EAAMM,OAC3B,CAAE6B,IAAKnC,EAAMO,OAAQ6B,KAAMpC,EAAMM,aACjCxpB,GAELgqB,EACC,kBAACuB,GAAA,EAAD,CAAUrf,QA/DA,WAChB,IAAIpE,EAAMkiB,EAENwB,EADW,YAAOzE,GACIxhB,QAAO,SAACyS,GAAD,OAAOA,GAAKlQ,KAE7CmiB,OAAUjqB,GACV+pB,EAAQyB,GAER1B,EAASP,MAuDH,cAEA,kBAACgC,GAAA,EAAD,CAAUrf,QAASge,GAAnB,SC5GV,IAGMuB,GAAmB,SAAC,GAAoC,IAAD,EACvDC,EADsB7B,EAAiC,EAAjCA,QAAS5qB,EAAwB,EAAxBA,KAAM0sB,EAAkB,EAAlBA,YAezC,MAZa,SAAT1sB,IAAA,OAAmB4qB,QAAnB,IAAmBA,OAAnB,EAAmBA,EAASzhB,YAE9BsjB,EAAuB7B,EAAQzhB,SAAShL,KAAI,SAACqJ,GAC3C,OACE,0BACEgE,MAAO,EACPE,EAAGghB,EAAYllB,EAAKI,MACpB6D,OARW,GASXK,QAAS,UAKf,yBAAKN,MAAK,UAAEkhB,EAAYhe,eAAd,aAAE,EAAsB,GAAIjD,OAdrB,IAef,0BACEI,KAAM,OACNL,MAAOkhB,EAAY9B,EAAQ5qB,IAC3ByL,OAlBa,KAmBdghB,IAIME,GAAb,WACE,WAAYC,GAAW,qBACrBC,KAAKrhB,MAAQohB,EAASphB,MACtBqhB,KAAKjkB,kBAAoBgkB,EAAShkB,kBAClCikB,KAAKC,kBAAoB,GAJ7B,oEAM0B,IAAD,OACrB,MAAO,CACL9hB,MAAO,QACPhL,KAAM,OACN+sB,UAAW,CACTxf,QAAS,YAEX/B,MAAOqhB,KAAKrhB,MACZwhB,WAAY,SAAC7tB,EAAGuQ,GAAJ,OAAUA,EAAEoY,KAAK9d,OAAS7K,EAAE2oB,KAAK9d,QAC7CijB,gBAAiB,kBAAM,+BACvBC,OAAQ,SAACtC,GAIP,OAHKzX,MAAMga,QAAQvC,EAAQ9C,QACzB8C,EAAQ9C,KAAO,IAGf,kBAAC,GAAD,CACExpB,GAAI8uB,GAAcxC,GAClB9C,KAAM8C,EAAQ9C,KACdC,YAAa,SAACjf,EAAQD,GACpB,GAAe,QAAXC,EACF8hB,EAAQ9C,KAAKtP,KAAK3P,OACb,CACL,IAAM+D,EAAQge,EAAQ9C,KAAK1J,WAAU,SAACiP,GAAa,IAAD,EAChD,OAAOA,EAAQrtB,QAAR,UAAiB6I,EAAI,UAArB,aAAiB,EAAQ7I,SAE9B4M,GAAS,GACXge,EAAQ9C,KAAK9F,OAAOpV,EAAO,GAI/B,EAAKhE,kBACHgiB,EAAQ5iB,cACR4iB,EAAQ9pB,OACR+H,EACAC,YAxChB,KAgDA,SAASskB,GAAcxC,GACrB,MAAM,MAAN,OAAaA,EAAO,IAEf,IAAM0C,GAAb,WACE,WAAY1sB,EAAMZ,EAAM4sB,GAAW,qBACjCC,KAAK7sB,KAAOA,EACZ6sB,KAAKjsB,KAAOA,EACZisB,KAAKrhB,MAAQohB,EAASphB,MAAQohB,EAASphB,MAAQ,IAC/CqhB,KAAK1L,MAAQyL,EAASzL,MACtB0L,KAAKU,cAAgBX,EAASW,cANlC,oEAS0B,IAAD,OACrB,MAAO,CACLviB,MAAO6hB,KAAK7sB,KACZA,KAAM6sB,KAAK7sB,KACXktB,OAAQ,SAACtC,GACP,OACE,yBAAKne,MAAO,CAAE,cAAe,WAC3B,kBAACge,GAAD,CACEC,KAAME,EAAQ,EAAK5qB,MACnB2qB,SAAQ,UAAKyC,GAAcxC,IAC3BA,QAASA,MAIjBpf,MAAOqhB,KAAKrhB,MACZ+hB,cAAeV,KAAKU,cACpBpM,MAAO0L,KAAK1L,WAzBlB,KA6BaqM,GAAb,WACE,WAAY5sB,EAAMZ,EAAM4sB,GAAW,qBACjCC,KAAK7sB,KAAOA,EACZ6sB,KAAKjsB,KAAOA,EACZisB,KAAKrhB,MAAQohB,EAASphB,MAAQohB,EAASphB,MAAQ,IAC/CqhB,KAAK1L,MAAQyL,EAASzL,MACtB0L,KAAKU,cAAgBX,EAASW,cANlC,oEAS0B,IAAD,OACrB,MAAO,CACLviB,MAAO6hB,KAAK7sB,KACZA,KAAM6sB,KAAK7sB,KACXktB,OAAQ,SAACtC,GACP,OACE,8BAAOA,EAAQ,EAAK5qB,MAAQ4qB,EAAQ,EAAK5qB,MAAQ,EAAKA,OAG1DwL,MAAOqhB,KAAKrhB,MACZ+hB,cAAeV,KAAKU,cACpBpM,MAAO0L,KAAK1L,WApBlB,KAwBasM,GAAb,WACE,WAAY7sB,EAAMZ,EAAM4sB,EAAUc,GAAqB,IAAD,4BACpDb,KAAK7sB,KAAOA,EACZ6sB,KAAKjsB,KAAOA,EACZisB,KAAKxsB,KAAO,eACZwsB,KAAKphB,OAAS,KACdohB,KAAKrhB,MAAQohB,EAASphB,MAAQohB,EAASphB,MAAQ,IAC/CqhB,KAAK1L,MAAQyL,EAASzL,MACtB0L,KAAKU,cAAgBX,EAASW,cAC9BV,KAAKG,WAAa,SAAC7tB,EAAGuQ,GAAJ,OAAUvQ,EAAE,EAAKa,MAAQ0P,EAAE,EAAK1P,OAClD6sB,KAAKa,mBAAqBA,EAC1Bb,KAAKc,sBAAwB,SAACrnB,EAAQH,GACpC,OAhJ2B,SAACG,EAAQH,GAAT,OAC/BA,GAASG,EAAOghB,WAAanhB,GAASG,EAAOihB,UA+IlCqG,CAAyBtnB,EAAOH,MAAOA,IAEhD0mB,KAAKgB,cAAgB,SAACjD,GACpB,OACE,kBAAC,GAAD,CACEA,QAASA,EACT5qB,KAAM,EAAKA,KACX0sB,YAAa,EAAK3c,UAlB4B,MAqBnCtB,IAAUoe,KAAKjsB,MAAM,SAACsI,GAAD,OAAWA,EAAM,EAAKlJ,SArBR,mBAqB/C6Y,EArB+C,KAqB1CD,EArB0C,KAsBhDC,EAAM,IACRA,EAAM,GAGRgU,KAAK9c,OAAStB,MAEXE,OAAO,CAACkK,EAAM,KAAOD,EAAM,OAC3BlK,MAAM,CAAC,GAAIme,KAAKrhB,MAAQ,KAC3BqhB,KAAK7c,OAASvB,MAAiBC,MAAM,CAACme,KAAKphB,OAAQ,IAEnD,IAAIqiB,EAAQjB,KAAK9c,OAAOge,OAElB1I,EADS5W,MAAeE,OAAOmf,EAAMnf,SAC3Bqf,CAAOptB,EAAKzC,KAAI,SAAC+K,GAAD,OAAWA,EAAM,EAAKlJ,UACtD6sB,KAAK7c,OAAS6c,KAAK7c,OAAOrB,OAAO,CAC/B,EACAF,IAAO4W,GAAS,SAACG,GAAD,OAAYA,EAAOxb,YAErC6iB,KAAKxH,QAAUA,EAxCnB,oEAoD0B,IAAD,OACrB,MAAO,CACLra,MAAO6hB,KAAK7sB,KACZA,KAAM6sB,KAAK7sB,KACXwL,MAAOqhB,KAAKrhB,MACZnL,KAAMwsB,KAAKxsB,KACX2sB,WAAYH,KAAKG,WACjBE,OAAQL,KAAKgB,cACb1M,MAAO0L,KAAK1L,MACZoM,cAAeV,KAAKU,cACpBI,sBAAuBd,KAAKc,sBAC5BM,wBAAyB,YAAuB,IAApBC,EAAmB,EAAnBA,aAC1B,OACE,yBAAKzhB,MAAO,CAAE0hB,cAAe,MAAOriB,QAAS,KAC3C,kBAAC,GAAD,CAAmBoiB,aAAcA,IAC9B,YAA0B,IAAvBE,EAAsB,EAAtBA,gBACF,OAA+B,IAA3BA,EAAgBpkB,OACX,8BAGP,kBAAC,GAAD,CACE+F,OAAQ,EAAKA,OACbC,OAAQ,EAAKA,OACbqV,QAAS,EAAKA,QACd5Z,OAAQ,EAAKA,OACb7K,KAAMwtB,EAAgBjwB,KACpB,SAAC+K,GAAD,OAAWA,EAAM,EAAKlJ,gBAQtCitB,gBAAiB,SAACpe,GAChB,OACE,kBAAC,GAAD,iBACMA,EADN,CAEEkB,OAAQ,EAAKA,OACbC,OAAQ,EAAKA,OACbqV,QAAS,EAAKA,QACd5Z,OAAQ,EAAKA,OACbub,SAAU,SAAC1gB,EAAQH,EAAOgM,GACxB,OAAO,EAAKub,mBAAmB,EAAK1tB,KAAMsG,IAE5C1F,KAAM,EAAKA,KAAKzC,KACd,SAAC+K,GAAD,OAAWA,EAAM,EAAKlJ,gBAlGpC,6BA2CequB,GACXxB,KAAKrhB,MAAQ6iB,EACbxB,KAAK9gB,MAAM2C,MAAM,CAAC,EAAGme,KAAKrhB,UA7C9B,8BAgDgB8iB,GACZzB,KAAKgB,cAAgBS,MAjDzB,KAkHA,IAAMC,GAAgB,SAAC1f,GAAW,IAAD,EACzBqf,EAAiBrf,EAAjBqf,aAEN,OADAA,EAAY,UAAGA,SAAH,aAAG,EAAcA,eACPA,EAAa,GAI5B,kBAAC,GAAD,CAAalH,SAAUnY,EAAMmY,WAH3B,+BAgBX,IAaawH,GAAb,WACE,WAAY5tB,EAAMZ,EAAM4sB,EAAUc,GAAqB,qBACrDb,KAAK7sB,KAAOA,EACZ6sB,KAAKrhB,MAAQ,IACbqhB,KAAKjsB,KAAOA,EACZisB,KAAKnjB,0BAA4BkjB,EAASljB,0BAC1CmjB,KAAKa,mBAAqBA,EAC1Bb,KAAKc,sBAAwB,SAACrnB,EAAQH,GACpC,OA9BgBsoB,EA8BInoB,EAAOH,MA9BEuoB,EA8BKvoB,GA7BjCsoB,IAAgBC,GAhBvB,SAA8BC,EAAQC,GACpC,OAAOA,EAAIC,OAAQ5kB,EAA6C,EAAvC,SAAC4F,GAAD,OAAQ5F,EAAI0kB,EAAO1V,QAAQpJ,EAAG5F,GAAK,KAA1C,IAACA,EAkBZ6kB,CACLJ,EAASvwB,KAAI,SAAC6D,GAAD,OAASA,EAAIhC,QAC1ByuB,EAAYtwB,KAAI,SAAC6D,GAAD,OAASA,EAAI1D,OANjC,IAAsBmwB,EAAaC,GAsBnC,oEAW0B,IAAD,OACrB,MAAO,CACL1jB,MAAO,cACPhL,KAAM6sB,KAAK7sB,KACXwL,MAAOqhB,KAAKrhB,MACZwhB,WAAY,SAAC7tB,EAAGuQ,GAAJ,OAAUvQ,EAAEgK,SAASa,OAAS0F,EAAEvG,SAASa,QACrD2jB,sBAAuBd,KAAKc,sBAC5BT,OAAQ,SAAC6B,GAAD,OAqIoBnuB,EApIDmuB,EAoIOrlB,EApIK,EAAKA,0BAsI9C,kBAAC,GAAD,CACEwC,MAAOtL,EAAKuI,SACZO,0BACEA,IALR,IAAkC9I,EAAM8I,GAnIlCukB,wBAAyB,YAAuB,IAApBC,EAAmB,EAAnBA,aAE1B,OADAltB,QAAQC,IAAI,6BAEV,kBAAC,GAAD,CAAmBitB,aAAcA,IAC9B,YAA0B,IAAvBE,EAAsB,EAAtBA,gBACF,OAA+B,IAA3BA,EAAgBpkB,OACX,8BAGP,kBAACglB,GAAD,CACEd,aAAcE,QAO1B/tB,KAAM,aACN4sB,gBAAiB,SAACpe,GAAD,OACf,kBAAC,GAAD,CACEqf,aAAc,CAAEA,aAAc,EAAKttB,MACnComB,SAAU,SAAC1gB,EAAQH,EAAOgM,GACxB,OAAO,EAAKub,mBAAmB,EAAK1tB,KAAMsG,YA1CtD,KA+GM0oB,GAAsBC,cA9DI,SAAC,GAAsB,IAApBf,EAAmB,EAAnBA,aAC3BgB,EAAejP,mBAAQ,WAC3B,OAAOiO,EAAa/vB,KAAI,SAACgU,GACvB,MAAO,CACLnK,cAAemK,EAAInK,cAEnBkG,UAAWiE,EAAIjE,UACfpN,OAAQqR,EAAIrR,cAPkC,EAgBhD0B,GAAe,sBAAC,4BAAArD,EAAA,sEACKG,EAAuB4vB,GAD5B,cACZ9sB,EADY,yBAEXA,GAFW,2CAGjB,IAnBiD,mBAalDQ,EAbkD,KAclDusB,EAdkD,KAelDC,EAfkD,KAsBpD,OACE,6BACGxsB,GACC,kBAACsW,EAAA,EAAD,CAAU1N,MAAO,QAASC,OAAQ,OAAQwG,QAAS,SAEpDkd,GAAgB,2BAAIA,GACrB,yBAAK1iB,MAAO,CAAEhB,OAAQ,OAAQ4L,SAAU,SACtC,kBAACrF,EAAA,EAAD,CAAYvF,MAAO,CAAE4iB,MAAO,OAAQC,UAAW,SAC5CJ,EAAallB,OADhB,iBAGColB,GACCA,EAAsB,GAAtB,KAAiCjxB,KAAI,SAACoxB,EAAa3iB,GACjD,OACE,yBACEE,IAAG,kBAAaF,GAChBH,MAAO,CACLC,QAAS,eACTqB,gBAAiB,aACjByhB,aAAc,OACdjiB,QAAS,MACTc,OAAQ,SAEV,yBAAK5B,MAAO,CAAE4iB,MAAO,SACnB,kBAAC,GAAD,CACEnjB,MAAOqjB,EAAYpmB,SAAShL,KAAI,SAAC+V,GAC/B,MAAO,CAAElU,KAAMkU,MAEjBxK,0BACE1I,QAAQC,OAId,0BAAMwL,MAAO,CAAE4iB,MAAO,UAAtB,IAAmCE,EAAW,WAGhD,SAuDd,IAeME,GAAoBR,cAfI,SAACpgB,GAAW,IAChCqf,EAA2Brf,EAA3Bqf,aAAcpoB,EAAa+I,EAAb/I,SADiB,EAEOnD,mBAAS,IAFhB,mBAEhCyrB,EAFgC,KAEfsB,EAFe,KASvC,OANAtsB,qBAAU,WACRpC,QAAQC,IAAI,6BACRitB,GAAgBA,EAAalkB,OAAS,GACxC0lB,EAAmBxB,KAEpB,CAACA,EAAalkB,SACb2lB,EAAEC,WAAW9pB,GACRA,EAAS,CAAEsoB,oBAEb,iCC1YT,SAASyB,GAAankB,EAAG0P,GACvB,IAAMvL,GAAkB,kBAANnE,EAAiBA,EAAIA,EAAEmW,YAAYiK,MAAM,KAC3D,GAAI1Q,GAAK,EAAG,OAAOvL,EAAE,GACrB,IAAIigB,EAAIjgB,EAAE,IAAM,GAChB,GAAIigB,EAAE9lB,OAASoR,EAAG,MAAM,GAAN,OAAUvL,EAAE,GAAZ,YAAkBigB,EAAEC,OAAO,EAAG3U,IAChD,KAAO0U,EAAE9lB,OAASoR,GAAG0U,GAAK,IAC1B,MAAM,GAAN,OAAUjgB,EAAE,GAAZ,YAAkBigB,GAEpB,IAeME,GAAmBf,cAfI,SAACpgB,GACsBA,EAA1CohB,eAD+B,IACfC,EAA0BrhB,EAA1BqhB,OAClBC,GAD4CthB,EAAlBsD,IAAkBtD,EAAb/I,SACV+I,MAAMuhB,gBAAgB,GAAGjqB,OAEhDge,EAAU,kBAAM,+BAKpB,OAJI+L,EAAOjC,0BACT9J,EAAU+L,EAAOjC,yBAIjB,kBAAC,KAAgBoC,UAAcxhB,EAC7B,kBAACsV,EAAD,CAAS+J,aAAciC,EAAW/B,gBAAiB+B,QAuBnDG,GAAc,SAAC,GAAmC,EAAjCnqB,MAAiC,EAA1BoqB,MAA2B,IACnD/S,EADkCgT,EAAgB,kCAElDC,EAAY3xB,OAAO8G,OAAO,GAAI4qB,GAQlC,OAPIA,EAAUN,OAAOjD,iBACnBwD,EAAS,SAAeD,EAAUxJ,SAClCxJ,EAAOgT,EAAUN,OAAOjD,iBAGxBzP,EAAO,SAAC3O,GAAD,OAAW,kBAAC,KAAe6hB,KAAS7hB,IAG3C,kBAAC,KAAa6hB,KAAd,CAAmBjkB,MAAO,CAAEjB,MAAO,SACjC,kBAACgS,EAASiT,KAIVE,GAAkB,SAAC,GAAmC,EAAjCxqB,MAAiC,EAA1BsG,MAA2B,IACvD/G,EADsC8qB,EAAgB,kCAK1D,OAHIA,EAAUN,OAAOhD,SACnBxnB,EAAO8qB,EAAUN,OAAOhD,OAAOsD,EAAUre,MAGzC,kBAAC,KAAaue,KAAd,iBAAuBF,EAAvB,CAAkC/jB,MAAO,CAAE4B,OAAQ,UAChD3I,IAIP,SAASkrB,GAAOC,GACdA,EAASC,KAAKC,cAAc1tB,MAAK,SAAC2tB,GAChCC,KACE,IAAIC,KAAK,CAACF,GAAS,CAAE3wB,KAAM,6BAC3B,oBAwBN,SAAS8wB,GACPC,EACAxwB,EACAywB,EACA3D,GAEA,IAAI4D,EACEC,EAfR,SAA2BC,EAAWD,GACpC,OAAIA,EAAeC,GACVD,EAAeC,GAEf,CAAEjE,eAAe,GAWHkE,CACrBL,EAAaM,YACbL,GA6CF,MA3C+B,QAA3BD,EAAaO,WAAkD,UAA3BP,EAAaO,UACnDL,EAA0B,IAAI7D,GAC5B7sB,EACAwwB,EAAaM,YACbH,EACA7D,GAEkC,SAA3B0D,EAAaO,UACtBL,EAA0B,IAAI9D,GAC5B5sB,EACAwwB,EAAaM,YACbH,EACA7D,GAEkC,aAA3B0D,EAAaO,UACtBL,EAA0B,IAAIhE,GAC5B1sB,EACAwwB,EAAaM,YACbH,EACA7D,GAEkC,eAA3B0D,EAAaO,UACtBL,EAA0B,IAAI9C,GAC5B5tB,EACA,WACA2wB,EACA7D,GAEkC,QAA3B0D,EAAaO,UACtBL,EAA0B,IAAI3E,GAAY4E,GAS1CvwB,QAAQmC,MAAR,iFAC4EiuB,EAAaO,UADzF,MAKKL,EAmjBMM,OAjjBS,SAAC,GAKlB,IAJL3B,EAII,EAJJA,eACAvmB,EAGI,EAHJA,0BACAmoB,EAEI,EAFJA,YACAjpB,EACI,EADJA,kBAEMkpB,EAAc5T,iBAAO,MADvB,EAG0B9Y,IAAMzC,SAAS,IAHzC,mBAGGovB,EAHH,KAGYC,EAHZ,KAIEC,EAAe,SAACC,EAAY/rB,GAChC,IAAMgsB,EAAqBJ,EAAQ3T,WACjC,SAAC9X,GAAD,OAAYA,EAAO4rB,aAAeA,KAEhCE,EAAa,YAAOL,GACpBI,GAAsB,EACxBC,EAAcD,GAAsB,CAClCD,WAAYA,EACZ/rB,MAAOA,GAGTisB,EAAc5Z,KAAK,CAAE0Z,WAAYA,EAAY/rB,MAAOA,IAEtD6rB,EAAWI,IAETb,EAAiB,CACnBvpB,cAAe,CAAEmZ,MAAO,GACxBjT,UAAW,CAAEiT,MAAO,GACpBkR,SAAU,CAAE7mB,MAAO,IAAK2V,MAAO,GAC/BvZ,KAAM,CAAE4D,MAAO,IAAK2V,MAAO,GAC3BhY,SAAU,CACRqC,MAAO,IACP2V,MAAO,EACPzX,0BAA2BA,GAE7B4oB,MAAO,CAAE9mB,MAAO,IAAK2V,MAAO,EAAGvY,kBAAmBA,IAGpDxD,IAAMhC,WAAU,WAQdmvB,EACEV,EACG1zB,KAAI,SAACizB,GAAD,OACHD,GACEC,EACAnB,EACAsB,EACAU,GACAO,0BAEH/iB,MAAK,SAACtQ,EAAGuQ,GACR,OAAKvQ,EAAEgiB,MAGFzR,EAAEyR,OAGAhiB,EAAEgiB,MAAQzR,EAAEyR,MAAQ,GAFjB,EAHD,QAQd,CAAC8O,IA5DA,MA8D0BttB,mBAC5BkvB,EACG1zB,KAAI,SAACizB,GAAD,OACHD,GACEC,EACAnB,EACAsB,GACAiB,0BAEH/iB,MAAK,SAACtQ,EAAGuQ,GACR,OAAKvQ,EAAEgiB,MAGFzR,EAAEyR,OAGAhiB,EAAEgiB,MAAQzR,EAAEyR,MAAQ,GAFjB,EAHD,MAzEX,mBA8DGsR,EA9DH,KA8DYF,EA9DZ,OAiFsC5vB,mBAAS,IAjF/C,mBAiFGujB,EAjFH,KAiFcwM,EAjFd,OAuFoB/vB,mBAASstB,GAvF7B,mBAuFGvc,EAvFH,KAuFSif,EAvFT,KAwFEC,EAAc5I,uBAClB,SAAC6I,GACCf,EAAYvS,QAAQuT,WAAWD,KAEjC,CAACf,IAGH1uB,qBAAU,WACRuvB,EAAQ1C,KACP,CAACA,IAjGA,MAkGoCttB,mBAAS,IAlG7C,mBAkGGowB,EAlGH,KAkGaC,EAlGb,KAyHEC,EAAoB,SAAC9sB,EAAO+pB,EAAQzB,GAExC,IAAMyE,EAAmBhD,EAAOvC,sBAC9B,CAAExnB,MAAOsoB,GACTtoB,GAEF,MAAO,CACLA,MAAO+sB,EACPpmB,IAAI,GAAD,OAAKojB,EAAOlwB,KAAZ,YAAoBkzB,KAGrBC,EAAqClT,mBACzC,WACE,OAAOwS,EAAQt0B,KAAI,SAAC+xB,GAElB,GAAoB,iBAAhBA,EAAO7vB,KAAyB,CAClC,IAAM+yB,EAAQL,EAAS3jB,MACrB,SAACgkB,GAAD,OAAWA,EAAMlB,aAAehC,EAAOlwB,QAErCqzB,EAAgBD,EAChBA,EAAME,cACN,CAAEhM,UAAW,GAAKC,UAAW,KAEjC,MAAO,CACL2K,WAAYhC,EAAOlwB,KACnBuzB,SAAU,SAACptB,GAAD,OACR8sB,EAAkB9sB,EAAO+pB,EAAQmD,KAEhC,GAAoB,eAAhBnD,EAAO7vB,KAAuB,CACvC,IAAM+yB,EAAQL,EAAS3jB,MACrB,SAACgkB,GAAD,OAAWA,EAAMlB,aAAehC,EAAOlwB,QAErCqzB,EAAgBD,EAAQA,EAAME,cAAgB,KAElD,MAAO,CACLpB,WAAYhC,EAAOlwB,KACnBuzB,SAAU,SAACptB,GAAD,OACR8sB,EAAkB9sB,EAAO+pB,EAAQmD,KAGvC,MAAO,CAAEnB,WAAYhC,EAAOlwB,WAGhC,CAACyyB,EAASM,IApKR,EAyKgCpwB,mBAAS,CAC3C8vB,EAAQt0B,KAAI,SAAC+xB,GAAD,MAAa,CACvBgC,WAAYhC,EAAOlwB,KACnBwzB,iBAAiB,QAHdC,EAzKH,sBAkL0B9wB,mBAC5B8vB,EAAQt0B,KAAI,SAAC+xB,GACX,MAAO,CACLgC,WAAYhC,EAAOlwB,KACnBwL,MAAO0kB,EAAO1kB,MAAQ0kB,EAAO1kB,MAAQ,SAJpCkoB,EAlLH,sBA2LgC/wB,mBAClC8vB,EAAQt0B,KAAI,SAAC+xB,GACX,MAAO,CACLgC,WAAYhC,EAAOlwB,KACnB2zB,UAAW,SAACxtB,EAAOG,EAAQ6L,GAEzB,OAAI+d,EAAOvC,sBACFuC,EAAOvC,sBAAsBrnB,EAAQH,EAAOgM,GAE9CyhB,KAAoBC,iBAAiB1tB,EAAOG,EAAQ6L,SAT5D2hB,EA3LH,sBA0MwBnxB,mBAC1B8vB,EAAQt0B,KAAI,SAAC+xB,GACX,MAAO,CACLlwB,KAAMkwB,EAAOlwB,KACbkyB,WAAYhC,EAAOlwB,KACnBK,KAAM,SACN0zB,mBAAmB,EACnBC,eAAe,OAPdC,EA1MH,sBAsN+BtxB,mBACjC8vB,EACGnsB,QAAO,SAAC4pB,GAAD,OAAYA,EAAO3C,iBAC1BpvB,KAAI,SAAC+xB,GAAD,OAAYA,EAAOlwB,SAHrBk0B,EAtNH,oBAuSJ,OACE,kBAACC,GAAA,EAAD,KACE,kBAAC,KAAD,CAAMzgB,KAAMA,EAAM+e,QAASA,GACzB,kBAAC,KAAD,MACA,kBAAC,KAAD,CACEM,SAAUA,EACVqB,iBA1MY,SAACC,GAAiB,IAAD,EA1QDC,EA4Q9BC,EAAgB,QA5QcD,EA4QmBvB,EAAjC,EAAoBsB,EA3QxB/tB,QAChB,SAACkuB,GAAD,OACGF,EAAYG,MACX,SAACC,GAAD,OACEF,EAAetC,aAAewC,EAAgBxC,wBAuQhC,aAAG,EAA0C,GACjE,GAAIqC,EAAkB,CACpB,IAAII,EAAgB5C,EAAQ3iB,MAC1B,SAACwlB,GAAD,OAAgBL,EAAiBrC,aAAe0C,EAAW1C,cAGxDyC,IACHA,EAAgB,CAAExuB,MAAO,CAAEmhB,UAAW,GAAKC,UAAW,OAExD,IAAMsN,EAAgBR,EAAYjW,WAChC,SAAC0W,GAAD,OAAcA,EAAS5C,aAAeqC,EAAiBrC,cAEzDmC,EAAYQ,GAAiB/1B,OAAO8G,OAAOyuB,EAAYQ,GAAgB,CACrEvB,cAAeqB,EAAcxuB,QAIjC6sB,EAAoBqB,IAwLdU,uBAAqB,EACrBC,iBAAkBvB,IAEpB,kBAAC,KAAD,CAAcwB,WAAYhB,IAC1B,kBAAC,KAAD,CACEe,iBAAkB7B,IAEpB,kBAAC,KAAD,CAAmB+B,WA1FC,SAAC70B,EAAMqT,EAAMyhB,GACrC,MAAa,WAAT90B,EACGqT,EAAK1J,OAGH0J,EAFE,KAIJA,KAoFH,kBAAC,KAAD,CAAgBqe,QAASA,EAASqD,gBAAiBpD,IACnD,kBAAC,KAAD,CACEgD,iBAAkBlB,IACpB,kBAAC,KAAD,CACE5N,UAAWA,EACXmP,kBAxOa,SAACvI,GACpB4F,EAAqB5F,MAyOjB,kBAAC,KAAD,MACA,kBAAC,KAAD,CAAce,cAAe8C,GAAiBllB,OAAQ,MACtD,kBAAC,KAAD,CACEyoB,yBAA0BA,IAE5B,kBAAC,KAAD,CAAqBR,oBAAqBA,IAC1C,kBAAC,KAAD,CAAgB4B,sBAAoB,IACpC,kBAAC,KAAD,CAAgBC,eAAa,IAC7B,kBAAC,KAAD,CAAgB1H,cAAeyC,KAC/B,kBAAC,KAAD,CACEkF,aAnGiB,SAAC3mB,GAAW,IAAD,EACNlM,oBAAS,GADH,mBAC3BvC,EAD2B,KACnByW,EADmB,KAE9B4e,EAAgB,cACdvD,EAAarjB,EAAMsD,IAAIujB,UACvBC,EAAalD,EAAQrjB,MAAK,SAAC8gB,GAAD,OAAYA,EAAOlwB,MAAQkyB,KAC3D,GAAIyD,EACF,GAAwB,iBAApBA,EAAWt1B,KAAyB,CACtC,IAAMu1B,EAAa7C,EAAS3U,WAC1B,SAACgV,GAAD,OAAWA,EAAMlB,aAAeA,KAE5BkB,EAAQL,EAAS6C,GAIrBH,GAFsB,IAApB5mB,EAAMsD,IAAIhM,MAEI,UAAM,MAAM0vB,OAC1BD,GADc,wBAEC1D,EAFD,aAEgBrC,GAC9BuD,EAAME,cAAchM,UACpB,GAJc,YAKXuI,GAAauD,EAAME,cAAc/L,UAAW,GALjC,KAOA,UAAM,MAAMsO,OAC1BD,GADc,wBAEC1D,EAFD,iCAEoCrC,GAClDuD,EAAME,cAAchM,UACpB,GAJc,aAKVuI,GAAauD,EAAME,cAAc/L,UAAW,GALlC,UAOb,GAAwB,eAApBoO,EAAWt1B,KAAuB,CAC3C,IAAMu1B,EAAa7C,EAAS3U,WAC1B,SAACgV,GAAD,OAAWA,EAAMlB,aAAeA,KAE5BkB,EAAQL,EAAS6C,GAIrBH,GAFsB,IAApB5mB,EAAMsD,IAAIhM,MAEI,UAAM,MAAM0vB,OAC1BD,GADc,2CAEoBxC,EAAME,cACvCn1B,KAAI,SAACqJ,GAAD,OAAUA,EAAKvH,SACnB61B,KAAK,MAEQ,UAAM,MAAMD,OAC1BD,GADc,uDAKlBH,EAAgB,UAAMvD,EAAN,eAAuBrjB,EAAMsD,IAAIhM,OAGrD,OACE,kBAAC,IAAM4K,SAAP,KACE,wBAAIzE,UAAWC,KAAOwpB,gBACpB,wBAAIC,QAAS,GAAI/oB,QAAS,kBAAM4J,GAAWzW,KACzC,kBAAC4R,EAAA,EAAD,CACE1F,UAAWC,KAAO0pB,mBAClBhkB,QAAS,YACRwjB,MAILr1B,GACA,kBAAC,KAAc81B,IAAQrnB,EAAQA,EAAM/I,YAsCrCkvB,iBAAkBvB,EAClB0C,qBAAsB,SAACtnB,GAAD,OACpB,kBAACmhB,GAAD,eACEyC,QAASA,EACTxC,eAAgBA,GACZphB,KAERunB,iBAAkB,WAChB,OAAO,+BAETC,wBAAsB,EACtBC,kBAAmB,SAACC,GAClB,IAAIC,GAAiB,EAIrB,GAAIzD,EAAS/oB,OAAS,EAAG,CACvB,IAAMysB,EAAeF,EAAUG,SAASvkB,IAAIujB,UAC5Cc,EACEzD,EAASA,EAAS/oB,OAAS,GAAGkoB,aAAeuE,EAEjD,OACE,wBAAIhqB,MAAO+pB,EAAiB,CAAE9pB,QAAS,QAAW,UAIxD,kBAAC,KAAD,MACA,kBAAC,KAAD,CAAakmB,YAAaA,IAE1B,kBAAC,KAAD,MACA,kBAAC,KAAD,CAAe0C,sBAAoB,KAErC,kBAAC,KAAD,CACEvS,IAAK+O,EACLpe,KAAMA,EACN+e,QAASA,EACT7B,OAAQA,GACR1K,UAAWA,M,+BCzfJyQ,GAjFS,SAAC9nB,GAAW,IAAD,EACLlM,mBAAS,KADJ,mBAC1B8I,EAD0B,KAClBmrB,EADkB,OAM7BpsB,qBAAWrF,IAHb6D,EAH+B,EAG/BA,gBACAU,EAJ+B,EAI/BA,0BACAd,EAL+B,EAK/BA,kBAL+B,EAOKjG,mBAAS,MAPd,mBAO1BkvB,EAP0B,KAObgF,EAPa,OASYr0B,GAAe,sBAAC,sBAAArD,EAAA,sEAC9C+B,GAAU,eADoC,mFAE1D,IAX8B,mBASR41B,GATQ,gBAuDjC,OAzCA1zB,qBAAU,WACR,IAAIyuB,EAAciF,EAEZC,EAAgB,CAAC,MAEjBC,EAAgB,CAAC,gBAAiB,UAEpCnF,IAoBFA,GALAA,GANAA,GANAA,EAAcA,EAAYoF,OAAO,CAC/BvF,YAAa,WACbC,UAAW,aACXuF,iBAAkBJ,EAAiB9sB,UAGXitB,OAAO,CAC/BvF,YAAa,QACbC,UAAW,MACXuF,iBAAkBJ,EAAiB9sB,OAAS,KAGpB7L,KAAI,SAAC+xB,GAE7B,OADAA,EAAO8G,cAAgBA,EAAc/jB,SAASid,GACvCA,MAGiB5pB,QACxB,SAAC4pB,GAAD,OAAa6G,EAAc9jB,SAASid,EAAOwB,iBAI/CmF,EAAehF,KACd,CAACiF,IACJ91B,QAAQC,IAAI,cAAe4wB,MAEzB7oB,GACAA,EAAgBgB,OAAS,GACzB6nB,GAIA,kBAAC,GAAD,CACE5B,eAAgBjnB,EAChB6oB,YAAaA,EACbnoB,0BAA2BA,EAC3Bd,kBAAmBA,IAErB,6BACE,kBAAC,KAAD,CACEuuB,QAAM,EACNC,SAAU,SAACC,GACTT,EAAUS,EAAYF,OAAO1rB,WAE9B,SAAC6rB,GAEA,OADAt2B,QAAQC,IAAI,SAAUwK,GAEpB,yBAAKsX,IAAKuU,EAAYhrB,UAAWirB,KAAaC,QAC5C,kBAACte,EAAA,EAAD,CAAUzN,OAAQA,EAAQwG,QAAQ,OAAOwlB,UAAU,e,8FCtE1C34B,OAAO44B,OAAO,CACnCC,UAAW,KACXC,SAAU,OAQZ,IA2IeC,GA3Ic,SAAC,GAA6B,IAA3B3rB,EAA0B,EAA1BA,MAAO4rB,EAAmB,EAAnBA,aAAmB,EAEhB1yB,IAAMzC,SAAS,MAFC,mBAEjDo1B,EAFiD,KAEnCC,EAFmC,OAGd5yB,IAAMzC,SAAS,MAHD,mBAGjDyJ,EAHiD,KAGlC6rB,EAHkC,OAIJ7yB,IAAMzC,SACxDm1B,EAAax5B,IALyC,mBAIjD6N,EAJiD,KAIjC+rB,EAJiC,KAOlDv2B,EAAMm2B,EAAan2B,IAEzByB,qBAAU,WACR,IAAI+0B,EAAejsB,EAAMkS,WAAU,SAAC5W,GAAD,OAAUA,EAAKlJ,KAAO6N,KACzD,GAAIgsB,GAAgB,EAAG,CACrB,IAAIC,EAAclsB,EAAMisB,GACxB9M,SACGgN,cAAc,eACdC,cAAcC,YAAYH,EAAYtwB,OAAQ,QAElD,CAACqE,IAWJ,IAAMqsB,EAAoB,SAACl6B,GAGvB45B,EADE55B,IAAO6N,EACiB,KAEA7N,IAI9B,SAASm6B,IAGPD,GAAkB,SAACE,GACZA,GACHF,EAAkBtsB,EAAM,GAAG5N,IAE7B,IAAM65B,EAAejsB,EAAMkS,WAAU,SAAC5W,GAAD,OAAUA,EAAKlJ,KAAOo6B,KAG3D,OAAIP,IAAiBjsB,EAAMlC,OAAS,IAAuB,IAAlBmuB,EAChCjsB,EAAM,GAAG5N,GAEX4N,EAAMisB,EAAe,GAAG75B,MAkBnC,OADA0C,QAAQC,IAAI,qBAAsBU,GAEhC,yBAAK8K,MAAO,CAAEsB,gBAAiB,UAC7B,yBAAKtB,MAAO,CAAEhB,OAAQ,SACpB,4BACEnN,GAAI,aACJkN,MAAO,OACPC,OAAQ,OACRktB,IAAKh3B,KAET,yBACE8K,MAAO,CACL4B,OAAQ,SACR7C,MAAO,cACPkB,QAAS,OACTksB,iBAAkB,YAClBC,oBAAqB,0BAEvB,yBAAKpsB,MAAO,CAAEqsB,QAAS,EAAGzhB,SAAU,WAClC,kBAAC,GAAD,CACEjL,cAAeA,EACfC,YAAa,SAAC/N,GAAD,OAAQ25B,EAAiB35B,IACtC6N,eAAgBA,EAChBD,MAAOA,EACPxC,0BAA2B,SAAClC,GAAD,OACzBgxB,EAAkBhxB,EAAKlJ,OAE3B,kBAAC,KAAD,MACG,cAAGmN,OAAH,IAAWD,EAAX,EAAWA,MAAX,OACC,kBAAC,GAAD,CACEA,MAAOA,EACPY,cAAeA,EACf6rB,iBAAkB,SAAC35B,GAAD,OAAQ25B,EAAiB35B,IAC3C6N,eAAgBA,EAChBD,MAAOA,EACPssB,kBAAmB,SAAChxB,GAAD,OACjBgxB,EAAkBhxB,EAAKlJ,WAKjC,yBAAKmO,MAAO,CAAEqsB,QAAS,EAAGttB,MAAO,OAAQC,OAAQ,SAC/C,yBACEgB,MAAO,CACL4B,OAAQ,SACR3B,QAAS,OACT2T,eAAgB,WAElB,kBAAC2I,GAAA,EAAD,CAAYxU,aAAW,SAASvH,QA7D1C,WACOd,GACHqsB,EAAkBtsB,EAAM,GAAG5N,IAE7B,IAAM65B,EAAejsB,EAAMkS,WAAU,SAAC5W,GAAD,OAAUA,EAAKlJ,KAAO6N,KAGvDgsB,EAAe,GAGnBK,EAAkBtsB,EAAMisB,EAAe,GAAG75B,MAoDhC,kBAAC,KAAD,OAEDy5B,GACC,kBAAC/O,GAAA,EAAD,CAAYxU,aAAW,SAASvH,QAhG5C,WACE8rB,cAAchB,GACdC,EAAgB,QA+FJ,kBAAC,KAAD,QAGFD,GACA,kBAAC/O,GAAA,EAAD,CAAYxU,aAAW,SAASvH,QAzG5C,WAEE+qB,EAAgBgB,YAAYP,EAAe,QAwG/B,kBAAC,KAAD,OAIJ,kBAACzP,GAAA,EAAD,CAAYxU,aAAW,SAASvH,QAASwrB,GACvC,kBAAC,KAAD,YAWRQ,GAAW,SAACpqB,GAAW,IAEzBrD,EAMEqD,EANFrD,MACAU,EAKE2C,EALF3C,MACAssB,EAIE3pB,EAJF2pB,kBACAP,EAGEppB,EAHFopB,iBACA9rB,EAEE0C,EAFF1C,eACAC,EACEyC,EADFzC,cAeF,IAAMsgB,EAAczM,mBAAQ,WAC1B,OAAOxR,MAEJE,OAAOF,IAAUvC,GAAO,SAAC1E,GAAD,OAAUA,EAAKI,SACvC8G,MAAM,CAAC,EAAGlD,EAAQ,MACpB,CAACU,EAAOV,IAEX,OACE,yBAAKA,MAAOA,EAAOC,OAAQ,IACxBS,EAAM/N,KAAI,SAACqJ,EAAMoF,GAChB,IAAMd,EAvBZ,SAA8BtE,EAAM2E,EAAgBC,GAClD,IAAIN,EASJ,OARIK,GAAkB3E,EAAKlJ,KAAO6N,GAEvBC,GAAiB5E,EAAKlJ,KAAO8N,KADtCN,EAAU,IAIRtE,EAAKlJ,KAAO8N,GAAiB5E,EAAKlJ,KAAO6N,IAC3CL,EAAU,GAELA,EAaae,CACdrF,EACA2E,EACAC,GAGF,OACE,0BACEU,IAAG,eAAUF,GACbG,aAAc,kBAAMkrB,EAAiBzwB,EAAKlJ,KAC1C0O,aAAc,kBAAMirB,EAAiB,OACrChrB,QAAS,kBAAMurB,EAAkBhxB,IACjCgE,MAAO,IACPE,EAAGghB,EAAYllB,EAAKI,MACpB6D,OAAQ,GACRK,QAASA,SClLNotB,GAxBD,SAAC,GAAiB,EAAfjU,SAAgB,IAAD,EAC8Bza,qBAC1DrF,IADMiC,EADsB,EACtBA,sBAAuBC,EADD,EACCA,yBAI/B,OADArG,QAAQC,IAAImG,EAAuBC,GAEjC,kBAAC,IAAM0J,SAAP,KACE,kBAAC,GAAD,MACC3J,GACC,kBAAC8Y,GAAA,EAAD,CACER,MAAM,EACNS,QAAS,kBAAM9Y,EAAyB,OACxCoF,MAAO,CAAEsB,gBAAiB,cAC1BuS,kBAAgB,qBAChBC,mBAAiB,4BACjB,kBAAC,GAAD,CACErU,MAAO9E,EACP0wB,aAAc1wB,EAAsB,Q,ogBCRhD,IAqBM+xB,GAAU1b,IAAOC,IAAV,MA8BE0b,gBAnDF,SAAC,GAAkB,IAAhBnU,EAAe,EAAfA,SACd,OACE,kBAACkU,GAAD,KACE,kBAACE,EAAA,EAAD,CAAiB/sB,UAAU,oBACzB,kBAACgtB,EAAA,EAAD,CAAexsB,IAAKmY,EAASnY,IAAKvE,QAAS,IAAKgxB,WAAW,QACzD,6BAASjtB,UAAU,iBACjB,kBAAC,IAAD,CAAQ2Y,SAAUA,GAChB,kBAAC,IAAD,CAAOuU,KAAK,QAAQ1nB,UAAW2nB,KAC/B,kBAAC,IAAD,CAAOD,KAAK,SAAS1nB,UAAW4nB,KAChC,kBAAC,IAAD,CAAOF,KAAK,UAAU1nB,UAAW+K,KACjC,kBAAC,IAAD,CAAO2c,KAAK,YAAY1nB,UAAWkT,KACnC,kBAAC,IAAD,CAAOwU,KAAK,SAAS1nB,UAAWonB,KAChC,kBAAC,IAAD,CAAOM,KAAK,UAAU1nB,UAAWsT,a,2RCvBhC,SAASuU,GAAT,GAAyD,IAAtCzrB,EAAqC,EAArCA,UAAU0rB,EAA2B,EAA3BA,QAAQC,EAAmB,EAAnBA,iBAAmB,EACvCz0B,IAAMzC,UAAS,GADwB,mBAC9D+e,EAD8D,KACrDoY,EADqD,KASrE,OAAQ5rB,GAAa0rB,EAAU,oCAC3B,kBAACG,GAAA,EAAD,CACErY,QAASA,EACTL,SATe,SAAC2Y,GAEpBA,EAAIC,kBACJJ,EAAiB3rB,EAAU8rB,EAAIvwB,OAAOiY,SACtCoY,EAAWE,EAAIvwB,OAAOiY,UAMlB3hB,MAAM,UACN4hB,WAAY,CAAE,aAAc,iCAE9B,kBAAC3P,EAAA,EAAD,CAEsBjS,MAAM,UACNkS,QAAQ,YACP/D,IAElB,KCIX,IAAMV,GAAYC,YAAW,CACzBH,KAAM,CACFI,SAAU,IACVC,SAAU,EACVJ,QAAQ,OAEZK,MAAO,CACHL,QAAS,QAEbW,UAAW,CACPC,SAAU,MACVpO,MAAM,QACNyT,WAAW,OACX1F,OAAO,WAEX2B,KAAK,CACD3B,OAAO,UACPwhB,UAAU,OACVzX,WAAW,OAEfzJ,OAAQ,CACJ1B,QAAS,eACT2B,OAAQ,QACRrC,UAAW,cAEfhB,MAAO,CACHmD,SAAU,IAEdG,IAAK,CACDC,aAAc,MAItB,SAAS2rB,GAAT,GAA2H,IAArGC,EAAoG,EAApGA,OAAOvtB,EAA6F,EAA7FA,MAAMwtB,EAAuF,EAAvFA,4BAA4BC,EAA2D,EAA3DA,sBAAsBtrB,EAAqC,EAArCA,WAAWurB,EAA0B,EAA1BA,cAAc3zB,EAAY,EAAZA,WAEtG2jB,EAAe,GACnB3jB,EAAWxI,KAAI,SAAAoa,GAAC,OAAE+R,EAAa/R,IAAK,KAHkF,MAI7E5V,mBAAS2nB,GAJoE,mBAI/GiQ,EAJ+G,KAI9FC,EAJ8F,KAMtH,SAASX,EAAiB3rB,EAAUwT,GAChC,IAAI+Y,EAAY,eAAQF,GACxBE,EAAavsB,GAAWwT,EACxB8Y,EAAcC,GAIlB,IAAIC,EAAa/zB,EAAWxI,KAAI,SAAAoa,GAAC,OAAE,kBAACohB,GAAD,CAAU7sB,IAAOyL,EAAGqhB,SAAYhtB,GAASmC,GAAcnC,GAAS0tB,IAAmC,WAAhBH,EAAO95B,KAAmB6N,UAAYqK,EAAGshB,iBAAkBA,OAEjL,OAAQ,kBAACvN,GAAA,EAAD,CACRxf,IAAKqtB,EAAOriB,OAEZ6iB,SAAU/tB,IAAU0tB,EACpBrtB,QAAS,SAACzD,GAAD,OAAW4wB,EAA4B5wB,EAAOoD,EAAM,CAACiH,MAAK,EAAM5E,OAAOkrB,EAAM,IAAQxzB,WAAW4zB,KACzGxtB,aAAc,kBAAIstB,EAAsBztB,IACxCI,aAAc,kBAAIqtB,EAAsBC,KAEvC,yBAAK7tB,MAAO,CAAE,MAAS,UAAvB,IAAoC,kBAACuF,EAAA,EAAD,CAEjCjS,MAAM,UACNkS,QAAQ,YACPkoB,EAAOriB,SAEZ,yBAAK7K,QAAS,SAAC+sB,GAAD,OAAOA,EAAIC,oBACxBS,IAOU,SAASE,KAAY,IAAD,EAGiBpwB,qBAAWrF,IAAnDyB,EAHuB,EAGvBA,QAASD,EAHc,EAGdA,WAAWY,EAHG,EAGHA,gBAGxBsrB,EAAU,CAAC,CAAE/a,OAAQ,eAAgBhL,IAAK,OAASzM,KAAK,WAExDuG,GACA9H,OAAOD,KAAK+H,GAASzI,KAAI,SAAAkR,GAAC,OAAEwjB,EAAQra,KAAK,CAAEV,OAAQ,MAAQzI,EAAGvC,IAAKuC,EAAIhP,KAAK,cAchF,IAAMgR,EAAU7D,KAvBe,EAwBCpI,IAAMzC,SAA6B,MAxBpC,mBAwBxB8f,EAxBwB,KAwBdqG,EAxBc,OAyBW1jB,IAAMzC,SAAS,GAzB1B,mBAyBxB23B,EAzBwB,KAyBTO,EAzBS,KAiCzBC,EAAsB,SAACtxB,EAAsCoD,EAAemuB,GAC9EF,EAAiBjuB,GACjBrF,EAAgBwzB,GAIhBjS,EAAY,OAvCe,EA2CEnmB,mBAAS23B,GA3CX,mBA2C1BvrB,EA3C0B,KA2Cf4E,EA3Ce,KA6C3B0mB,EAAwB,SAACl0B,GACzBwN,EAAexN,IAQnB,OAAUQ,EACN,yBAAK2F,UAAW+E,EAAQ/D,KAAMb,MAAO,CAAEC,QAAS,OAAQC,cAAe,gBACnE,kBAAC,KAAD,CAAMmF,UAAU,MAAM0C,aAAW,aAAalI,UAAW+E,EAAQ/D,MAC7D,kBAACqW,GAAA,EAAD,CACIY,QAAM,EACNyW,gBAAc,OACdC,gBAAc,YACdzmB,aAAW,aACXvH,QAlCY,SAACzD,GAEzBsf,EAAYtf,EAAMyf,iBAkCN,kBAACrF,GAAA,EAAD,CAAcsX,QAAQ,aAAaC,UAAWtI,EAAQyH,GAAexiB,WAG7E,kBAACkU,GAAA,EAAD,CACI1tB,GAAG,YACHmkB,SAAUA,EACVwJ,aAAW,EACXvM,KAAMqJ,QAAQtG,GACdtC,QAvBQ,WAChB2I,EAAY,QAwBH+J,EAAQ10B,KAAI,SAACg8B,EAAQvtB,GAAT,OACX,kBAACstB,GAAD,CAAaptB,IAAKqtB,EAAOriB,OAAQ/I,WAAYA,EAAYurB,cAAgBA,EAAe3zB,WAAaA,EAAY0zB,sBAAuBA,EAAuBD,4BAA+BU,EAAqBX,OAAQA,EAAQvtB,MAAOA,SArBjO,qCCjH3B,IAEMY,GAAYC,aAAW,SAACP,GAAD,OAC3BkuB,aAAa,CACX9tB,KAAM,CACJZ,QAAS,QAEX2uB,WAAY,CAGVltB,SAAU,IAEZmtB,OAAQ,CACN,mBAAoB,UACpBC,OAAQruB,EAAMquB,OAAOC,OAAS,EAC9BC,WAAYvuB,EAAMwuB,YAAYC,OAAO,CAAC,QAAS,UAAW,CACxDC,OAAQ1uB,EAAMwuB,YAAYE,OAAOC,MACjC/gB,SAAU5N,EAAMwuB,YAAY5gB,SAASghB,iBAGzCC,YAAa,CACXlkB,WArBc,IAsBdrM,MAAM,eAAD,OAtBS,IAsBT,OACLiwB,WAAYvuB,EAAMwuB,YAAYC,OAAO,CAAC,QAAS,UAAW,CACxDC,OAAQ1uB,EAAMwuB,YAAYE,OAAOC,MACjC/gB,SAAU5N,EAAMwuB,YAAY5gB,SAASkhB,kBAGzCC,WAAY,CACVC,YAAa,IAEfC,KAAM,CACJzvB,QAAS,QAGX8uB,OAAQ,CACNhwB,MApCc,IAqCd4wB,WAAY,EACZC,WAAY,UAEdC,WAAY,CACV9wB,MAzCc,IA0CdiwB,WAAYvuB,EAAMwuB,YAAYC,OAAO,QAAS,CAC5CC,OAAQ1uB,EAAMwuB,YAAYE,OAAOC,MACjC/gB,SAAU5N,EAAMwuB,YAAY5gB,SAASkhB,kBAGzCO,YAAY,cACVd,WAAYvuB,EAAMwuB,YAAYC,OAAO,QAAS,CAC5CC,OAAQ1uB,EAAMwuB,YAAYE,OAAOC,MACjC/gB,SAAU5N,EAAMwuB,YAAY5gB,SAASghB,gBAEvCU,UAAW,SACXhxB,MAAO0B,EAAMgK,QAAQ,GAAK,GACzBhK,EAAMuvB,YAAYC,GAAG,MAAQ,CAC5BlxB,MAAO0B,EAAMgK,QAAQ,GAAK,IAG9BylB,QAAQ,aACNjwB,QAAS,OACT0T,WAAY,SACZC,eAAgB,WAChB9S,QAASL,EAAMgK,QAAQ,EAAG,IAEvBhK,EAAM0vB,OAAOD,SAElBE,QAAS,CACPlvB,SAAU,EACVJ,QAASL,EAAMgK,QAAQ,SAmNd4lB,GA9ME,SAAC,GAAQ,IAAD,0BAMnB13B,IAAMoF,WAAWrF,IAJnB6B,EAFqB,EAErBA,SACAmB,EAHqB,EAGrBA,gBACAoB,EAJqB,EAIrBA,2BACAxD,EALqB,EAKrBA,eAGEg3B,EACF/1B,GAAYjB,EACRiB,EAASoI,MAAK,SAACmI,GAAD,OAAOA,EAAEzW,QAAUiF,KAAgB+R,OACjD,GACAzG,EAAU7D,KACVN,EAAQ8vB,eAbS,EAcC53B,IAAMzC,UAAS,GAdhB,mBAchB+c,EAdgB,KAcVud,EAdU,KAwBjBC,EAAW93B,IAAM+3B,YAGrB,SAACtuB,EAAOkU,GAAR,OAAgB,kBAAC,KAAD,eAAMI,SAAUJ,EAAYqa,GAAG,SAAYvuB,OACvDwuB,EAAYj4B,IAAM+3B,YAGtB,SAACtuB,EAAOkU,GAAR,OAAgB,kBAAC,KAAD,eAAMI,SAAUJ,EAAYqa,GAAG,UAAavuB,OASxDqqB,GARS9zB,IAAM+3B,YAGnB,SAACtuB,EAAOkU,GAAR,OAAgB,kBAAC,KAAD,eAAMI,SAAUJ,EAAYqa,GAAG,WAAcvuB,OAC9CzJ,IAAM+3B,YAGrB,SAACtuB,EAAOkU,GAAR,OAAgB,kBAAC,KAAD,eAAMI,SAAUJ,EAAYqa,GAAG,aAAgBvuB,OACnDzJ,IAAM+3B,YAGlB,SAACtuB,EAAOkU,GAAR,OAAgB,kBAAC,KAAD,eAAMI,SAAUJ,EAAYqa,GAAG,UAAavuB,QAe1DoW,GAdW7f,IAAM+3B,YAGnB,SAACtuB,EAAOkU,GAAR,OAAgB,kBAAC,KAAD,eAAMI,SAAUJ,EAAYqa,GAAG,WAAcvuB,OAWhDyuB,eAsDf,OACE,yBAAKhxB,UAAW+E,EAAQ/D,MACtB,kBAACiwB,GAAA,EAAD,MACA,kBAACC,GAAA,EAAD,CACEC,SAAS,QACTnxB,UAAWoxB,aAAKrsB,EAAQiqB,OAAT,gBACZjqB,EAAQ0qB,YAAcrc,KAEzB,kBAACie,GAAA,EAAD,KACE,kBAAC3U,GAAA,EAAD,CACEjpB,MAAM,UACNyU,aAAW,cACXvH,QA5Ge,WACvBgwB,GAAQ,IA4GAW,KAAK,QACLtxB,UAAWoxB,aAAKrsB,EAAQ4qB,WAAT,gBACZ5qB,EAAQ8qB,KAAOzc,KAElB,kBAAC,KAAD,OArEJuF,EAAS4Y,SAAS5qB,SAAS,QACtB,kBAAC2nB,GAAD,MAGL,oCACE,kBAACkD,GAAA,EAAD,CAAaxxB,UAAWC,KAAOwxB,mBAC7B,kBAACC,GAAA,EAAD,CACEC,QAAQ,2BACR3/B,GAAG,qBACH6H,MAAOJ,EACPsb,SAAU9X,EACVtJ,MAAM,SACJkI,GACAnB,GACAA,EAAS7I,KAAI,SAACgI,GACZ,OACE,kBAACmmB,GAAA,EAAD,CAAUxf,IAAK3G,EAAMrF,OAAQqF,MAAOA,EAAMrF,QACvCqF,EAAMrF,WAIdqH,GACC,kBAAC+Q,EAAA,EAAD,CACEjH,QAAQ,OACRzG,MAAO,MACPC,OAAQ,GACRgB,MAAO,CAAE4B,OAAQ,OAAQd,QAAS,SAJpC,2BAUN,kBAACiE,EAAA,EAAD,CAAK0sB,GAAI,GACP,kBAAClsB,EAAA,EAAD,CAAYC,QAAQ,SAASksB,QAAM,GAChCpB,OA0CT,kBAACqB,GAAA,EAAD,CACEnsB,QAAQ,YACR3F,UAAWoxB,aAAKrsB,EAAQmqB,QAAT,oBACZnqB,EAAQirB,WAAa5c,GADT,eAEZrO,EAAQkrB,aAAe7c,GAFX,IAIfrO,QAAS,CACPgtB,MAAOX,cAAI,oBACRrsB,EAAQirB,WAAa5c,GADb,eAERrO,EAAQkrB,aAAe7c,GAFf,MAKb,yBAAKpT,UAAW+E,EAAQsrB,SACtB,kBAAC3T,GAAA,EAAD,CAAY/b,QAjIM,WACxBgwB,GAAQ,KAiIqB,QAApB/vB,EAAMuc,UACL,kBAAC,KAAD,MAEA,kBAAC,KAAD,QAIN,kBAACjS,EAAA,EAAD,MACA,kBAAC,KAAD,KACG,CACC,CACEkT,KAAM,gBACNpsB,GAAI,OACJggC,KAAMpB,EACN/8B,KAAMo+B,MAER,CACE7T,KAAM,uBACNpsB,GAAI,QACJggC,KAAMjB,EACNl9B,KAAMq+B,MASR,CACE9T,KAAM,gBACN4T,KAAMpF,EACN56B,GAAI,QACJ6B,KAAMs+B,OAGRtgC,KAAI,SAACuH,EAAMkH,GACX,OAEE,kBAAC,IAAMmE,SAAP,CAAgBjE,IAAKF,GACnB,kBAAC+W,GAAA,EAAD,CAAUY,QAAM,EAACzS,UAAWpM,EAAK44B,MAC/B,kBAACI,GAAA,EAAD,KAzFhB,SAAkBh5B,GAChB,IAAIi5B,EAAY1Z,EAAS4Y,SAAS5qB,SAASvN,EAAKpH,IAC1CsgC,EAAOl5B,EAAKvF,KAClB,OAAOw+B,EACL,kBAACC,EAAD,CAAMnyB,MAAO,CAAE1M,MAAO,sBAAtB,KAEA,kBAAC6+B,EAAD,MAmF2BC,CAASn5B,IACxB,kBAACke,GAAA,EAAD,CAAcsX,QAASx1B,EAAKglB,aAOtC,kBAAClT,EAAA,EAAD,MACA,kBAAC,GAAD,CAAcqG,WAAY6B,O,OCvRnBof,OA1Bf,WACE,OACE,yBAAKxyB,UAAU,OAEX,kBAAC,GAAD,KACE,kBAAC,IAAD,CAAcyyB,eAAgB,CAAC,SAAUC,aAAc,GACrD,yBAAK1yB,UAAWC,IAAO0K,WACrB,yBAAK3K,UAAWC,IAAO0yB,UACrB,kBAAC,GAAD,OAEF,yBAAK3yB,UAAWC,IAAO2yB,MACrB,kBAAC,GAAD,YCTInW,QACW,cAA7BmC,OAAOjG,SAASka,UAEe,UAA7BjU,OAAOjG,SAASka,UAEhBjU,OAAOjG,SAASka,SAASC,MACvB,2DCZNC,IAASnS,OACP,kBAAC,IAAMoS,WAAP,KACE,kBAAC,GAAD,OAEFjU,SAASC,eAAe,SDiIpB,kBAAmBiU,WACrBA,UAAUC,cAAcC,MACrBp8B,MAAK,SAAAq8B,GACJA,EAAaC,gBAEdn8B,OAAM,SAAAL,GACLnC,QAAQmC,MAAMA,EAAMI,c","file":"static/js/main.f3dcef44.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchContainer\":\"EventSearch_searchContainer__3w0LZ\",\"searchBar\":\"EventSearch_searchBar__3PGaY\",\"searchOptions\":\"EventSearch_searchOptions__3hOQJ\",\"outerSearchBar\":\"EventSearch_outerSearchBar__3wMHs\",\"outerSearchOptions\":\"EventSearch_outerSearchOptions__2tSHp\",\"outerSearchDiscard\":\"EventSearch_outerSearchDiscard__2_Aj4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"header\":\"App_header__3ZZ1n\",\"logo\":\"App_logo__1ItuU\",\"sidePane\":\"App_sidePane__3RleR\",\"main\":\"App_main__3ZkGI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spin\":\"ProvenanceTable_spin__3Jw--\",\"groupHeaderRow\":\"ProvenanceTable_groupHeaderRow__pwvw-\",\"groupHeaderContent\":\"ProvenanceTable_groupHeaderContent__1Zlne\",\"rotate\":\"ProvenanceTable_rotate__XaLA9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ProvenanceIsolatedNodes_wrapper__3cJfW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"TableDataLoader_loader__1QxY3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"SidePane_logo__3vZO1\",\"SelectedTaskInput\":\"SidePane_SelectedTaskInput__1nreK\"};","var map = {\n\t\"./1_manual.png\": 430,\n\t\"./1_supported.png\": 431,\n\t\"./23_manual.png\": 432,\n\t\"./2_supported.png\": 433,\n\t\"./41_manual.png\": 434,\n\t\"./44_manual.png\": 435,\n\t\"./47_manual.png\": 436,\n\t\"./4_manual.png\": 437,\n\t\"./54_manual.png\": 438,\n\t\"./5_supported.png\": 439,\n\t\"./60_manual.png\": 440,\n\t\"./63_manual.png\": 441,\n\t\"./66_manual.png\": 442,\n\t\"./6_supported.png\": 443,\n\t\"./7_manual.png\": 444,\n\t\"./S-task01_adjMatrix.png\": 445,\n\t\"./S-task01_nodeLink.png\": 446,\n\t\"./S-task02_adjMatrix.png\": 447,\n\t\"./S-task02_nodeLink.png\": 448,\n\t\"./S-task03_adjMatrix.png\": 449,\n\t\"./S-task03_nodeLink.png\": 450,\n\t\"./S-task04_adjMatrix.png\": 451,\n\t\"./S-task04_nodeLink.png\": 452,\n\t\"./S-task05_adjMatrix.png\": 453,\n\t\"./S-task05_nodeLink.png\": 454,\n\t\"./S-task06_adjMatrix.png\": 455,\n\t\"./S-task06_nodeLink.png\": 456,\n\t\"./S-task07_adjMatrix.png\": 457,\n\t\"./S-task07_nodeLink.png\": 458,\n\t\"./S-task08_adjMatrix.png\": 459,\n\t\"./S-task08_nodeLink.png\": 460,\n\t\"./S-task09_adjMatrix.png\": 461,\n\t\"./S-task09_nodeLink.png\": 462,\n\t\"./S-task10_adjMatrix.png\": 463,\n\t\"./S-task10_nodeLink.png\": 464,\n\t\"./S-task11_adjMatrix.png\": 465,\n\t\"./S-task11_nodeLink.png\": 466,\n\t\"./S-task12_adjMatrix.png\": 467,\n\t\"./S-task12_nodeLink.png\": 468,\n\t\"./S-task13_adjMatrix.png\": 469,\n\t\"./S-task13_nodeLink.png\": 470,\n\t\"./S-task14_adjMatrix.png\": 471,\n\t\"./S-task14_nodeLink.png\": 472,\n\t\"./S-task15_adjMatrix.png\": 473,\n\t\"./S-task15_nodeLink.png\": 474,\n\t\"./S-task16_adjMatrix.png\": 475,\n\t\"./S-task16_nodeLink.png\": 476,\n\t\"./Screen Shot 2020-09-07 at 3.25.40 PM.png\": 477,\n\t\"./Screen Shot 2020-09-07 at 3.25.55 PM.png\": 478,\n\t\"./Screen Shot 2020-09-07 at 3.28.22 PM.png\": 479,\n\t\"./Screen Shot 2020-09-07 at 3.28.59 PM.png\": 480,\n\t\"./Screen Shot 2020-09-07 at 3.29.22 PM.png\": 481,\n\t\"./Screen Shot 2020-09-07 at 3.29.36 PM.png\": 482,\n\t\"./Screen Shot 2020-09-07 at 3.31.26 PM.png\": 483,\n\t\"./Screen Shot 2020-09-07 at 3.32.07 PM.png\": 484,\n\t\"./Screen Shot 2020-09-07 at 3.32.24 PM.png\": 485,\n\t\"./Screen Shot 2020-09-07 at 3.32.44 PM.png\": 486,\n\t\"./Screen Shot 2020-09-07 at 3.33.05 PM.png\": 487,\n\t\"./Screen Shot 2020-09-07 at 3.33.39 PM.png\": 488,\n\t\"./Screen Shot 2020-09-07 at 3.33.53 PM.png\": 489,\n\t\"./Screen Shot 2020-09-07 at 3.34.49 PM.png\": 490,\n\t\"./Screen Shot 2020-09-07 at 3.35.08 PM.png\": 491,\n\t\"./Screen Shot 2020-09-07 at 3.35.48 PM.png\": 492,\n\t\"./linear regression_supported.png\": 493,\n\t\"./outlier.png\": 494,\n\t\"./outlier_supported.png\": 495,\n\t\"./placeholder.png\": 496,\n\t\"./quadratic regression_supported.png\": 497,\n\t\"./quadratic_regression_supported.png\": 498,\n\t\"./skyline_supported.png\": 499\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 429;","module.exports = __webpack_public_path__ + \"static/media/1_manual.f6623c55.png\";","module.exports = __webpack_public_path__ + \"static/media/1_supported.1cf5a4a3.png\";","module.exports = __webpack_public_path__ + \"static/media/23_manual.7897333e.png\";","module.exports = __webpack_public_path__ + \"static/media/2_supported.1cf5a4a3.png\";","module.exports = __webpack_public_path__ + \"static/media/41_manual.0d1c762a.png\";","module.exports = __webpack_public_path__ + \"static/media/44_manual.4d5eb690.png\";","module.exports = __webpack_public_path__ + \"static/media/47_manual.76bbe7b6.png\";","module.exports = __webpack_public_path__ + \"static/media/4_manual.90daaa28.png\";","module.exports = __webpack_public_path__ + \"static/media/54_manual.14f9d17f.png\";","module.exports = __webpack_public_path__ + \"static/media/5_supported.8d122eba.png\";","module.exports = __webpack_public_path__ + \"static/media/60_manual.41c7e45f.png\";","module.exports = __webpack_public_path__ + \"static/media/63_manual.37f69dd8.png\";","module.exports = __webpack_public_path__ + \"static/media/66_manual.a3c1afce.png\";","module.exports = __webpack_public_path__ + \"static/media/6_supported.79186644.png\";","module.exports = __webpack_public_path__ + \"static/media/7_manual.76272bc9.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task01_adjMatrix.66aa102e.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task01_nodeLink.9aabba82.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task02_adjMatrix.17795797.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task02_nodeLink.0f658255.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task03_adjMatrix.3efe1333.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task03_nodeLink.cabb8101.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task04_adjMatrix.f05a898c.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task04_nodeLink.921a839d.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task05_adjMatrix.dca03e38.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task05_nodeLink.a6bb33b2.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task06_adjMatrix.4c2ded02.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task06_nodeLink.814fb4ef.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task07_adjMatrix.ce25fd21.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task07_nodeLink.69f0ecbd.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task08_adjMatrix.04417e64.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task08_nodeLink.f3b42a5e.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task09_adjMatrix.7bf60f59.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task09_nodeLink.4204dd3a.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task10_adjMatrix.9ddb2123.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task10_nodeLink.a860a4f6.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task11_adjMatrix.54e888d9.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task11_nodeLink.0ae4a7e8.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task12_adjMatrix.f17a7ce4.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task12_nodeLink.85a12057.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task13_adjMatrix.c32867ee.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task13_nodeLink.53d318fb.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task14_adjMatrix.e408facf.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task14_nodeLink.dadf2a19.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task15_adjMatrix.a494df59.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task15_nodeLink.6aa0bedb.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task16_adjMatrix.7362fb6e.png\";","module.exports = __webpack_public_path__ + \"static/media/S-task16_nodeLink.8290467a.png\";","module.exports = __webpack_public_path__ + \"static/media/Screen Shot 2020-09-07 at 3.25.40 PM.d8d82f24.png\";","module.exports = __webpack_public_path__ + \"static/media/Screen Shot 2020-09-07 at 3.25.55 PM.633b223d.png\";","module.exports = __webpack_public_path__ + \"static/media/Screen Shot 2020-09-07 at 3.28.22 PM.44e4fff7.png\";","module.exports = __webpack_public_path__ + \"static/media/Screen Shot 2020-09-07 at 3.28.59 PM.96a54c50.png\";","module.exports = __webpack_public_path__ + \"static/media/Screen Shot 2020-09-07 at 3.29.22 PM.004f7648.png\";","module.exports = __webpack_public_path__ + \"static/media/Screen Shot 2020-09-07 at 3.29.36 PM.94bee4af.png\";","module.exports = __webpack_public_path__ + \"static/media/Screen Shot 2020-09-07 at 3.31.26 PM.51c70f97.png\";","module.exports = __webpack_public_path__ + \"static/media/Screen Shot 2020-09-07 at 3.32.07 PM.063664fd.png\";","module.exports = __webpack_public_path__ + \"static/media/Screen Shot 2020-09-07 at 3.32.24 PM.02e24dee.png\";","module.exports = __webpack_public_path__ + \"static/media/Screen Shot 2020-09-07 at 3.32.44 PM.c2a61fba.png\";","module.exports = __webpack_public_path__ + \"static/media/Screen Shot 2020-09-07 at 3.33.05 PM.5a50933e.png\";","module.exports = __webpack_public_path__ + \"static/media/Screen Shot 2020-09-07 at 3.33.39 PM.b6387344.png\";","module.exports = __webpack_public_path__ + \"static/media/Screen Shot 2020-09-07 at 3.33.53 PM.b5379912.png\";","module.exports = __webpack_public_path__ + \"static/media/Screen Shot 2020-09-07 at 3.34.49 PM.d1040b8a.png\";","module.exports = __webpack_public_path__ + \"static/media/Screen Shot 2020-09-07 at 3.35.08 PM.174eddc3.png\";","module.exports = __webpack_public_path__ + \"static/media/Screen Shot 2020-09-07 at 3.35.48 PM.2dea7c64.png\";","module.exports = __webpack_public_path__ + \"static/media/linear regression_supported.b509637c.png\";","module.exports = __webpack_public_path__ + \"static/media/outlier.c7ab0c77.png\";","module.exports = __webpack_public_path__ + \"static/media/outlier_supported.36a11827.png\";","module.exports = __webpack_public_path__ + \"static/media/placeholder.cc568d38.png\";","module.exports = __webpack_public_path__ + \"static/media/quadratic regression_supported.16ab53a9.png\";","module.exports = __webpack_public_path__ + \"static/media/quadratic_regression_supported.9d74bf64.png\";","module.exports = __webpack_public_path__ + \"static/media/skyline_supported.a61efb24.png\";","import mockAllData from \"./mockData.json\";\nlet local = false;\nlet host = local ? \"http://127.0.0.1:5000\" : \"https://revisit.live\";\n\nexport async function fetchProvenanceDataByNodeId(nodeId) {\n  let res = await postData(host + \"/actions/\" + nodeId);\n  return res;\n}\n\nexport async function getTopPatternsForGroup(groups) {\n  let res = await postData(`${host}/groupPatterns`, {\n    groups: [{ id: \"group1\", participants: groups }],\n  });\n  return res;\n}\n\nexport async function performPrefixSpan(data) {\n  let res = await postData(host + \"/prefix\", data);\n  return res;\n}\nfunction parseActionConfiguration(config) {\n  if (config.elements) {\n    config.elements = config.elements.replace(/FALSE/g, '\"false\"');\n    config.elements = config.elements.replace(/TRUE/g, '\"true\"');\n\n    config.elements = JSON.parse(config.elements);\n  }\n  config.color = config.color.replace(\"/r\", \"\");\n\n  return {\n    color: config.color,\n    name: config.label,\n    id: config._id,\n    elements: config.elements,\n    icon: config.icon,\n    hidden: config.hidden,\n    type: config.type,\n  };\n}\nfunction storeActionConfiguration(configList) {\n  return configList.map((config) => {\n    return {\n      _id: config.id,\n      label: config.name,\n      elements: config.elements ? JSON.stringify(config.elements) : null,\n      icon: config.icon,\n      type: config.type,\n      color: config.color,\n      hidden: config.hidden,\n    };\n  });\n}\nexport async function saveActionConfigurationToDB(updateActionConfigurations) {\n  let res = await postData(\n    host + \"/actionConfigurations\",\n    storeActionConfiguration(updateActionConfigurations)\n  );\n\n  return res;\n}\nexport async function getActionConfigurations() {\n  // TODO hook this up\n  let res = await getData(host + \"/actionConfigurations\");\n  res.data = res.data.map(parseActionConfiguration);\n\n  return res;\n}\nexport async function getTaskOverviewFromServer(taskID = undefined) {\n  //let res = await postData(host + \"/data\");\n  // console.log(\"dywootto\", mockAllData);\n  try {\n    // console.log(mockAPICall(host + \"/data\", mockAllData));\n    // let res = await postData(host + `/data`);\n\n    let res = taskID\n      ? await postData(host + `/overview/${taskID}`)\n      : await postData(host + `/overview/allTasks`);\n\n    // let res = await mockAPICall(host + \"/data\", mockAllData);\n    return res;\n  } catch (err) {\n    console.log(\"dywootto res\", err);\n  }\n}\nexport async function getSchema(tableID) {\n  let res = await getData(`${host}/table/${tableID}/schema`);\n  return res;\n}\nexport async function getTaskDataFromServer(taskID) {\n  let res = await getData(`${host}/data/task/${taskID}`);\n  return res;\n}\n\nexport async function getTimelineFromServer() {\n  // return await setTimeout(async () => {\n  let res = await getData(`${host}/timeline`);\n  //   console.log(\"World!\");\n  return res;\n  //  }, 5000);\n}\n\nexport async function getTaskListFromServer() {\n  let res = await getData(`${host}/taskList`);\n  return res;\n}\n\nexport async function mysql_api(endpoint, body) {\n  let res = await postData(host + endpoint, body);\n  return res;\n}\n\nexport async function postData(uri, postBody, fetchOptions) {\n  // console.log(\"postBody is \", postBody);\n  let defaultHeaders = {\n    url: uri,\n    // mode: \"no-cors\",\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=UTF-8\",\n    },\n    body: JSON.stringify(postBody),\n  };\n  // console.log(\"post headers\", defaultHeaders);\n  const val = await completePromise(uri, defaultHeaders);\n  // console.log(\"dywootto\", val);\n  return val;\n}\n\nexport async function getData(uri, fetchOptions) {\n  let defaultHeaders = {\n    headers: {\n      Accept: \"application/json\",\n    },\n  };\n  return await completePromise(uri, defaultHeaders);\n}\n\nexport async function completePromise(uri, requestOptions) {\n  let response;\n  try {\n    response = await fetch(uri, requestOptions);\n    // console.log(response.text())\n    // console.log(\"inpromise\", response);\n    // console.log(\"fetched\", response);\n    response.data = await response.json();\n    response.success = response.ok;\n  } catch (err) {\n    // console.log(response.text())\n\n    console.log(\"error\", err);\n    throw err;\n  }\n  return response;\n}\n//let res = await mockAPICall(\"www.example.com\", { work: \"yeah\" }); you can mock out api calls using this\n\nexport async function mockAPICall(\n  url,\n  returnData,\n  options = {\n    shouldError: false,\n    timeout: 2000,\n  }\n) {\n  console.log(\"in mockAPI\");\n\n  const { shouldError, timeout } = options;\n  console.log(\"in mockAPI\");\n  return await new Promise((resolution, rejection) => {\n    setTimeout(() => {\n      if (shouldError) {\n        rejection({\n          url,\n          success: false,\n          error: `mockAPICall error`,\n        });\n      } else {\n        console.log(\"dywootto in res\", returnData, url);\n        resolution({\n          url,\n          success: true,\n          data: returnData,\n        });\n      }\n    }, timeout);\n  });\n}\n","import React, {\n    useState,\n    useEffect\n} from 'react';\n\nexport function useFetchAPIData(fetchingFunc, dependencies) {\n    const [isLoading, setIsLoading] = useState(null);\n    const [errorMessage, setErrorMessage] = useState(null);\n    const [fetchedData, setFetchedData] = useState(null);\n\n    const onLoadingStart = () => {\n        setIsLoading(true);\n        setErrorMessage(\"\");\n    };\n\n    const onError = (error) => {\n        setIsLoading(false);\n        setErrorMessage(error);\n    };\n\n    const onDataFetched = (data) => {\n        setFetchedData(data);\n        setIsLoading(false);\n    };\n\n    useEffect(() => {\n        onLoadingStart();\n        fetchingFunc()\n            .then(\n                (result) => {\n                    const success = result && result.success;\n                    if (success && result.data) {\n                        //const fetchData = result && result.data;\n                        onDataFetched(result.data);\n                    } else {\n                        onError(`Error occured obtaining data from server`);\n                    }\n                },\n                (error) => {\n                    onError(`Error occured during data fetch ${error?.message}`);\n                }\n            )\n            .catch((error) => {\n                onError(`Error occured after data fetched ${error?.message}`);\n            });\n    }, [...dependencies]);\n    return [isLoading, errorMessage, fetchedData];\n}","import React from \"react\";\nimport Add from \"@material-ui/icons/Add\";\nimport PanTool from \"@material-ui/icons/PanTool\";\nimport Sort from \"@material-ui/icons/Sort\";\nimport FiberManualRecordIcon from \"@material-ui/icons/FiberManualRecord\";\nimport RadioButtonUncheckedIcon from \"@material-ui/icons/RadioButtonUnchecked\";\nimport Search from \"@material-ui/icons/Search\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport Start from \"@material-ui/icons/Star\";\nimport PlayArrowIcon from \"@material-ui/icons/PlayArrow\";\nimport StopIcon from \"@material-ui/icons/Stop\";\nimport CheckBoxOutlineBlankIcon from \"@material-ui/icons/CheckBoxOutlineBlank\";\nimport RemoveCircle from \"@material-ui/icons/RemoveCircle\";\nimport TabUnselected from \"@material-ui/icons/TabUnselected\";\nimport Crop75 from \"@material-ui/icons/Crop75\";\nimport AspectRatio from \"@material-ui/icons/AspectRatio\";\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\nimport SelectAll from \"@material-ui/icons/SelectAll\";\nimport GetApp from \"@material-ui/icons/GetApp\";\nimport Brush from \"@material-ui/icons/Brush\";\nimport DragHandleIcon from '@material-ui/icons/DragHandle';\n\nexport const iconMapping = {\n  Add,\n  PanTool,\n  Sort,\n  FiberManualRecordIcon,\n  RadioButtonUncheckedIcon,\n  Search,\n  Clear,\n  Start,\n  PlayArrowIcon,\n  StopIcon,\n  CheckBoxOutlineBlankIcon,\n  RemoveCircle,\n  TabUnselected,\n  Crop75,\n  AspectRatio,\n  VisibilityOff,\n  SelectAll,\n  GetApp,\n  Brush,\n  DragHandleIcon\n};\nconst colors = [\n  \"#c6e0d6\",\n  \"#8fcab4\",\n  \"#67aca9\",\n  \"#5d83d2\",\n  \"#6b56dd\",\n  \"#9e93a1\",\n];\n// generated  from https://leonardocolor.io/?colorKeys=%235b89d2%2C%235dbb9c%2C%23723ce7%2C%238e18b9&base=ffffff&ratios=1.4%2C1.64%2C2.12%2C2.80%2C3.71%2C4.88%2C6.35%2C9.00&mode=CAM02\nconst answerSelectColor = colors[0];\nconst dragColor = colors[1];\nconst sortColor = colors[2];\nconst selectColor = colors[3];\nconst searchColor = colors[4];\nconst clearColor = colors[5];\n\nexport const eventMappingList = [\n  {\n    icon: \"PlayArrowIcon\",\n    color: \"#d1d1d1\",\n    id: \"startedProvenance\",\n    name: \"Began Task\",\n    type: \"raw\",\n    hidden: false,\n  },\n\n  {\n    icon: \"StopIcon\",\n    color: \"#d1d1d1\",\n    id: \"Finished Task\",\n    name: \"Finished Task\",\n    type: \"raw\",\n    hidden: false,\n  },\n  {\n    icon: \"Add\",\n    color: answerSelectColor,\n    id: \"Select Answer\",\n    name: \"Select Answer\",\n    type: \"raw\",\n    hidden: false,\n  },\n  {\n    icon: \"PanTool\",\n    color: dragColor,\n    name: \"Dragged Node\",\n    id: \"Dragged Node\",\n    type: \"raw\",\n    hidden: false,\n  },\n  {\n    icon: \"Sort\",\n    color: sortColor,\n    id: \"sort\",\n    name: \"Sort\",\n    type: \"raw\",\n    hidden: false,\n  },\n  {\n    icon: \"FiberManualRecordIcon\",\n    color: selectColor,\n    id: \"attrRow\",\n    name: \"Select Node [Attr Row]\",\n    type: \"raw\",\n    hidden: false,\n  },\n  {\n    icon: \"RadioButtonUncheckedIcon\",\n    color: answerSelectColor,\n    id: \"Unselect Answer\",\n    name: \"Unselect Answer\",\n  },\n  {\n    icon: \"FiberManualRecordIcon\",\n    color: selectColor,\n    id: \"Select Node\",\n    name: \"Selected Node\",\n    type: \"raw\",\n    hidden: false,\n  },\n  {\n    icon: \"FiberManualRecordIcon\",\n    color: selectColor,\n    id: \"rowLabel\",\n    name: \"Select Node[rowLabel]\",\n  },\n  {\n    icon: \"FiberManualRecordIcon\",\n    color: selectColor,\n    id: \"colLabel\",\n    name: \"Neighbor Highlight\",\n    type: \"raw\",\n    hidden: false,\n  },\n  {\n    icon: \"Search\",\n    color: searchColor,\n    id: \"search\",\n    name: \"Search\",\n    type: \"raw\",\n    hidden: false,\n  },\n  {\n    icon: \"FiberManualRecordIcon\",\n    color: selectColor,\n    id: \"cell\",\n    name: \"Edge Select\",\n    type: \"raw\",\n    hidden: false,\n  },\n\n  {\n    icon: \"RadioButtonUncheckedIcon\",\n    color: selectColor,\n    id: \"Unselect Node\",\n    name: \"Unselect Node\",\n    type: \"raw\",\n    hidden: false,\n  },\n  {\n    icon: \"Clear\",\n    color: clearColor,\n    id: \"clear\",\n    name: \"Clear Selections\",\n    type: \"raw\",\n    hidden: false,\n  },\n  {\n    icon: \"Clear\",\n    color: clearColor,\n    id: \"clearGroup\",\n    name: \"Cleared Group\",\n    type: \"group\",\n    hidden: false,\n    elements: [\n      {\n        icon: \"Clear\",\n        color: clearColor,\n        id: \"clear\",\n        name: \"Clear Selections\",\n        type: \"raw\",\n        hidden: false,\n      },\n      {\n        icon: \"RadioButtonUncheckedIcon\",\n        color: selectColor,\n        id: \"Unselect Node\",\n        name: \"Unselect Node\",\n        type: \"raw\",\n        hidden: false,\n      },\n    ],\n  },\n];\n","//@ts-nocheck\nimport React, { useState, useEffect, useMemo } from \"react\";\nimport * as d3 from \"d3\";\nimport _ from \"lodash\";\nimport {\n  getTaskOverviewFromServer,\n  getTaskDataFromServer,\n  getActionConfigurations,\n  saveActionConfigurationToDB,\n  getTaskListFromServer,\n  getTimelineFromServer,\n  fetchProvenanceDataByNodeId,\n} from \"../fetchers/fetchMocks.js\";\nimport { useFetchAPIData } from \"../hooks/hooks\";\nimport { eventMappingList } from \"./eventMapping\";\n\nfunction addIdsToNodes(nodes) {\n  return nodes.map((node, index) => {\n    let dataObject;\n    if (index % 10 === 0) {\n      dataObject = { dataID: \"3c9ea11f-2a0b-46ee-9dc0-835d12561281\" };\n    } else if (index % 10 === 1) {\n      dataObject = { dataID: \"e3798172-df56-4124-8326-435b81ccb7a5\" };\n    } else if (index % 10 === 2) {\n      dataObject = { dataID: \"02a5a389-bc6b-4747-a1fb-f722158c66c6\" };\n    } else if (index % 10 === 3) {\n      dataObject = { dataID: \"698c9c66-63d5-4447-a4e6-7ba05e4aa5e9\" };\n    } else if (index % 10 === 4) {\n      dataObject = { dataID: \"74ed9ecf-e77b-4f45-8831-db220f5e2057\" };\n    } else if (index % 10 === 5) {\n      dataObject = { dataID: \"29c7a143-eac6-405e-ae66-e650754bb525\" };\n    } else if (index % 10 === 6) {\n      dataObject = { dataID: \"c78a8578-a5fc-411b-bb20-a6ebf9702273\" };\n    } else if (index % 10 === 7) {\n      dataObject = { dataID: \"f822c69d-1a7f-460a-80d5-58d24082fcfa\" };\n    } else if (index % 10 === 8) {\n      dataObject = { dataID: \"ff77ab34-ace1-498e-9367-beb4b72c9ea6\" };\n    } else {\n      dataObject = { dataID: \"1de36df0-5bf8-48a8-ad37-17641ada498f\" };\n    }\n    return Object.assign(node, dataObject);\n  });\n}\nlet nodes1 = [\n  { id: \"49607\", name: \"startedProvenance\", time: 0 },\n  { id: \"49608\", name: \"sort\", time: 0.133333 },\n  { id: \"49609\", name: \"sort\", time: 0.15 },\n  { id: \"49610\", name: \"sort\", time: 0.183333 },\n  { id: \"49611\", name: \"sort\", time: 0.2 },\n  { id: \"49612\", name: \"sort\", time: 0.216667 },\n  { id: \"49613\", name: \"sort\", time: 0.233333 },\n  { id: \"49614\", name: \"search\", time: 0.566667 },\n  { id: \"49615\", name: \"answerBox\", time: 0.716667 },\n  { id: \"49616\", name: \"Finished Task\", time: 0.733333 },\n];\nconst commonProps = {\n  condition: \"nodeLink\",\n  taskId: \"S-task13\",\n  participantId: \"545d6768fdf99b7f9fca24e3\",\n};\n\nconst ProvenanceDataContext = React.createContext({});\nfunction compileActionListToHashTable(list) {\n  let newActionObject = {};\n  list.forEach((item) => {\n    let newObject = {};\n    newObject[item.id] = item;\n    Object.assign(newActionObject, newObject);\n  });\n  return newActionObject;\n}\nexport const ProvenanceDataContextProvider = ({ children }) => {\n  // console.trace('calling provenanceDataContextProvider')\n  const [selectedTaskId, setSelectedTaskId] = React.useState(null);\n\n  // state variable used to trigger an update of action configuration list\n  const [queryCount, setQueryCount] = useState(0);\n  // console.log(\"queryCount\", queryCount);\n  const [\n    loadingActionConfigurations,\n    errorLoadingActionConfigurations,\n    actionConfigurationsFromServer,\n  ] = useFetchAPIData(async () => {\n    const value = await getActionConfigurations();\n    return value;\n  }, [queryCount]);\n\n  useEffect(() => {\n    // filter out events like \"browsed away\"\n    if (actionConfigurationsFromServer) {\n      const actionConfigurationsFiltered = actionConfigurationsFromServer.filter(\n        (config) => config.type !== \"event\"\n      );\n      setActionConfigurationsListInternal(actionConfigurationsFiltered);\n    }\n  }, [actionConfigurationsFromServer]);\n\n  /**\n   * Determines if a structural change occured when editing action configurations.\n   * A structural change is a change that would impact any event sequence dependent\n   * calculations (like event pattern mining)\n   * @param old\n   * @param */\n\n  function isStructuralActionChange(oldActions, newActions) {\n    // if the number of action configurations, then it is a structural change\n    if (oldActions.length !== newActions.length) {\n      return true;\n    }\n\n    // if elements, hidden, or id's are different for any action, change is structural\n    for (let i = 0; i < oldActions.length; i++) {\n      let difference = Object.keys(oldActions[i]).filter(\n        (k) =>\n          JSON.stringify(oldActions[i][k]) !== JSON.stringify(newActions[i][k])\n      );\n      for (let innerIndex = 0; innerIndex < difference.length; innerIndex++) {\n        if (\n          difference[innerIndex] === \"elements\" ||\n          difference[innerIndex] === \"hidden\" ||\n          difference[innerIndex] === \"id\"\n        ) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n  // console.log(\"current query count\", queryCount);\n  function setActionConfigurationsList(newActionConfigurationsList) {\n    // console.log(\n    //   \"in setActionConfgiuration about to save\",\n    //   newActionConfigurationsList\n    // );\n    saveActionConfigurationToDB(newActionConfigurationsList).then(\n      (response) => {\n        // if a structural change, refetch, else just reset\n        if (\n          isStructuralActionChange(\n            actionConfigurationsList,\n            newActionConfigurationsList\n          )\n        ) {\n          // console.log(\"IN STRUCTURAL\");\n          setQueryCount(queryCount + 1);\n        } else {\n          // console.log(\"IN SUPERFICIAL\");\n          setActionConfigurationsListInternal(newActionConfigurationsList);\n        }\n      }\n    );\n  }\n  const [\n    actionConfigurationsList,\n    setActionConfigurationsListInternal,\n  ] = useState([]);\n  // console.log(\"final list\", actionConfigurationsList);\n  const [actionConfigurations, setActionConfigurations] = useState(\n    compileActionListToHashTable(eventMappingList)\n  );\n  useEffect(() => {\n    setActionConfigurations(\n      compileActionListToHashTable(actionConfigurationsList)\n    );\n  }, [actionConfigurationsList]);\n\n  const [data, setData] = useState();\n  const [fetchedInitialTask, setFetchedInitialTask] = useState(false);\n  const [taskList, setTaskList] = useState();\n  const [timelineData, setTimelineData] = useState();\n  const [currentlyVisitedNodes, setCurrentlyVisitedNodes] = React.useState(\n    null\n  );\n\n  // const [metrics,setMetrics] = React.useState()\n\n  let conditions;\n  let metrics;\n\n  if (data) {\n    conditions = data.conditions;\n    metrics = data.metrics;\n  }\n\n  let [homeTaskSort, setHomeTaskSort] = useState();\n\n  async function handleProvenanceNodeClick(node) {\n    console.log(\"dywootto handle provenance node click\", node);\n\n    // hardcoded data for now. ideally, we'll have the event id to be able to select on.\n    const participantId = \"545d6768fdf99b7f9fca24e3\";\n    let fetched = await fetchProvenanceDataByNodeId(node.id);\n    if (fetched.success) {\n      const processedNodes = fetched.data.map((node) => {\n        return {\n          id: node.id,\n          name: node.actionID,\n          time: node.elapsedTime,\n          nodeID: node.nodeID,\n          url: node.url,\n          participantId: node.participantID,\n          uniqueId: node.uniqueID,\n        };\n      });\n      setCurrentlyVisitedNodes(processedNodes);\n    }\n\n    // select all of that provenance graph.\n    //const promise = mysql_api(`/actions/${participantId}/${taskId}`);\n\n    //promise.then((resolved) => {\n    //  console.log(\"resolvedclick\", resolved);\n    //alert(`queried (skinny) provenance from db ${resolved.data}`);\n\n    // rehydrate provenance graph\n    // render vis using that provenance graph\n    //});\n  }\n\n  // get taskList from server;\n  let [, loadingTaskList, taskListFromServer] = useFetchAPIData(async () => {\n    console.log(\"requesting tasklist from server \");\n    return await getTaskListFromServer();\n  }, []);\n  //\n  useEffect(() => {\n    if (taskListFromServer) {\n      setSelectedTaskId(taskListFromServer[0].taskID);\n    }\n  }, [taskListFromServer]);\n\n  // get task overview data from server for one task;\n  let [isLoading, isError, dataFromServer] = useFetchAPIData(async () => {\n    console.log(\"requesting task overview for \", taskList[0]);\n    return await getTaskOverviewFromServer(taskList[0].taskID);\n  }, [taskList, queryCount]);\n\n  //  get timeline from server;\n  let [, , timelineDataFromServer] = useFetchAPIData(async () => {\n    console.log(\"requesting timeline data from server \");\n    return await getTimelineFromServer();\n  }, []);\n\n  // console.log(isLoading, isError, dataFromServer);\n  /*[{\"_id\":\"startedProvenance\",\"actionID\":\"startedProvenance\",\"category\":\"Study\\r\",\"condition\":\"nodeLink\",\"elapsedTime\":0,\"id\":1,\"label\":\"Start Task\",\"participantID\":\"545d6768fdf99b7f9fca24e3\",\"target\":null,\"taskID\":\"S-task01\",\"time\":\"Wed, 28 Aug 2019 00:51:18 GMT\",\"type\":\"action\"},{\"_id\":\"Hard Selected A Node\",\"actionID\":\"Hard Selected a Node\",\"category\":\"Answer\\r\",\"condition\":\"nodeLink\",\"elapsedTime\":0.283333,\"id\":2,\"label\":\"Select\",\"participantID\":\"545d6768fdf99b7f9fca24e3\",\"target\":null,\"taskID\":\"S-task01\",\"time\":\"Wed, 28 Aug 2019 00:51:35 GMT\",\"type\":\"action\"},{\"_id\":\"Hard Unselected A Node\",\"actionID\":\"Hard Unselected a Node\",\"category\":\"Answer\\r\",\"condition\":\"nodeLink\",\"elapsedTime\":0.316667,\"id\":3,\"label\":\"Unselect\",\"participantID\":\"545d6768fdf99b7f9fca24e3\",\"target\":null,\"taskID\":\"S-task01\",\"time\":\"Wed, 28 Aug 2019 00:51:37 GMT\",\"type\":\"action\"},{\"_id\":\"Hard Selected A Node\",\"actionID\":\"Hard Selected a Node\",\"category\":\"Answer\\r\",\"condition\":\"nodeLink\",\"elapsedTime\":0.45,\"id\":2,\"label\":\"Select\",\"participantID\":\"545d6768fdf99b7f9fca24e3\",\"target\":null,\"taskID\":\"S-task01\",\"time\":\"Wed, 28 Aug 2019 00:51:45 GMT\",\"type\":\"action\"},{\"_id\":\"Finished Task\",\"actionID\":\"Finished Task\",\"category\":\"Study\\r\",\"condition\":\"nodeLink\",\"elapsedTime\":0.666667,\"id\":4,\"label\":\"Finish Task\",\"participantID\":\"545d6768fdf99b7f9fca24e3\",\"target\":null,\"taskID\":\"S-task01\",\"time\":\"Wed, 28 Aug 2019 00:51:58 GMT\",\"type\":\"action\"}]*/\n\n  useEffect(() => {\n    console.log(\"timeline data from server\", timelineDataFromServer);\n    setTimelineData(timelineDataFromServer);\n  }, [timelineDataFromServer]);\n\n  useEffect(() => {\n    if (dataFromServer) {\n      setData(dataFromServer);\n      setFetchedInitialTask(!fetchedInitialTask);\n    }\n  }, [dataFromServer]);\n\n  //get task overviewdata for all remaining tasks\n  // useFetchAPIData(async () => {\n  //   console.log(\"loop test for task overviews\", fetchedInitialTask, taskList);\n  //   taskList.map((task) => {\n  //     getTaskOverviewFromServer(task).then((newTaskData) => {\n  //       let newData = { ...data };\n  //       // console.log(newData)\n  //       // console.log(newTaskData.data.tasks[0]);\n  //       newData.tasks.push(newTaskData.data.tasks[0]);\n  //       setData(newData);\n  //     });\n  //   });\n  // }, [fetchedInitialTask]);\n\n  // // get task overviewdata for all remaining tasks\n  useFetchAPIData(async () => {\n    if (dataFromServer) {\n      console.log(\"get remaining tasks \");\n      getTaskOverviewFromServer().then((newTaskData) => {\n        console.log(\"newTaskData\", newTaskData.data);\n        setData(newTaskData.data);\n      });\n    }\n  }, [dataFromServer]);\n\n  useEffect(() => {\n    console.log(\"taskList from server\", taskListFromServer);\n    setTaskList(taskListFromServer);\n  }, [taskListFromServer]);\n\n  //State\n  function timeout(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  const handleTagCreation = async (participantID, taskID, tag, action) => {\n    await timeout(200);\n\n    return tag;\n  };\n  let [taskSort, setTaskSort] = useState(\"name\");\n\n  /*const [allProvenanceData, setAllProvenanceData] = useState(() =>\n    processRawProvenanceData(initProvData) \n  );*/\n\n  const [currentTaskData, setCurrentTaskData] = React.useState([]);\n\n  let [\n    isTaskLoading,\n    isTaskError,\n    taskDataFromServer,\n  ] = useFetchAPIData(async () => {\n    const response = await getTaskDataFromServer(selectedTaskId);\n    response.data = response.data.map((datum) => {\n      // console.log(datum.sequence);\n\n      // TODO: Fix this from being null\n      try {\n        datum.sequence = JSON.parse(`[${datum.sequence}]`);\n      } catch (err) {\n        console.error(\n          `[Provenance Data Context] Error Parsing ${datum.participantID}'s event sequence. This is likely caused by the sequence being > 16k characters.`\n        );\n        datum.sequence = [];\n      }\n      return datum;\n    });\n    return response;\n  }, [selectedTaskId, queryCount]);\n\n  useEffect(() => {\n    setCurrentTaskData(taskDataFromServer);\n  }, [taskDataFromServer]);\n\n  function handleChangeSelectedTaskId(event) {\n    setSelectedTaskId([event.target.value]);\n  }\n\n  return (\n    <ProvenanceDataContext.Provider\n      value={{\n        currentTaskData,\n        handleChangeSelectedTaskId,\n        selectedTaskId,\n        data,\n        loadingTaskList,\n        taskList,\n        timelineData,\n        metrics,\n        setTaskSort,\n        homeTaskSort,\n        setHomeTaskSort,\n        conditions,\n        handleTagCreation,\n        handleProvenanceNodeClick,\n        currentlyVisitedNodes,\n        setCurrentlyVisitedNodes,\n        actionConfigurations,\n        setActionConfigurationsList,\n        actionConfigurationsList,\n      }}>\n      {children}\n    </ProvenanceDataContext.Provider>\n  );\n};\n\nfunction calculateRelativeProvGraph(taskPerformance, maxTime) {\n  let totalTime =\n    new Date(taskPerformance.endTime) - new Date(taskPerformance.startTime);\n  let scale = maxTime / totalTime;\n  taskPerformance[\"totalTime\"] = totalTime;\n  taskPerformance[\"relativeStartTime\"] = 0;\n  taskPerformance[\"relativeStopTime\"] = 1 / scale;\n  if (taskPerformance[\"provenance\"]) {\n    taskPerformance[\"provenance\"] = taskPerformance[\"provenance\"].map(\n      (node) => {\n        node[\"percentTime\"] =\n          (new Date(node[\"time\"]) - new Date(taskPerformance[\"startTime\"])) /\n          totalTime;\n        node[\"relativeTime\"] = node[\"percentTime\"] / scale;\n\n        return node;\n      }\n    );\n  } else {\n    taskPerformance[\"provenance\"] = [];\n  }\n\n  return taskPerformance;\n}\nfunction processRawProvenanceData(unrelativeProvenanceData) {\n  //remove element with no data\n  unrelativeProvenanceData = unrelativeProvenanceData.filter(\n    (d) => Object.keys(d.data).length > 0\n  );\n\n  //remove elements with no, or messed up provenance (more than one started prov event)\n  unrelativeProvenanceData = unrelativeProvenanceData.filter((d) => {\n    let tasks = Object.keys(d.data).filter((t) => t.includes(\"task\"));\n\n    return tasks.reduce((acc, task) => {\n      if (!d.data[task].provenance) {\n        //participant has no provenance for a certain task.\n        return false;\n      } else {\n        //element has more than on 'startedProvenance' event in the same task.\n        return (\n          acc &&\n          d.data[task].provenance.filter((p) => p.event == \"startedProvenance\")\n            .length == 1\n        );\n      }\n    }, true);\n  });\n\n  // console.trace('calling process Raw prov data')\n  const taskIds = [\n    \"S-task01\",\n    \"S-task02\",\n    \"S-task03\",\n    \"S-task04\",\n    \"S-task05\",\n    \"S-task06\",\n    \"S-task07\",\n    \"S-task08\",\n    \"S-task09\",\n    \"S-task10\",\n    \"S-task11\",\n    \"S-task12\",\n    \"S-task13\",\n    \"S-task14\",\n    \"S-task15\",\n    \"S-task16\",\n  ];\n\n  const relativeProvenanceData = _.cloneDeep(unrelativeProvenanceData);\n\n  taskIds.forEach((taskId) => {\n    let longestTimeForTask = d3.max(unrelativeProvenanceData, (participant) => {\n      if (\n        participant.data &&\n        participant.data[taskId]?.startTime &&\n        participant.data[taskId]?.endTime\n      ) {\n        return (\n          new Date(participant.data[taskId].endTime) -\n          new Date(participant.data[taskId].startTime)\n        ); // minutes->seconds->ms\n      }\n      return 0;\n    });\n    // console.log(\"longest time\", longestTimeForTask);\n    unrelativeProvenanceData.forEach((participant, index) => {\n      if (participant.data && participant.data[taskId]) {\n        relativeProvenanceData[index].data[taskId] = calculateRelativeProvGraph(\n          participant.data[taskId],\n          longestTimeForTask\n        );\n        //create id field in each provenance event (that doesn't change with edits)\n        participant.data[taskId].provenance.map((p) => (p.id = p.event));\n      } else {\n        delete relativeProvenanceData[index][taskId];\n        // console.log(\"NO DATA\", relativeProvenanceData[index], taskId);\n      }\n    });\n  });\n\n  return relativeProvenanceData;\n}\n\nexport default ProvenanceDataContext;\n","//@ts-nocheck\nimport React, { useContext } from \"react\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport Fade from \"@material-ui/core/Fade\";\nimport styles from \"./ProvenanceIsolatedNodes.module.css\";\nimport ProvenanceDataContext from \"./ProvenanceDataContext\";\nimport Icon from \"@material-ui/core/Icon\";\nimport { iconMapping } from \"./eventMapping\";\nimport CheckBoxOutlineBlankIcon from \"@material-ui/icons/CheckBoxOutlineBlank\";\n\nconst ProvenanceIsolatedNodes = ({\n  nodes,\n  selectedItemId,\n  hoveredItemId,\n  handleHover = ()=>{}, //console.log,\n  handleProvenanceNodeClick = ()=>{}, //console.log,\n}) => {\n  // console.log(\"dywootto\", nodes);\n  function determineItemOpacity(node, selectedItemId, hoveredItemId) {\n    let opacity;\n    if (selectedItemId && node.id !== selectedItemId) {\n      opacity = 0.1;\n    } else if (hoveredItemId && node.id !== hoveredItemId) {\n      opacity = 0.1;\n    }\n    if (node.id === hoveredItemId || node.id === selectedItemId) {\n      opacity = 1;\n    }\n    return opacity;\n  }\n\n  return (\n    <div\n      className={styles.wrapper}\n      style={{ display: \"flex\", flexDirection: \"row\" }}>\n      {nodes.map((node, index) => {\n        const opacity = determineItemOpacity(\n          node,\n          selectedItemId,\n          hoveredItemId\n        ); //node.id === selectedItemId ? 1 : 0.5;\n        return (\n          <div\n            key={index}\n            style={{ opacity }}\n            onMouseEnter={() => handleHover(node.id)}\n            onMouseLeave={() => handleHover(null)}\n            onClick={() => handleProvenanceNodeClick(node)}>\n            <IsolatedNode node={node}></IsolatedNode>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport const IsolatedNode = ({ node, configToUse }) => {\n  let { actionConfigurations } = useContext(ProvenanceDataContext);\n\n  // if provided a config to use, use that (used for volatile config changes before they are saved)\n  if (configToUse) {\n    actionConfigurations = configToUse;\n  }\n\n  const eventMapping = actionConfigurations;\n  // console.log(\"eventMapping\", eventMapping, node);\n  let eventMap = eventMapping[node.name]\n    ? eventMapping[node.name]\n    : { icon: \"Add\", color: \"#fff\" };\n  //add check for custom icons for newly created events;\n  let ProvenanceIcon = iconMapping[eventMap.icon];\n  if (!ProvenanceIcon) {\n    ProvenanceIcon = () => <g></g>;\n  }\n  // console.log(\"in rerender\", iconMapping, eventMap.icon, ProvenanceIcon);\n  // node.event !== \"startedProvenance\" &&\n  //   node.event !== \"Finished Task\" ?\n  return (\n    <Tooltip\n      TransitionComponent={Fade}\n      TransitionProps={{ timeout: 600 }}\n      title={`${node.name} ${node.count ? `[${node.count}]` : \"\"}`}\n      PopperProps={{\n        popperOptions: {\n          modifiers: {\n            offset: {\n              enabled: true,\n              offset: \"0px, -6px\",\n            },\n          },\n        },\n      }}\n      arrow>\n      <svg width={34} height={34}>\n        <rect\n          x={0}\n          y={0}\n          width={30}\n          height={30}\n          rx={5}\n          fill={eventMap.color}\n          opacity={node.scale || 1}></rect>\n        <g transform={`translate(7,5)`}>\n          {<ProvenanceIcon width={16} height={16} />}\n        </g>\n      </svg>\n    </Tooltip>\n  );\n  // : (\n  //   <div></div>\n  // );\n};\n\nexport default ProvenanceIsolatedNodes;\n","import React, { useState, useEffect, useContext } from \"react\";\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\n\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Box from \"@material-ui/core/Box\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport TrendingFlatIcon from \"@material-ui/icons/TrendingFlat\";\nimport Divider from \"@material-ui/core/Divider\";\nimport { createMuiTheme, MuiThemeProvider } from \"@material-ui/core/styles\";\n\nimport Skeleton from \"@material-ui/lab/Skeleton\";\n\nimport Fab from \"@material-ui/core/Fab\";\n\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\n\nimport Tagger from \"../components/Tagger\";\n\nimport SortIcon from \"@material-ui/icons/Sort\";\n\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\n\nimport ListItemText from \"@material-ui/core/ListItemText\";\n\nimport { useFetchAPIData } from \"../hooks/hooks\";\n\n// import * as PouchDB from 'pouchdb-browser';\n\nimport * as d3 from \"d3\";\n\nimport ProvenanceDataContext from \"../components/ProvenanceDataContext\";\nimport ProvenanceIsolatedNodes from \"../components/ProvenanceIsolatedNodes\";\n\nimport Grid, { GridSpacing } from \"@material-ui/core/Grid\";\nimport { pathToFileURL } from \"url\";\nimport { keys } from \"mobx\";\nimport { Sort } from \"@material-ui/icons\";\n\nlet rowHeight = 300;\nlet figureWidth = 572;\n\nconst theme = createMuiTheme({\n  overrides: {\n    MuiTableCell: {\n      root: {\n        padding: 10,\n      },\n    },\n  },\n});\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 275,\n    flexGrow: 1,\n  },\n  table: {\n    padding: \"10px\",\n  },\n  sortable: {\n    cursor: \"pointer\",\n    backgroundColor: \"rgb(240,240,240)\",\n  },\n  sorted: {\n    fill: \"#5d83d2\",\n  },\n  media: {\n    width: figureWidth,\n    height: rowHeight,\n    // border: '1px solid lightgray'\n  },\n  condition: {\n    fontSize: \"1em\",\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\",\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\nvar groupBy = function (xs, key) {\n  return xs.reduce(function (rv, x) {\n    (rv[x[key]] = rv[x[key]] || []).push(x);\n    return rv;\n  }, {});\n};\n\nfunction scale(width, maxValue) {\n  return d3.scaleLinear().range([10, width]).domain([0, maxValue]);\n}\n\nconst accScale = scale(40, 1);\nconst timeScale = scale(40, 3.59);\n\nexport const BarChart = (props) => {\n  const {\n    allData,\n    hoveredRow,\n    hoveredRowColor,\n    metric,\n    vert = false,\n    size = { width: 150, height: 200 },\n  } = props;\n\n  let data = allData.find((m) => m.metric == metric);\n  if (data.type == \"text\" || data.type == \"longtext\") {\n    let width = vert ? size.width : 900;\n    let height = vert ? size.height : 80;\n\n    let maxBarHeight = vert ? 20 : height - 10;\n\n    let varsToPlot = Object.entries(data.count)\n      .sort((a, b) => (a[1] > b[1] ? -1 : 1))\n      .slice(0, 20);\n\n    //compute scale for data;\n    let yDomain = varsToPlot.map((v) => v[0]);\n    let xDomain = d3.extent(varsToPlot.map((v) => v[1]));\n\n    let xScale = d3.scaleLinear().domain(xDomain).range([0, maxBarHeight]);\n\n    let yScale = d3\n      .scaleBand()\n      .domain(yDomain)\n      .range([0, height])\n      .padding(0.65);\n\n    let barWidth = yScale.bandwidth();\n\n    let hoveredStats = hoveredRow\n      ? hoveredRow.stats.find((m) => m.metric == metric)\n      : undefined;\n    let hoveredVarsToPlot = hoveredStats\n      ? Object.entries(hoveredStats.count)\n          .sort((a, b) => (a[1] > b[1] ? -1 : 1))\n          .slice(0, 20)\n      : [];\n\n    if (!vert) {\n      xDomain = varsToPlot.map((v) => v[0]);\n      yDomain = [0, d3.extent(varsToPlot.map((v) => v[1]))[1]];\n\n      yScale = d3.scaleLinear().domain(yDomain).range([15, maxBarHeight]);\n\n      xScale = d3.scaleBand().domain(xDomain).range([0, width]).padding(0.5);\n\n      barWidth = xScale.bandwidth();\n    }\n\n    let nothingToPlot = varsToPlot.length < 1;\n    let transform = vert ? \"translate(100px,0px)\" : \"translate(10px,20px)\";\n    {\n      return nothingToPlot ? null : (\n        <svg width={width + 10} height={height + 20}>\n          {/* add axis */}\n          <g style={{ transform: transform }}>\n            <line\n              x1={0}\n              y1={vert ? yScale.range()[0] : yScale.range()[1]}\n              x2={vert ? 0 : xScale.range()[1]}\n              y2={yScale.range()[1]}\n              style={{ stroke: \"rgb(0,0,0,0.25)\", strokeWidth: 1 }}></line>\n            {varsToPlot.map((entry) => {\n              let key = entry[0];\n              let value = entry[1];\n              let tooltipText = key + \" : \" + value;\n\n              let x = vert ? xScale(value) + 5 : xScale(key) - 3;\n              let y = vert\n                ? yScale(key) - barWidth\n                : height - yScale.range()[0];\n              return (\n                <React.Fragment key={key}>\n                  <Tooltip title={tooltipText}>\n                    <rect\n                      className=\"count\"\n                      key={\"d_\" + key}\n                      style={{\n                        opacity: hoveredRowColor ? 0.5 : 1,\n                        fill: \"rgb(93, 131, 210)\",\n                      }}\n                      x={vert ? 0 : xScale(key)}\n                      y={\n                        vert\n                          ? yScale(key)\n                          : height - yScale.range()[0] - yScale(value)\n                      }\n                      width={vert ? xScale(value) : barWidth}\n                      height={vert ? barWidth : yScale(value)}></rect>\n                  </Tooltip>\n                  <Tooltip title={tooltipText}>\n                    <text\n                      style={{\n                        fontSize: \"1em\",\n                        textAnchor: \"start\",\n                        transform:\n                          \"translate(\" + x + \"px,\" + y + \"px) rotate(270deg)\",\n                      }}\n                      x={0}\n                      y={0}>\n                      {\" \"}\n                      {key}{\" \"}\n                    </text>\n                  </Tooltip>\n                  {hoveredRowColor ? (\n                    \"\"\n                  ) : (\n                    <text\n                      style={{\n                        fontSize: \"1em\",\n                        textAnchor: \"middle\",\n                      }}\n                      x={vert ? -5 : xScale(key) + barWidth / 2}\n                      y={\n                        vert\n                          ? yScale(key) - barWidth\n                          : height - yScale.range()[0] - yScale(value) - 2\n                      }>\n                      {\" \"}\n                      {value}{\" \"}\n                    </text>\n                  )}\n                </React.Fragment>\n              );\n            })}\n\n            {/* //Only plot hoveredVars that are in the original top 20 to keep the distribution of bars the same */}\n            {hoveredVarsToPlot\n              .filter((d) => xScale(d[0]))\n              .map((entry) => {\n                let key = entry[0];\n                let value = entry[1];\n                let tooltipText = key + \" : \" + value;\n\n                let x = vert ? xScale(value) + 5 : xScale(key) - 3;\n                let y = vert\n                  ? yScale(key) - barWidth\n                  : height - yScale.range()[0];\n                return (\n                  <React.Fragment key={\"hovered\" + key}>\n                    <Tooltip title={tooltipText}>\n                      <rect\n                        className=\"count\"\n                        key={\"d_\" + key}\n                        style={{ fill: hoveredRowColor }}\n                        x={vert ? 0 : xScale(key)}\n                        y={\n                          vert\n                            ? yScale(key)\n                            : height - yScale.range()[0] - yScale(value)\n                        }\n                        width={vert ? xScale(value) : barWidth}\n                        height={vert ? barWidth : yScale(value)}></rect>\n                    </Tooltip>\n\n                    <text\n                      style={{\n                        fontSize: \"1em\",\n                        textAnchor: \"middle\",\n                      }}\n                      x={vert ? -5 : xScale(key) + barWidth / 2}\n                      y={\n                        vert\n                          ? yScale(key) - barWidth\n                          : height - yScale.range()[0] - yScale(value) - 2\n                      }>\n                      {\" \"}\n                      {value}{\" \"}\n                    </text>\n                  </React.Fragment>\n                );\n              })}\n          </g>\n        </svg>\n      );\n    }\n  }\n\n  return null;\n};\n\n{\n  /* <>{[0, 1, 2,3,4].map(i => {\n                                  let frequentActions = freqPattern[i].seq.map(a => ({ event: a, id: a, count: freqPattern[i].count, scale: colorScale(freqPattern[i].count) })) //actions.filter(a => a.taskID == task.taskID && a.condition == condition).splice(0, 5).map(a => ({ event: a.label, id: a.actionID, count: a.count, scale: colorScale(a.count) }))\n                                  return <>\n                                    <Box style={{ display: 'block' }} >\n                                      <Box  mb={\"6px\"} style={{ display: 'inline-block', width: 100 }}>\n                                        <svg width={100} height={34}>\n                                        <rect x={100-countScale(freqPattern[i].count)} y={0} width={countScale(freqPattern[i].count)} height={30} style={{fill: 'rgb(147 195 209)', 'stroke':'white', strokeWidth:'8px' }}></rect>\n                                        <text x={90} y={20} style={{'fontWeight':'bold','textAnchor':'end'}}>{freqPattern[i].count}</text>\n                                        </svg>\n                                      </Box>\n                                      <Box mt={\"5px\"} mb={\"6px\"} style={{ display: 'inline-block', width: 300 }}>\n                                        <ProvenanceIsolatedNodes\n                                          key={task.taskID}\n                                          nodes={\n                                            frequentActions\n                                          }></ProvenanceIsolatedNodes>\n                                      </Box>\n                                    </Box>\n                                  </>\n                                }\n                                )}\n                                </> */\n}\nlet countScale = d3.scaleLinear().range([0, 75]).domain([0, 137]);\n\nfunction Stimulus({ taskID, conditionName, classes }) {\n  // console.log('am rerendering')\n\n  //check if image exists\n  let imgName = \"../static/taskImages/\" + taskID + \"_\" + conditionName + \".png\";\n\n  // image={require(\"../static/taskImages/\" +\n  // taskID +\n  // \"_\" +\n  // conditionName +\n  // \".png\")}\n\n  let img;\n  try {\n    img = require(\"../static/taskImages/\" +\n      taskID +\n      \"_\" +\n      conditionName +\n      \".png\");\n  } catch (err) {\n    // console.log(\"could not find\", imgName);\n    img = \"\";\n  }\n\n  return (\n    <>\n      <Box mt={\"5px\"} mb={\"6px\"} mr={\"10px\"} boxShadow={1}>\n        <CardMedia\n          style={{ display: \"inline-block\" }}\n          className={classes.media}\n          component=\"img\"\n          image={img}\n          // image=\"https://placekitten.com/g/100/100\"\n          title={imgName}\n        />\n      </Box>\n      <Typography className={classes.pos} variant=\"overline\" color=\"primary\">\n        Stimulus\n      </Typography>\n    </>\n  );\n}\n\n//Compoment to draw participant counts for each interaction sequence\nfunction SequenceCount({ row, hoveredRow, hoveredRowColor, clickedRow, clickedRowColor }) {\n  let total = 137;\n  let height = 25;\n  let iconWidth = 3;\n  let padding = 1;\n  let numIconsPerCol = Math.floor(height / (iconWidth + padding));\n  let numCols = Math.ceil(total / numIconsPerCol);\n  let width = numCols * (iconWidth + padding);\n\n  let textWidth = 25;\n\n  let xScale = d3\n    .scaleLinear()\n    .range([0, iconWidth + padding])\n    .domain([0, 1]);\n  let yScale = d3.scaleLinear().range([0, height]).domain([0, numIconsPerCol]);\n\n  let currentParticipants = row.matchingSequences.map((s) => s.participantID);\n  let hoveredParticipants =[]; \n  \n  if (clickedRow){\n    hoveredParticipants  = clickedRow.matchingSequences.map((s) => s.participantID)\n  } else {\n    hoveredParticipants = hoveredRow\n    ? hoveredRow.matchingSequences.map((s) => s.participantID)\n    : [];\n  } \n\n  // if (hoveredRow){\n  //   console.log('currentRow has ', row.count, currentParticipants.length , 'participants')\n  //   console.log('hoveredRow has ', hoveredParticipants.length , 'participants')\n  \n  // }\n \n\n  let intersection = currentParticipants.filter((x) =>\n    hoveredParticipants.includes(x)\n  );\n\n  // width = countScale.range()[1]\n\n  return (\n    <svg width={width + textWidth*4} height={height}>\n      {Array.from(Array(total).keys()).map((key) => {\n        return (\n          <rect\n            key={key}\n            x={xScale(Math.floor(key / numIconsPerCol))}\n            y={yScale(key % numIconsPerCol) + padding}\n            width={iconWidth}\n            height={iconWidth}\n            style={{\n              // opacity: key < intersection.length ? 1 : .2,\n              fill:\n                key < intersection.length\n                  ? hoveredRowColor || \"rgb(220, 220, 220)\"\n                  : key < row.count\n                  ? (hoveredRow && clickedRow ? clickedRowColor : \"rgb(150, 150, 150)\")\n                  : \"rgb(220, 220, 220)\", //rgb(147 195 209)\n            }}></rect>\n        );\n      })}\n\n      <text\n        x={xScale(numCols) + padding}\n        y={yScale(numIconsPerCol / 2)}\n        style={{\n          fontWeight: \"bold\",\n          alignmentBaseline: \"middle\",\n          textAnchor: \"start\",\n          fill:  \"rgb(150, 150, 150)\",\n        }}>\n        {row.count}\n      </text>\n\n      {hoveredRow ? <text\n        x={xScale(numCols) + padding + 25}\n        y={yScale(numIconsPerCol / 2)}\n        style={{\n          fontWeight: \"bold\",\n          alignmentBaseline: \"middle\",\n          textAnchor: \"start\",\n          fill: hoveredRowColor,\n        }}>\n        {' / ' + intersection.length }\n      </text> : <></>}\n\n      {clickedRow && hoveredRow? <text\n        x={xScale(numCols) + padding + 55}\n        y={yScale(numIconsPerCol / 2)}\n        style={{\n          fontWeight: \"bold\",\n          alignmentBaseline: \"middle\",\n          textAnchor: \"start\",\n          fill: clickedRowColor,\n        }}>\n        {'/ ' + (row.count - intersection.length) }\n      </text> : <></>}\n\n\n\n      {/* <rect\n    x={0}\n    y={0}\n    width={countScale(137)}\n    height={20}\n    style={{\n      fill: \"rgb(220, 220, 220)\"\n    }}></rect>\n<rect\n    x={0}\n    y={0}\n    width={countScale(row.count)}\n    height={20}\n    style={{\n      fill: \"rgb(93, 131, 210)\"\n    }}></rect>\n<text\n    x={countScale(137)+padding}\n    y={10}\n    style={{ fontWeight: \"bold\", alignmentBaseline:'middle', textAnchor: \"start\" ,'fill':'rgb(93, 131, 210)' }}>\n    {row.count}\n  </text> */}\n    </svg>\n  );\n}\n\nfunction SortIconContainer({ sorted, classes }) {\n  let size = 20;\n  return (\n    <svg width={size} height={size} style={{ paddingTop: \"5px\" }}>\n      <SortIcon\n        className={sorted ? classes.sorted : \"\"}\n        style={{ transform: \"rotate(-180deg)\" }}\n        width={size}\n        height={size}\n      />\n    </svg>\n  );\n}\n\n//Compoment to draw interaction sequence tables\nfunction TableComponent({\n  rows,\n  hoveredRowColor,\n  hoveredRow = undefined,\n  setHoveredRow = undefined,\n  clickedRowColor,\n  clickedRow = undefined,\n  setClickedRow = undefined\n}) {\n  // console.log('rendering table',hoveredRow)\n  // console.log(rows)\n\n  const classes = useStyles();\n\n  let [sort, setSort] = useState({\n    value: \"Count\",\n    desc: { Count: true, Pattern: true },\n  });\n\n  // useEffect()({\n  rows.sort((a, b) => {\n    let aValue = sort.value == \"Count\" ? a.count : a.seq.length;\n    let bValue = sort.value == \"Count\" ? b.count : b.seq.length;\n    let rValue = sort.desc[sort.value] ? -1 : 1;\n    return aValue > bValue ? rValue : -rValue;\n  });\n  // },[])\n\n  // console.log(rows)\n  return (\n    <MuiThemeProvider theme={theme}>\n      <TableContainer style={{ maxHeight: \"300px\" }}>\n        <Table stickyHeader aria-label=\"sticky table\">\n          <TableHead>\n            <TableRow>\n              {[\n                { key: \"Pattern\", title: \"Interaction Pattern\" },\n                { key: \"Count\", title: \"Participant Count\" },\n              ].map((header) => {\n                return (\n                  <TableCell\n                    key={header[\"key\"]}\n                    onClick={() => {\n                      sort = { ...sort };\n                      let sameKey = sort.value == header.key;\n                      sort.value = header.key;\n                      sort.desc[header.key] = sameKey\n                        ? !sort.desc[header.key]\n                        : true;\n                      setSort(sort);\n                    }}\n                    className={classes.sortable}>\n                    {\" \"}\n                    {header.title}\n                    <SortIconContainer\n                      classes={classes}\n                      sorted={sort.value == header.key}></SortIconContainer>\n                  </TableCell>\n                );\n              })}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.map((row, i) => {\n              // console.log('row',row)\n              return (\n                <TableRow\n                  key={row.id}\n                  onMouseDown={() => {\n                    clickedRow == row ? setClickedRow() : setClickedRow(row);\n                  }}\n                  onMouseEnter={() => {\n                    setHoveredRow(row);\n                  }}\n                  onMouseLeave={() => setHoveredRow()}\n                  style={{\n                    background: clickedRow == row ?  \"rgb(230,230,230)\" : hoveredRow == row ? \"rgb(245,245,245)\"  : \"white\",\n                  }}>\n                  <TableCell\n                    component=\"th\"\n                    scope=\"row\"\n                    style={{ width: \"300px\", padding: \"10px\" }}>\n                    {row.seq ? (\n                      <ProvenanceIsolatedNodes\n                        // key={}\n                        nodes={row.seqObj}\n                        selectedItemId={undefined}\n                        handleProvenanceNodeClick={() => {}}></ProvenanceIsolatedNodes>\n                    ) : (\n                      row.answer\n                    )}\n                  </TableCell>\n                  {row.seq ? (\n                    <TableCell align=\"left\">\n                      <SequenceCount\n                        row={row}\n                        hoveredRow={hoveredRow}\n                        hoveredRowColor={hoveredRowColor}\n                        clickedRow = {clickedRow}\n                        clickedRowColor = {clickedRowColor}\n                        ></SequenceCount>\n                    </TableCell>\n                  ) : (\n                    <></>\n                  )}\n                  {/* <TableCell  component=\"th\" scope=\"row\" style={{padding:'10px'}}>\n          {row.seq? <Histogram data={value} ci={value.ci} />: <></>}\n        </TableCell> */}\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </MuiThemeProvider>\n  );\n}\n\n// Compoment for single metric histogram\nfunction Histogram({ data, hoveredRow, metric, hoveredRowColor, clickedRow, clickedRowColor }) {\n  // let hoveredStats = undefined;\n  // let hoveredCI = undefined;\n  let value = data.find((m) => m.metric == metric);\n  if (value.type == \"int\" || value.type == \"float\") {\n    let hoveredStats; \n    \n    if (clickedRow && hoveredRow && clickedRow == hoveredRow){\n      hoveredStats = hoveredRow\n      ? hoveredRow.stats.find((m) => m.metric == metric)\n      : undefined;\n      console.log('showing metrics for ', hoveredRow.matchingSequences.length)\n\n    }\n    else if (clickedRow){\n      \n      let intersectionRow = hoveredRow ? clickedRow.intersections.find(r=>r.id == hoveredRow.id) : undefined\n      hoveredStats = intersectionRow \n      ? intersectionRow.stats.find((m) => m.metric == metric)\n      : undefined;\n      if (intersectionRow) {\n        console.log('showing metrics for ', intersectionRow.matchingSequences.length)\n      }\n    } else {\n      hoveredStats = hoveredRow\n      ? hoveredRow.stats.find((m) => m.metric == metric)\n      : undefined;\n    }\n     \n\n    \n    let hoveredCI = hoveredStats ? hoveredStats.ci : undefined;\n    let histColor = clickedRow && clickedRow !== hoveredRow ? clickedRowColor  : hoveredRowColor\n    return (\n      <Grid key={metric + \"_hist\"} item>\n        {\n          <DrawHistogram\n            hoveredRowColor={histColor}\n            data={hoveredStats || value}\n            ci={hoveredCI || value.ci}\n          />\n        }\n        <Typography\n          style={{ display: \"block\" }}\n          color=\"primary\"\n          variant=\"overline\">\n          {metric}\n        </Typography>\n      </Grid>\n    );\n  }\n  // if (value.type == \"text\") {\n  //   return (\n  //     <Grid key={metric+'_bar'} item>\n  //       <BarChart data={value}></BarChart>\n  //       <Typography\n  //         style={{ display: \"block\" }}\n  //         color=\"primary\"\n  //         variant=\"overline\">\n  //         {metric}\n  //       </Typography>\n  //     </Grid>\n  //   );\n  // }\n  return <></>;\n}\n\nexport const DrawHistogram = (props) => {\n  const {\n    data,\n    hoveredRowColor,\n    ci,\n    size = { width: 100, height: 40 },\n  } = props;\n\n  let [hovered, setHovered] = useState(false);\n\n  let menu = function () {\n    return (\n      <>\n        <rect\n          x={0}\n          y={0}\n          width={width}\n          height={height}\n          rx={5}\n          fill={\"white\"}\n          opacity={0.5}></rect>\n\n        <g transform={`translate(0,0)`}>\n          {<SortIcon width={16} height={16} />}\n          <text x={20} y={10}>\n            Sort\n          </text>\n        </g>\n      </>\n    );\n  };\n\n  let average = ci[0];\n  let lowerBound = ci[1];\n  let upperBound = ci[2];\n\n  let width = size.width;\n  let height = size.height;\n\n  let barHeight = 20;\n  let barPadding = 2;\n  //compute scale for data;\n  let xDomain = d3.extent(data.bins);\n  let yDomain = d3.extent(data.hist);\n\n  let xScale = d3\n    .scaleLinear()\n    .domain(xDomain)\n    .range([10, width - 40]);\n\n  let yScale = d3.scaleLinear().domain(yDomain).range([0, barHeight]);\n\n  let barWidth = xScale(data.bins[1]) - xScale(data.bins[0]) - barPadding;\n\n  let textLabel = Math.round(average * 10) / 10; //label == '%' ? (Math.round(average * 100) + ' ' + label) : Math.round(average * 10) / 10 + ' ' + label\n\n  return (\n    <>\n      <svg\n        style={{ transform: \"translate(-10px,0px)\" }}\n        width={width}\n        height={height}\n        onMouseEnter={() => setHovered(true)}\n        onMouseLeave={() => setHovered(false)}>\n        <g transform={\"translate(10,0)\"}>\n          <line\n            x1={0}\n            y1={yScale.range()[1]}\n            x2={xScale.range()[1]}\n            y2={yScale.range()[1]}\n            style={{ stroke: \"rgb(0,0,0,0.25)\", strokeWidth: 1 }}></line>\n          {data.hist.map((d, i) => (\n            <rect\n              className=\"count\"\n              key={\"d_\" + data.bins[i]}\n              style={{ fill: hoveredRowColor || \"rgb(149 149 149)\" }} //rgb(93, 131, 210)\n              x={xScale(data.bins[i]) + barPadding / 2}\n              y={barHeight - yScale(d)}\n              width={barWidth}\n              height={yScale(d)}></rect>\n          ))}\n          <circle\n            className=\"count\"\n            style={{ fill: \"#ff5e00\", opacity: 1 }}\n            cx={xScale(average)}\n            cy={yScale.range()[1] / 2}\n            r={5}></circle>\n\n          <line\n            className=\"count\"\n            style={{ stroke: \"black\", strokeWidth: 2, opacity: 0.5 }}\n            x1={xScale(lowerBound)}\n            x2={xScale(upperBound)}\n            y1={yScale.range()[1] / 2}\n            y2={yScale.range()[1] / 2}></line>\n\n          <text\n            style={{ fontSize: \"1em\", textAnchor: \"middle\" }}\n            x={xScale(average)}\n            y={40}>\n            {\" \"}\n            {textLabel}{\" \"}\n          </text>\n\n          {hovered ? (\n            <>\n              <text\n                style={{\n                  fill: \"rgb(0,0,0,0.25)\",\n                  fontSize: \"1em\",\n                  textAnchor: \"end\",\n                }}\n                x={-2}\n                y={23}>\n                {\" \"}\n                {Math.floor(xScale.domain()[0])}{\" \"}\n              </text>\n              <text\n                style={{\n                  fill: \"rgb(0,0,0,0.25)\",\n                  fontSize: \"1em\",\n                  textAnchor: \"start\",\n                }}\n                x={xScale.range()[1] + 2}\n                y={23}>\n                {\" \"}\n                {Math.ceil(xScale.domain()[1])}{\" \"}\n              </text>\n            </>\n          ) : null}\n        </g>\n      </svg>\n    </>\n  );\n};\n\n//Compoment for the card for a single Condition\nfunction ConditionCard({ condition, conditionName, classes, taskID }) {\n  //Keeps track of which rows in the table are hovered on\n  const [hoveredRow, setHoveredRow] = useState();\n  const [clickedRow, setClickedRow] = useState();\n  let [hidden, setHidden] = useState(false);\n\n  let hoveredRowColor = \"#f59c3d\"; // '#9100e6';\n  let clickedRowColor = \"#3d77f5\"; // '#9100e6';\n  let freqPattern, data, metricValues;\n\n  //only compute when the condition changes\n  // useEffect(() => {\n  // console.log('calling use effect')\n  freqPattern = condition.patterns[0].topK;\n  data = condition.stats;\n\n  metricValues = [...new Set(data.map((m) => m.metric))];\n\n  freqPattern.map((action, i) => {\n    action.id = i;\n    action.seqObj = action.seq.map((a) => ({\n      name: a,\n      id: a,\n      count: action.count,\n    }));\n    return action;\n  });\n\n  // }, [condition]);\n  // console.log(condition.textAnswers.map(a=>a.answer).flat())\n  // console.log(metricValues)\n  return !metricValues ? (\n    <></>\n  ) : (\n    <React.Fragment key={\"ConditionCard_\" + conditionName}>\n      <Typography\n        onClick={() => {\n          setHidden(!hidden);\n        }}\n        style={{ cursor: \"pointer\" }}\n        className={classes.condition}\n        variant=\"overline\">\n        {conditionName}\n      </Typography>\n      {hidden ? (\n        <></>\n      ) : (\n        <Grid container className={classes.root} spacing={2}>\n          <Grid item xs={12}>\n            <Grid container justify=\"flex-start\" spacing={2}>\n              <Grid key={\"cat\"} item>\n                <Stimulus\n                  taskID={taskID}\n                  classes={classes}\n                  conditionName={conditionName}></Stimulus>\n              </Grid>\n              <Grid key={\"prov\"} item>\n                <Box\n                  height={rowHeight}\n                  width={600}\n                  mt={\"5px\"}\n                  mb={\"6px\"}\n                  mr={\"10px\"}\n                  boxShadow={0}\n                  style={{ overflow: \"scroll\" }}>\n                  {\n                    <TableComponent\n                      rows={freqPattern}\n                      hoveredRow={hoveredRow}\n                      hoveredRowColor={hoveredRow ? hoveredRowColor : undefined}\n                      setHoveredRow={setHoveredRow}\n                      clickedRow={clickedRow}\n                      clickedRowColor={clickedRow ? clickedRowColor : undefined}\n                      setClickedRow={setClickedRow}></TableComponent>\n                  }\n                </Box>\n                <Typography\n                  className={classes.pos}\n                  variant=\"overline\"\n                  color=\"primary\">\n                  Actions\n                </Typography>\n              </Grid>\n              <Grid key={\"performanceMetrics\"} item xs>\n                <Grid\n                  key={\"performanceMetrics\"}\n                  item\n                  style={{ display: \"block\" }}>\n                  <Box\n                    height={rowHeight / 2.5}\n                    p={\"20px\"}\n                    mt={\"5px\"}\n                    mb={\"6px\"}\n                    mr={\"10px\"}\n                    style={{ overflow: \"scroll\", display: \"inline-flex\" }}\n                    boxShadow={1}>\n                    {metricValues.map((metric) => {\n                      return (\n                        <Histogram\n                          key={metric}\n                          data={data}\n                          hoveredRow={hoveredRow}\n                          hoveredRowColor={\n                            hoveredRow ? hoveredRowColor : undefined\n                          }\n                          clickedRow={clickedRow}\n                          clickedRowColor={\n                            clickedRow ? clickedRowColor : undefined\n                          }\n                          metric={metric}></Histogram>\n                      );\n                    })}\n                  </Box>\n                  <Typography\n                    className={classes.pos}\n                    variant=\"overline\"\n                    color=\"primary\"\n                    style={{ display: \"block\" }}>\n                    Performance Metrics\n                  </Typography>\n                </Grid>\n\n                <Grid key={\"qualData\"} item xs>\n                  <Box\n                    height={rowHeight / 2.5}\n                    width={1}\n                    mt={\"5px\"}\n                    mb={\"6px\"}\n                    mr={\"10px\"}\n                    boxShadow={1}\n                    style={{ overflow: \"scroll\" }}>\n                    {metricValues.map((metric) => {\n                      return (\n                        <BarChart\n                          key={metric}\n                          allData={data}\n                          hoveredRow={hoveredRow}\n                          hoveredRowColor={\n                            hoveredRow ? hoveredRowColor : undefined\n                          }\n                          metric={metric}></BarChart>\n                      );\n                    })}\n                    {/* {<Tagger text = {condition.textAnswers.map(a=>a.answer).flat().join('--')}></Tagger>} */}\n                    {/* <TableComponent rows={condition.textAnswers}></TableComponent> */}\n                  </Box>\n                  <Typography\n                    className={classes.pos}\n                    variant=\"overline\"\n                    color=\"primary\">\n                    Word Counts for Qualitative Responses\n                  </Typography>\n                </Grid>\n              </Grid>\n\n              {/* {condition.textAnswers.map(txt=>{\n              return <List dense={true}>\n              <ListItem>\n                <ListItemText\n                  primary={txt.answer}\n                  secondary={null}\n                />\n              </ListItem>\n          </List>\n            })} */}\n            </Grid>\n          </Grid>\n        </Grid>\n      )}\n      <Divider />\n    </React.Fragment>\n  );\n}\n\nfunction TaskCard({ task, classes }) {\n  let [hidden, setHidden] = useState(false);\n\n  return (\n    <Box\n      m={2}\n      key={\"box_\" + task.taskID}\n      // style={{ display: \"inline-block\" }}\n    >\n      {/* style={{ 'width': 600 }}  */}\n      <Card className={classes.root} key={task.taskID}>\n        <CardContent>\n          <Typography\n            variant=\"h5\"\n            component=\"h2\"\n            onClick={() => {\n              setHidden(!hidden);\n            }}\n            style={{ cursor: \"pointer\", display: \"inline-block\" }}>\n            {task.name}\n          </Typography>\n          {/* <Tooltip title={taskTooltip}> */}\n          <Typography\n            className={classes.pos}\n            color=\"textSecondary\"\n            style={{ display: \"inline-block\", marginLeft: \"10px\" }}>\n            {task.prompt + \"  [\" + task.answer + \"]\"}\n          </Typography>\n          <Divider />\n\n          {hidden ? (\n            <></>\n          ) : (\n            Object.keys(task.conditions).map((cKey) => {\n              let condition = task.conditions[cKey];\n              return (\n                <ConditionCard\n                  key={task.taskID + cKey}\n                  condition={condition}\n                  conditionName={cKey}\n                  taskID={task.taskID}\n                  classes={classes}></ConditionCard>\n              );\n            })\n          )}\n        </CardContent>\n        {hidden ? (\n          <></>\n        ) : (\n          <CardActions>\n            <Button size=\"small\">Explore</Button>\n          </CardActions>\n        )}\n      </Card>\n    </Box>\n  );\n}\n\nexport default function TaskContainer() {\n  const classes = useStyles();\n  const bull = <span className={classes.bullet}>•</span>;\n\n  const { data, homeTaskSort } = useContext(ProvenanceDataContext);\n\n\n  // console.log('data is ', data)\n\n  // console.log('homeTaskSort is ', homeTaskSort)\n\n  function getValues(task, conditionFilter, sortKey) {\n    let conditions = Object.keys(task.conditions);\n    let values = [];\n    conditions.map((c) => {\n      if (conditionFilter[c]) {\n        let metricValues = task.conditions[c].stats.find(\n          (s) => s.metric == sortKey\n        );\n        values.push(metricValues.ci[1]); //average for that metric\n      }\n    });\n    return values;\n  }\n  if (data) {\n    // console.log(data.tasks)\n\n    if (homeTaskSort) {\n      console.log(\"homeTaskSort\", homeTaskSort);\n      let sortKey = homeTaskSort.metric;\n      let desc = homeTaskSort.desc;\n      let conditionFilter = homeTaskSort.conditions;\n\n      data.tasks.sort((a, b) => {\n        let aValue, bValue;\n        if (sortKey == \"name\") {\n          aValue = a[sortKey];\n          bValue = b[sortKey];\n        } else {\n          let aValues = getValues(a, conditionFilter, sortKey);\n          let bValues = getValues(b, conditionFilter, sortKey);\n          aValue = desc ? Math.max(...aValues) : Math.min(...aValues);\n          bValue = desc ? Math.max(...bValues) : Math.min(...bValues);\n        }\n\n        let rValue = desc ? -1 : 1;\n        return aValue > bValue ? rValue : -rValue;\n      });\n\n      data.taskList.sort((a, b) => {\n        let taskA = data.tasks.find((t) => t.taskID == a);\n        let taskB = data.tasks.find((t) => t.taskID == b);\n\n        if (!taskA || !taskB) {\n          return -1;\n        }\n        let indexA = data.tasks.indexOf(taskA);\n        let indexB = data.tasks.indexOf(taskB);\n\n        return indexA > indexB ? 1 : -1;\n      });\n\n      console.log(\"done sorting\");\n    }\n  }\n\n  // })\n  let colorScale = d3\n    .scaleLinear()\n    // .domain(d3.extent(allCounts))\n    .domain([0, 800])\n    .range([0.3, 1]);\n\n  //Only render when all API calls have returned\n  let ready = data;\n  // console.log('actions', actions)\n  return ready == undefined ? (\n    <></>\n  ) : (\n    <>\n      {data.taskList.map((taskID) => {\n        let task = data.tasks.find((t) => t.taskID == taskID);\n        return task ? (\n          <TaskCard key={task.name} task={task} classes={classes}></TaskCard>\n        ) : (\n          <Skeleton\n            key={taskID}\n            variant=\"rect\"\n            width={\"98%\"}\n            height={500}\n            style={{ margin: \"20px\", padding: \"20px\" }}>\n            Loading {taskID}\n          </Skeleton>\n        );\n      })}\n    </>\n  );\n}\n","import React, { useState, useEffect, useContext } from \"react\";\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport TrendingFlatIcon from '@material-ui/icons/TrendingFlat';\nimport Divider from '@material-ui/core/Divider';\n\nimport * as labella from \"labella\"\n\nimport { List } from 'react-virtualized';\n\nimport { useFetchAPIData } from \"../hooks/hooks\";\n\n// import * as PouchDB from 'pouchdb-browser';\n\n\nimport * as d3 from \"d3\";\n\nimport ProvenanceDataContext from \"../components/ProvenanceDataContext\";\nimport ProvenanceIsolatedNodes from \"../components/ProvenanceIsolatedNodes\";\n\nimport Grid, { GridSpacing } from '@material-ui/core/Grid';\nimport { pathToFileURL } from \"url\";\nimport { keys } from \"mobx\";\n\nconst useStyles = makeStyles({\n    root: {\n        minWidth: 275,\n        flexGrow: 1\n    },\n    bullet: {\n        display: 'inline-block',\n        margin: '0 2px',\n        transform: 'scale(0.8)',\n    },\n    title: {\n        fontSize: 14,\n    },\n    pos: {\n        marginBottom: 12,\n    }\n});\n\nvar groupBy = function (xs, key) {\n    return xs.reduce(function (rv, x) {\n        (rv[x[key]] = rv[x[key]] || []).push(x);\n        return rv;\n    }, {});\n};\n\n\nfunction scale(width, maxValue) {\n    return d3\n        .scaleLinear()\n        .range([10, width])\n        .domain([0, maxValue]);\n}\n\nlet xDomain, yDomain, categories;\n\n\nexport default function StudyCard() {\n    const classes = useStyles();\n    const bull = <span className={classes.bullet}>•</span>;\n    let { data,timelineData } = useContext(ProvenanceDataContext);\n\n    Object.assign(data,timelineData) \n    // console.log('combinedData is ', data)\n\n    function eventMap(eventData, size = { width: 130, height: 30 }) {\n\n        let width = size.width;\n        let height = size.height;\n\n        let xScale = d3.scaleLinear().domain([0, xDomain[1]]).range([0, width - 40])\n        let yScale = d3.scaleLinear().domain(yDomain).range([height, 0])\n\n        //metrics to plot in each task label\n        let metrics = ['accuracy']\n\n\n        // let barHeight = 20;\n        let barPadding = 2;\n        let metricSquare = 8;\n        let barHeight = 16\n        let labelHeight = 15\n        let textWidth = 30;\n        let labelWidth = textWidth  //+ metrics.length * (metricSquare + barPadding) + textWidth  + barPadding\n        let axisHeight = yScale.range()[0] + barHeight + 3\n\n        //compute scale for data; \n        // let xDomain = d3.extent(data, d => d.elapsedTime);\n        // let yDomain = d3.extent(data, d => d.level);\n        // let colors = [\"rgb(96, 201, 110)\", \"rgb(0, 191, 128)\", \"rgb(0, 180, 147)\", \"rgb(0, 167, 165)\", \"rgb(0, 153, 179)\", \"rgb(0, 138, 188)\", \"rgb(0, 122, 189)\", \"rgb(0, 104, 182)\", \"rgb(42, 85, 168)\", \"rgb(77, 65, 147)\"]\n        let colors = [\"rgb(0, 153, 179)\", \"rgb(0, 138, 188)\", \"rgb(0, 122, 189)\", \"rgb(0, 104, 182)\", \"rgb(42, 85, 168)\", \"rgb(77, 65, 147)\"]\n        // let colors = [ \"#e6f598\", \"#abdda4\", \"#66c2a5\", \"#3288bd\", \"#5e4fa2\", \"#9e0142\", \"#d53e4f\", \"#f46d43\", \"#fdae61\",\"#fee08b\", \"#ffffbf\", ]\n       \n        let colorScale = d3.scaleOrdinal(colors).domain(categories);\n\n        let color = function (d) {\n            return (d.eventID == 'task' ? 'rgba(171,171,171,0.5)' : d.eventID == 'browse away' ? 'black' : colorScale(d.category))\n        }\n\n        let hoverFill = function (d) {\n            return (d.uniqueID == hoveredElement ? '#ff5800' : 'rgba(171, 171, 171, 0.5)')\n        }\n\n        let maxTime = Math.max(...eventData.map(d => d.elapsedTime + d.duration))\n        let phases = eventData.filter(d => d.level == 0)\n\n        var filteredData = eventData.filter(d => d.eventID == 'task' && d.taskID && d.taskID).sort((a, b) => a.elapsedTime > b.elapsedTime ? 1 : - 1);\n    \n        //compute y position for labels\n        let y = 1;\n        let labelPos = [];\n\n        let nodes = filteredData.map(d => {\n            let labelStart = xScale(d.elapsedTime)\n            let labelExtent = xScale(d.elapsedTime) + labelWidth + 8;\n            let level = labelPos.find(p => p.x < labelStart);\n            let n = {};\n            n['data'] = d;\n            if (!level) {\n                y = y + 1;\n                labelPos.push({ y, x: labelExtent, label: d.shortName })\n                n['y'] = y;\n            } else {\n                n['y'] = level.y\n                labelPos = labelPos.filter(p => p.y !== level.y);\n                labelPos.push({ y: level.y, x: labelExtent, label: d.shortName })\n                labelPos.sort((a, b) => a.y < b.y ? -1 : 1)\n            }\n            n['labelWidth'] = labelWidth\n            return n;\n        })\n\n        let metricColorScales={}; //one color scale per metric\n        let metricYScales={} // one y scale per metric\n        let taskTimeScales = {} // one time scale per task (depending on the range of completion times)\n\n        let colorRange = [\"#e6550d\", \"#3182bd\"];\n        let heightRange = [barPadding, labelHeight - barPadding]\n        let timeScaleRange = [barPadding, textWidth-2*barPadding];\n\n \n        let getStats = function(taskID,condition,metric){\n            let taskInfo = data.tasks.find(dd => dd.taskID == taskID);\n            let out = {}\n            if (taskInfo) {\n                let stats = taskInfo.conditions[condition.trim()].stats.find(t => t.metric == metric);\n                if (stats){\n                    out['average'] = stats.ci[0];\n                out['lowerBound'] = stats.ci[1];\n                out['upperBound'] = stats.ci[2];\n                out['min'] =stats.min;\n                out['max'] = stats.max;\n\n                }\n                \n            }\n            return out\n        }\n\n        //get stats for all metrics to be displayed in the label plus time. \n        nodes.map(n=>{\n            n.data.stats={}\n            metrics.map(metric=>{\n                n.data.stats[metric] = getStats(n.data.taskID,n.data.condition,metric)\n            })\n            n.data.stats['time'] = getStats(n.data.taskID,n.data.condition,'time')\n        })\n\n        metrics.map(metric => {\n            //create metric scales for color and height of bars\n            metricColorScales[metric] = d3.scaleLinear().range(colorRange).domain(data.metrics[metric])\n            metricYScales[metric] = d3.scaleLinear().range(heightRange).domain(data.metrics[metric])\n        })\n\n        data.taskList.map(task => {\n            data.conditions.map(condition => {\n                let stats = getStats(task, condition, 'time')\n                //WARNING, right now setting a single range for time, regardless of task/condtion since the backend returns a common scale for all metrics\n                taskTimeScales[task] = d3.scaleLinear().range(timeScaleRange).domain([stats['min'], stats['max']])\n            })\n        })\n\n        // console.log(nodes)\n        // console.log('nodePos',labelPos)\n\n\n        return (\n            <svg width={width} height={300} >\n                {/* add axis */}\n                {/* {console.log(data.map(d=>d.elapsedTime), Math.max(...data.map(d=>d.elapsedTime)))} */}\n                <g style={{ \"transform\": \"translate(0px, 200px)\" }}>\n                    {/* <line x1={0} y1={axisHeight} x2={xScale(maxTime) + 5} y2={axisHeight} style={{ \"stroke\": \"rgb(0,0,0,0.25)\", \"strokeWidth\": 1 }}></line> */}\n                    {eventData.map((d, i) => {\n                        let rectWidth = (xScale(d.duration) > 5) ? xScale(d.duration) - barPadding : xScale(d.duration)\n\n                        let barComponent = <React.Fragment key={d.participantID + '_' + Math.random()}>\n                            {/* <Tooltip title={(d.eventID == 'task' ? d.taskID : d.eventID) + \" [\" + d.duration + ' / ' + d.accuracy + \"]\"}> */}\n                            <rect className='count' key={'d_' + d.eventID + '_' + d.elapsedTime} onMouseOver={() => hovered(d)} onMouseOut={() => setHovered(undefined)} style={{ fill: color(d), opacity: (d.eventID == 'task' ? .8 : .6) }} // \"rgb(93, 131, 210)\"\n                                x={xScale(d.elapsedTime) + barPadding}\n                                y={yScale(d.level)}\n                                width={rectWidth}\n                                height={d.eventID == 'task' ? barHeight : barHeight / 2}></rect>\n\n\n                            {/* </Tooltip> */}\n\n                        </React.Fragment>\n\n                        //  console.log('taskInfo', taskInfo)\n\n                        return barComponent\n                    }\n\n                    )}\n\n                    {nodes.map(n => <line x1={xScale(n.data.elapsedTime) + barPadding} y1={yScale(n.data.level) + 15} x2={xScale(n.data.elapsedTime) + barPadding} y2={yScale(n.y)+labelHeight} style={{ stroke: 'rgb(150,150,150)', strokeWidth: '.8px'}}></line>)}\n\n                    {nodes.map(n => {\n                        let ciPlot, background;\n\n                        let timeScale = taskTimeScales[n.data.taskID];\n\n                        let label = <g style={{ \"transform\": \"translate(\" + (xScale(n.data.elapsedTime)+barPadding) + \"px, \" + (yScale(n.y)) + \"px)\" }}>\n                        <rect className='count' key={'background_' + n.data.eventID} style={{ fill: 'rgb(245,245,245)' }}\n                                x={0}\n                                y={0}\n                                width={labelWidth}\n                                height={labelHeight}></rect>\n\n                            <line x1={0} y1={labelHeight} x2={n.labelWidth} y2={labelHeight} style={{ stroke: 'rgb(150,150,150)', strokeWidth: '.8px' }}></line>\n\n                            <text\n                                style={{ fontSize: \".75em\", fontWeight:'bold', textAnchor: \"start\", fill: 'rgb(90,90,90)', alignmentBaseline: \"hanging\" }}\n                                x={barPadding*2}\n                                y={barPadding}>\n                                {\" \"}\n                                {n.data.shortName}{\" \"}\n                            </text>\n                        </g>\n\n                        if (Object.keys(n.data.stats).includes('time')) {\n                            let plotHeight  = yScale(n.y) + barHeight\n                            let maxWidth = Math.max(xScale(n.data.duration) + barPadding, xScale(n.data.upperBound));\n\n                            let avg = n.data.stats['time'].average\n                            let slower = avg < n.data.duration;\n                            let minTime = Math.min(avg,n.data.duration)\n                            let diff = Math.abs(avg - n.data.duration)\n\n                            let timePadding = 2;\n                            let glyphSize = 4;\n                            let lineHeight = 2;\n\n                            ciPlot = <g style={{ \"transform\": \"translate(\" + (xScale(n.data.elapsedTime) + (labelWidth - textWidth) + barPadding) + \"px, \" + (yScale(n.y)) + \"px)\" }}>\n\n                                <line x1={timeScale.range()[0]} y1={labelHeight/2+lineHeight/2} x2={timeScale.range()[1]} y2={labelHeight/2+lineHeight/2} style={{ stroke: 'rgb(200,200,200)', strokeWidth: '.8px' }}></line>\n\n                       \n\n     {/*\n                                <line\n                                    className=\"count\"\n                                    style={{ stroke: \"black\", strokeWidth: 3, opacity: 0.5 }}\n                                    x1={compressedTimeScale(n.data.lowerBound)}\n                                    x2={compressedTimeScale(n.data.upperBound)}\n                                    y1={0}\n                                    y2={0}></line> */}\n                                    {/* // PROBLEM HERE */}\n                                <rect x={timeScale(minTime)} y={timePadding} width={Math.abs(timeScale(avg) - timeScale(n.data.duration))} height={labelHeight - 2 * timePadding} style={{ fill: slower ? '#ff8d00' : 'rgb(53 130 184)', opacity: '.8' }}></rect>\n\n                                <rect x={timeScale(minTime)} y={labelHeight/2} width={timeScale(diff)} height={lineHeight} style={{ fill: slower ? '#ff8d00' : 'rgb(53 130 184)', opacity: '.8' }}></rect>\n                                {/* <rect x={timeScale(avg)} y={timePadding} width={1} height={labelHeight - 2 * timePadding} style={{ fill: 'black', opacity: '1', 'rx': 0 }}></rect> */}\n\n                                {/* <rect x={0} y={0} width ={glyphSize} height={glyphSize}  transform ={\"translate(\" + timeScale(avg) + \",\" +  (labelHeight/2) + \") rotate(45,2,2)\"} style={{ fill: 'black', opacity: '1'}}></rect> */}\n                                <rect x={0} y={0} width ={glyphSize} height={glyphSize}  style={{ fill: 'black', opacity: '1', transform: \"translate(\" + timeScale(avg) + \"px,\" +  (labelHeight/2 - glyphSize/2) + \"px) rotate(45deg)\"}}></rect>\n\n                                <rect x={0} y={0} width ={glyphSize} height={glyphSize}  style={{ fill: 'red', opacity: '1', transform: \"translate(\" + timeScale(n.data.duration) + \"px,\" +  (labelHeight/2 - glyphSize/2) + \"px) rotate(45deg)\"}}></rect>\n\n\n                                {/* <circle\n                                    className=\"count\"\n                                    style={{ stroke: \"black\", opacity: 1, strokeWidth: '1px' }}\n                                    cx={ slower ? compressedTimeScale.range()[0] : compressedTimeScale(diff)  }\n                                    cy={0}\n                                    r={1}></circle> */}\n\n                                {/* <line x1={compressedTimeScale(n.data.average)} y1={-3} x2={compressedTimeScale(n.data.average)} y2={3} style={{ stroke: 'black', strokeWidth: '1px' }}></line> */}\n\n                                {/* <line x1={compressedTimeScale(n.data.duration)} y1={-3} x2={compressedTimeScale(n.data.duration)} y2={3} style={{ stroke: '#ff5e00', strokeWidth: '1px' }}></line> */}\n\n\n                            </g>\n                        }\n                        return <> {background} {label}   </> // {ciPlot}\n \n\n                    })}\n\n                    {nodes.map(n => {\n\n                        let metricPlot = <>\n                            {metrics.map((m, i) => {\n\n                                let avg = n.data.stats[m].average;\n                                let value = n.data[m]\n                                let vertScale = metricYScales[m];\n                                let colorScale = metricColorScales[m];\n                                let better = value > avg;\n                                let maxValue = Math.max(avg, value)\n                                let diff = Math.abs(avg - value)\n\n\n                                return <g style={{ \"transform\": \"translate(\" + (xScale(n.data.elapsedTime) + textWidth + barPadding + i * (metricSquare + barPadding)) + \"px, \" + yScale(n.y) + \"px)\" }}>\n                                    {/* <line x1={xScale(n.data.elapsedTime) + textWidth + i * (metricSquare + barPadding)} y1={yScale(n.y)} x2={xScale(n.data.elapsedTime) + textWidth  + i * (metricSquare + barPadding)} y2={yScale(n.y) + labelHeight} style={{ \"stroke\": \"rgb(0,0,0,0.25)\", \"strokeWidth\": .8 }}></line> */}\n                                    {/* <rect className='count' key={'d_' + n.data.eventID + Math.random()} style={{ fill: colorScale(value), opacity: 1 }} // 'rx': metricSquare \n                                        x={0}\n                                        y={labelHeight - yScale(value)}\n                                        width={n.data.eventID == 'task' ? metricSquare : 0}\n                                        height={2}></rect> */}\n                                    <rect className='count' key={'d_' + n.data.eventID + Math.random()} style={{ fill: 'black', opacity: 1 }} // 'rx': metricSquare \n                                        x={0}\n                                        y={labelHeight - vertScale(avg)}\n                                        width={n.data.eventID == 'task' ? metricSquare : 0}\n                                        height={1}></rect>\n\n                                    {/* <rect className='count' key={'d_' + n.data.eventID + Math.random()} style={{ fill: 'red', opacity: 1 }} // 'rx': metricSquare \n                                        x={-5}\n                                        y={labelHeight - vertScale(value)}\n                                        width={n.data.eventID == 'task' ? metricSquare + 5 : 0}\n                                        height={.5}></rect> */}\n\n\n                                    <rect className='count' key={'d_' + n.data.eventID + Math.random()} style={{ fill: colorScale(value), opacity: .8 }} // 'rx': metricSquare \n                                        x={0}\n                                        y={labelHeight - vertScale(maxValue)}\n                                        width={n.data.eventID == 'task' ? metricSquare : 0}\n                                        height={Math.abs(vertScale(avg) - vertScale(value))}></rect>\n\n                                    {/* {i == metrics.length - 1 ? <line x1={xScale(n.data.elapsedTime) + textWidth + barPadding + (i + 1) * (metricSquare + barPadding)} y1={yScale(n.y)} x2={xScale(n.data.elapsedTime) + textWidth + barPadding + (i + 1) * (metricSquare + barPadding)} y2={yScale(n.y) + labelHeight} style={{ \"stroke\": \"rgb(0,0,0,0.25)\", \"strokeWidth\": .8}}></line> */}\n                                        {/* : ''} */}\n\n                                </g>\n                            })}\n                        </>\n\n                        return <></> //metricPlot\n                    }\n\n\n                    )}\n                    {phases.map(p =>\n                        <text\n                            style={{ fontSize: \"1em\", textAnchor: \"start\", fill: 'rgb(90,90,90)' }}\n                            x={xScale(p.elapsedTime)}\n                            y={axisHeight + 5}>\n                            {\" \"}\n                            {p.label}{\" \"}\n                        </text>\n                    )}\n                    <text\n                        style={{ fontSize: \"1em\", textAnchor: \"start\", fill: 'rgb(90,90,90)' }}\n                        x={xScale(maxTime) + 5}\n                        y={axisHeight - 7}>\n                        {\" \"}\n                        {Math.round(maxTime) + ' min'}{\" \"}\n                    </text>\n\n\n                </g>\n            </svg>)\n    }\n\n    function hovered(d) {\n        if (hoveredElement !== d.uniqueID) {\n            setHovered(d.uniqueID)\n        }\n\n    }\n\n    useEffect(() => {\n        if (data) {\n            participants = data.participants\n            participants.map(p => {\n                p.study.map(d => {\n                    d.uniqueID = d.eventID + '_' + Math.random()\n                })\n            })\n        }\n\n    }, [data])\n\n    let [hoveredElement, setHovered] = useState();\n\n    let participants, conditionGroups;\n    if (data) {\n        participants = data.participants\n        //the concept of a single condition per participant is not always valid. \n        // participants.map(p => p.condition = p.study[0].condition)\n        let allLevels = participants.map(p => p.study.map(s => s.level)).flat();\n        // console.log(allLevels)\n        categories = [... new Set(participants.map(p => p.study.map(s => s.category)).flat())];\n        xDomain = d3.extent(participants, d => d.minutesToComplete);\n        yDomain = d3.extent(allLevels);\n        // console.log(yDomain)\n        conditionGroups = groupBy(participants, 'condition');\n    }\n\n\n    // })\n    let colorScale = d3.scaleLinear()\n        // .domain(d3.extent(allCounts))\n        .domain([0, 800])\n        .range([0.3, 1])\n\n    //Only render when all API calls have returned \n    let ready = data;\n    // if (ready) {\n    //     // console.log(data)\n    // }\n    // console.log('events', eventGroups)\n    return (ready == undefined ? <></> : <React.Fragment key={'events'}>\n        <Box m={2} style={{ display: 'inline-block' }} >\n            <Card className={classes.root} key={'participantOverview'}  >\n                <CardContent>\n                    <Typography variant=\"h5\" component=\"h2\">\n                        Participant Timeline\n                </Typography>\n                    {/* <Typography className={classes.pos} color=\"textSecondary\"  >\n                        Event Sequences\n                    </Typography> */}\n                    <Divider />\n                    <Box mt={2} >\n                        <Grid container className={classes.root} spacing={2}>\n                            {Object.keys(conditionGroups).map(cond =>\n                                <Grid item xs={12} key={cond}>\n                                    <Grid container justify=\"flex-start\" spacing={2}>\n                                        {/* <Box display=\"flex\" justifyContent=\"center\" p={2}>\n                                            <Typography style={{ display: 'block' }} color=\"primary\" variant='overline'  >\n                                                {cond}\n                                            </Typography>\n                                        </Box> */}\n\n                                        <Divider />\n\n                                        {conditionGroups[cond].slice(0, 5).map(participant => {\n                                            return <>\n                                                <Grid key={participant.participantID} item>\n                                                    <Box borderBottom={1} boxShadow={0} p={1} style={{ borderColor: 'rgba(171, 171, 171, 0.5)' }}>\n                                                        {/* <Box display=\"flex\" justifyContent=\"flex-end\"> */}\n\n                                                        <Typography style={{ display: 'block' }} color=\"primary\" variant='overline'  >\n                                                            {'ParticipantID: ' + participant.participantID }\n                                                        </Typography>\n                                                        <Typography style={{ display: 'block' }} color=\"primary\" variant='overline'  >\n                                                            {'Avg. Accuracy: ' + (Math.round(participant.averageAccuracy * 100) / 100 || undefined) }\n                                                        </Typography>\n                                                        {/* <Typography style={{ display: 'block' }} color=\"primary\" variant='overline'  >\n                                                                {'ID:' + participant.participantID.slice(0, 3) + '...' + participant.participantID.slice(-3)}\n                                                            </Typography> */}\n                                                        {/* </Box> */}\n\n                                                        {eventMap(participant.study, { width: 1600, height: 25 })}\n                                                    </Box>\n\n                                                </Grid>\n                                            </>\n                                        }\n\n                                        )}\n                                    </Grid>\n                                </Grid>)}\n\n                        </Grid>\n                    </Box>\n                </CardContent>\n            </Card>\n        </Box>\n\n    </React.Fragment>\n\n    );\n}\n\n\n// virtualized list\n{/* <Grid container className={classes.root} spacing={2}>\n{ Object.keys(conditionGroups).map(cond=>{\n    let group = conditionGroups[cond];\n    function rowRenderer({\n        key, // Unique key within array of rows\n        index, // Index of row within collection\n        isScrolling, // The List is currently being scrolled\n        isVisible, // This row is visible within the List (eg it is not an overscanned row)\n        style, // Style object to be applied to row (to position it)\n      }) {\n          let el = group[index]\n        return (\n            <Grid key={el.participantID} item>\n            <Typography style={{ display: 'block' }} color=\"primary\" variant='subtitle1'  >\n            {'Avg. Accuracy: ' + el.averageAccuracy}\n            </Typography>\n            <Typography style={{ display: 'block' }} color=\"primary\" variant='overline'  >\n            {el.participantID.slice(0,3) + '...' +  el.participantID.slice(el.participantID.length-4,3)}\n            </Typography>\n            \n            {eventMap(el.study, { width: 800, height: 50 })}\n            </Grid>\n        );\n      }\n\n      return <>                            \n    <Grid item xs={6}>\n    <Grid container justify=\"flex-start\" spacing={2}>\n    <Typography style={{ display: 'block' }} color=\"primary\" variant='overline'  >\n     {cond}\n    </Typography>\n    <Divider />\n    <List\n            width={1000}\n            height={1000}\n            rowCount={group.length}\n            rowHeight={20}\n            rowRenderer={rowRenderer}\n            />\n              </Grid>\n    </Grid>\n        </>\n\n    }\n        // conditionGroups[cond].map(participant =>{\n         \n  )})\n\n</Grid> */}\n","import React, { useContext } from \"react\";\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Box from \"@material-ui/core/Box\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport TrendingFlatIcon from \"@material-ui/icons/TrendingFlat\";\nimport Divider from \"@material-ui/core/Divider\";\n\nimport { useFetchAPIData } from \"../hooks/hooks\";\n\n// import * as PouchDB from 'pouchdb-browser';\n\nimport * as d3 from \"d3\";\n\nimport ProvenanceDataContext from \"../components/ProvenanceDataContext\";\nimport ProvenanceIsolatedNodes from \"../components/ProvenanceIsolatedNodes\";\n\nimport Grid, { GridSpacing } from \"@material-ui/core/Grid\";\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 275,\n    flexGrow: 1,\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\",\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\n\nfunction scale(width, maxValue) {\n  return d3.scaleLinear().range([10, width]).domain([0, maxValue]);\n}\n\n\n\nexport default function Upload() {\n\n  const classes = useStyles();\n  const bull = <span className={classes.bullet}>•</span>;\n\n  const { data } = useContext(\n    ProvenanceDataContext\n  );\n\n  // })\n  let colorScale = d3\n    .scaleLinear()\n    // .domain(d3.extent(allCounts))\n    .domain([0, 800])\n    .range([0.3, 1]);\n\n  //Only render when all API calls have returned\n  let ready = data\n  // console.log('actions', actions)\n  return ready == undefined ? (\n    <></>\n  ) : (\n      <>\n\n        {data.tasks.map(task => {\n          let taskTooltip = <Typography>{task.prompt}</Typography>;\n          return (\n            <Box\n              m={2}\n              key={\"box_\" + task.taskID}\n              style={{ display: \"inline-block\" }}>\n              {/* style={{ 'width': 600 }}  */}\n              <Card className={classes.root} key={task.taskID}>\n                <CardContent>\n                  <Typography variant=\"h5\" component=\"h2\">\n                    {task.name}\n                  </Typography>\n                  <Tooltip title={taskTooltip}>\n                    <Typography className={classes.pos} color=\"textSecondary\">\n                      {task.prompt.slice(0, 60)}\n                    </Typography>\n                  </Tooltip>\n                  <Divider />\n\n                  {Object.keys(task.conditions).map(key => {\n                    let condition = task.conditions[key];\n                    let freqPattern = condition.patterns[0].topK;\n\n                    // let frequentActions = condition.actions.map(a => ({ event: a.label, id: a.actionID, count: a.count, scale: colorScale(a.count) })) //actions.filter(a => a.taskID == task.taskID && a.condition == condition).splice(0, 5).map(a => ({ event: a.label, id: a.actionID, count: a.count, scale: colorScale(a.count) }))\n                    let filteredMetrics = condition.stats //metrics.filter(m => m.group.taskID == task.taskID && m.group.condition == condition);\n\n                    let metricValues = [\n                      ...new Set(filteredMetrics.map((m) => m.metric)),\n                    ]; // console.log(frequentActions)\n\n                    let nodeWidth = 25;\n                    let characterWidth = 5;\n                    let textHeight = 8\n                    let xScale = d3.scaleLinear().domain([0, 1]).range([0, nodeWidth + 10])\n                    let yScale = d3.scaleLinear().domain([0, 1]).range([0, 15])\n                    let colorScale = d3.scaleOrdinal(d3.schemeTableau10).domain(data.actions);\n\n                    let renderPattern = function (nodes) {\n                      let background = nodes.map((n) => {\n                        return <>\n\n                          <line x1={n.x + nodeWidth / 2} y1={yScale(n.y)} x2={n.x + nodeWidth / 2} y2={yScale(0) + nodeWidth} style={{ stroke: 'rgb(150,150,150)', strokeWidth: '1.2px', 'strokeLinecap':'round' }}></line>\n                          <line x1={n.x + nodeWidth / 2} y1={yScale(n.y)} x2={n.x + nodeWidth / 2 + 3} y2={yScale(n.y)} style={{ stroke: 'rgb(150,150,150)', strokeWidth: '1.2px' }}></line>\n                          <rect className='count' key={'background_' + n.event} style={{ fill: colorScale(n.data.event), stroke: 'white', strokeWidth: '1px', 'rx': 2 }}\n                            x={n.x}\n                            y={yScale(0)}\n                            width={nodeWidth}\n                            height={nodeWidth}></rect>\n                        </>\n\n                      })\n\n                      let labels = nodes.map((n) => {\n                        return <>\n                          <rect className='count' key={'background_' + n.event} style={{ fill: 'white', stroke: 'white', strokeWidth: '1px' }}\n                            x={n.x + nodeWidth / 2+3}\n                            y={yScale(n.y)-2}\n                            width={n.labelExtent}\n                            height={textHeight}></rect>\n\n                          <text\n                            style={{ fontSize: \".75em\", textAnchor: \"start\", fill: 'rgb(90,90,90)' }}\n                            x={n.x + nodeWidth / 2 + 5 }\n                            y={yScale(n.y) + textHeight/2}>\n                            {\" \"}\n                            {n.data.event}{\" \"}\n                          </text>\n                        </>\n\n                      })\n\n                      return <svg width={300} height={yScale(Math.max(...nodes.map(n => n.y))) + 50} >\n                        <g style={{ \"transform\": \"translate(50px, 30px)\" }}>\n\n                          {background} {labels}\n                        </g>\n\n\n                      </svg>\n                    }\n\n                    return (\n                      <React.Fragment key={'taskcard_' + key}>\n                        <Typography variant=\"overline\">{key}</Typography>\n\n                        <Grid container className={classes.root} spacing={2}>\n                          <Grid item xs={12}>\n                            <Grid container justify=\"flex-start\" spacing={2}>\n                              <Grid key={\"prov\"} item>\n                                <>{[0, 1, 2].map(i => {\n                                  let frequentActions = freqPattern[i].seq.map(a => ({ event: a, id: a, count: freqPattern[i].count, scale: colorScale(freqPattern[i].count) })) //actions.filter(a => a.taskID == task.taskID && a.condition == condition).splice(0, 5).map(a => ({ event: a.label, id: a.actionID, count: a.count, scale: colorScale(a.count) }))\n\n                                  let evenlabelPos = []\n                                  let eveny = 1;\n                                  let labelPos = []\n                                  let y = 0.5;\n                                  let nodes = frequentActions.map((d, i) => {\n                                    // console.log(d.shortName)\n                                    let labelStart = xScale(i)\n                                    let labelExtent = d.event.length * characterWidth + 30;\n                                    let n = {};\n                                    n['data'] = d;\n                                    let level\n                                    if (i%2 == 0) {\n                                       level = evenlabelPos.find(p => p.x < labelStart);\n                                    }else{\n                                      level = labelPos.find(p => p.x < labelStart);\n                                   }\n                                    // console.log(level)\n                                    if (!level) {\n                                      if (i%2 == 0){\n                                        eveny = eveny + 1;\n                                        evenlabelPos.push({ y:eveny, x: labelExtent, label: d.shortName })\n                                        n['y'] = eveny;\n                                      } else {\n                                        y = y - 1;\n                                        labelPos.push({ y, x: labelExtent, label: d.shortName })\n                                        n['y'] = y;\n                                      }\n                                  \n                                    } else {\n\n                                      if (i % 2 == 0) {\n                                        n['y'] = level.y\n                                        labelPos = labelPos.filter(p => p.y !== level.y);\n                                        labelPos.push({ y: level.y, x: labelExtent, label: d.shortName })\n                                        labelPos.sort((a, b) => a.y < b.y ? -1 : 1)\n                                      } else {\n                                        n['y'] = level.y\n                                        labelPos = labelPos.filter(p => p.y !== level.y);\n                                        labelPos.push({ y: level.y, x: labelExtent, label: d.shortName })\n                                        labelPos.sort((a, b) => a.y < b.y ? -1 : 1)\n                                      }\n\n                                      \n                                    }\n                                    n['x'] = labelStart;\n                                    n['labelExtent'] = labelExtent\n                                    return n;\n                                  })\n\n                                  return <Box mt={\"5px\"} mb={\"6px\"}>\n                                    {renderPattern(nodes)}\n                                  </Box>\n                                }\n                                )}\n                                </>\n                              </Grid>\n                            </Grid>\n                          </Grid>\n                        </Grid>\n                        <Divider />\n                      </React.Fragment>\n                    );\n                  })}\n                  <div></div>\n                </CardContent>\n                <CardActions>\n                  <Button size=\"small\">Explore</Button>\n                </CardActions>\n              </Card>\n            </Box>\n          );\n        })}\n      </>\n    );\n}\n","//@ts-nocheck\nimport { storiesOf } from \"@storybook/react\";\nimport React, { useState, useRef, useContext, useEffect, useMemo } from \"react\";\nimport { start } from \"repl\";\nimport { withKnobs, optionsKnob as options } from \"@storybook/addon-knobs\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Modal from \"@material-ui/core/Modal\";\nimport ColorPicker from \"material-ui-color-picker\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { IsolatedNode } from \"./ProvenanceIsolatedNodes\";\nimport ProvenanceDataContext from \"./ProvenanceDataContext\";\nimport Button from \"@material-ui/core/Button\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport Popper from \"@material-ui/core/Popper\";\nimport EventManager, { GroupedList } from \"./EventManager\";\nimport styled from \"styled-components\";\nimport Switch from \"@material-ui/core/Switch\";\n\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport { values } from \"mobx\";\nconst Item = styled.div`\n  display: flex;\n  user-select: none;\n  padding: 0.5rem;\n  margin: 0 0 0.5rem 0;\n  align-items: flex-start;\n  align-content: flex-start;\n  line-height: 1.5;\n  border-radius: 3px;\n  background: #fff;\n  border: 1px ${(props) => (props.isDragging ? \"dashed #000\" : \"solid #ddd\")};\n`;\n\nconst Clone = styled(Item)`\n  ~ div {\n    transform: none !important;\n  }\n`;\n\nfunction checkIfGroupDuplicates(allItemConfig) {\n  const usedGroupedElements = {};\n  let duplicatedFlag = false;\n  Object.entries(allItemConfig).map(([key, value]) => {\n    if (value.type === \"group\") {\n      value.elements.forEach((element) => {\n        if (usedGroupedElements[element.id]) {\n          duplicatedFlag = true;\n          return;\n        }\n        usedGroupedElements[element.id] = true;\n      });\n    }\n  });\n  return duplicatedFlag;\n}\nconst ActionLegendDragContainer = (props) => {\n  /*const { actionConfigurationsList, setActionConfigurationsList } = useContext(\n    ProvenanceDataContext\n  );*/\n  // console.log(props);\n  const {\n    actionConfigurations,\n    setActionConfigurationsList,\n    collapsed,\n    handleActionItemEdit,\n    isActionLegendEditing,\n    hashMapConfig,\n  } = props;\n  const listRef = useRef(null);\n\n  function handleAddConfigurationToList(item) {\n    const copy = [...actionConfigurations];\n    copy.push(item);\n    setActionConfigurationsList(copy);\n  }\n  /*function handleAddConfigurationToList(item) {\n    const copy = [...actionConfigurationsList];\n    copy.push(item);\n    setActionConfigurationsList(copy);\n  }*/\n\n  function onDragEnd(result) {\n    const { source, destination } = result;\n\n    // dropped outside the list\n    if (!destination) {\n      return;\n    }\n    let copyListItem, copyListEvents;\n    switch (source.droppableId) {\n      case destination.droppableId: // if dropped on same list\n        copyListEvents = { ...listEvents };\n\n        copyListItem = JSON.parse(\n          JSON.stringify(copyListEvents[destination.droppableId])\n        );\n        copyListItem = Object.assign(copyListItem, {\n          elements: reorder(\n            listEvents[source.droppableId].elements,\n            source.index,\n            destination.index\n          ),\n        });\n        handleActionConfigurationChange(copyListItem);\n\n        copyListEvents[destination.droppableId] = copyListItem;\n\n        //setListEvents(copyListEvents);\n        break;\n      case \"ITEMS\": // if dragged from items\n        copyListEvents = { ...listEvents };\n\n        copyListItem = JSON.parse(\n          JSON.stringify(copyListEvents[destination.droppableId])\n        );\n        copyListItem = Object.assign(copyListItem, {\n          elements: copy(\n            actionConfigurations,\n            listEvents[destination.droppableId].elements,\n            source,\n            destination\n          ),\n        });\n        copyListEvents[destination.droppableId] = copyListItem;\n\n        // console.log(\"in list event\", copyListItem, copyListEvents);\n        if (checkIfGroupDuplicates(copyListEvents)) {\n          console.error(\"cannot add duplicate items to group\");\n          return;\n        }\n        handleActionConfigurationChange(copyListItem);\n        //setListEvents(copyListEvents);\n        break;\n      default:\n        // if moved from a list\n        copyListEvents = { ...listEvents };\n        // move in between lists\n        let copiedSource = JSON.parse(\n          JSON.stringify(copyListEvents[source.droppableId])\n        );\n        let copiedDestination = JSON.parse(\n          JSON.stringify(copyListEvents[destination.droppableId])\n        );\n\n        const movedChanges = move(\n          listEvents[source.droppableId].elements,\n          listEvents[destination.droppableId].elements,\n          source,\n          destination\n        );\n\n        copiedSource = Object.assign(copiedSource, {\n          elements: movedChanges[source.droppableId],\n        });\n        copiedDestination = Object.assign(copiedDestination, {\n          elements: movedChanges[destination.droppableId],\n        });\n        handleActionConfigurationChange(copiedSource);\n        handleActionConfigurationChange(copiedDestination);\n\n        copyListEvents[source.droppableId] = copiedSource;\n        copyListEvents[destination.droppableId] = copiedDestination;\n\n        //setListEvents(copyListEvents);\n\n        break;\n    }\n  }\n\n  function handleActionConfigurationChange(item) {\n    // match item on the id, change it\n    const index = actionConfigurations.findIndex(\n      (config) => config.id === item.id\n    );\n    let copy = [...actionConfigurations];\n    copy[index] = item;\n    setActionConfigurationsList(copy);\n  }\n  // filter\n\n  let listEvents = {};\n  actionConfigurations.forEach((config) => {\n    listEvents[config.id] = config;\n  });\n\n  /*return (\n    <GroupedList\n      listEvents={listEvents}\n      handleActionConfigurationChange={handleActionConfigurationChange}\n      handleAddGroup={handleAddConfigurationToList}\n      initialItems={actionConfigurationsList}\n      handleEditActionConfiguration={handleEditActionConfiguration}\n      type=\"sequence\"></GroupedList>*/\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <ActionLegendPresentational\n        {...props}\n        listRef={listRef}></ActionLegendPresentational>\n      {listRef.current && isActionLegendEditing && (\n        <Pop\n          hashMapConfig={hashMapConfig}\n          actionConfigurationsList={actionConfigurations}\n          handleAddConfigurationToList={handleAddConfigurationToList}\n          reference={listRef.current}\n          open={!collapsed}\n          handleActionItemEdit={handleActionItemEdit}></Pop>\n      )}\n    </DragDropContext>\n  );\n};\nfunction compileActionListToHashTable(list) {\n  let newActionObject = {};\n  list.forEach((item) => {\n    let newObject = {};\n    newObject[item.id] = item;\n    Object.assign(newActionObject, newObject);\n  });\n  return newActionObject;\n}\nexport const ActionLegend = (props) => {\n  const [actionItemBeingEdited, setActionItemBeingEdited] = useState(null);\n  const [isActionLegendEditing, setIsActionLegendEditing] = useState(false);\n  const { actionConfigurationsList, setActionConfigurationsList } = useContext(\n    ProvenanceDataContext\n  );\n  useEffect(() => {\n    setVolatileActionConfigurationList(actionConfigurationsList);\n  }, [actionConfigurationsList]);\n  const [\n    volatileActionConfigurationList,\n    setVolatileActionConfigurationList,\n  ] = useState(actionConfigurationsList);\n\n  const hashMapConfig = useMemo(() => {\n    const hashConfig = compileActionListToHashTable(\n      volatileActionConfigurationList\n    );\n    // console.log(\n    //   \"compiling new configs\",\n    //   hashConfig,\n    //   volatileActionConfigurationList\n    // );\n    return hashConfig;\n  }, [volatileActionConfigurationList]);\n  function cancelChanges() {\n    // set to orgiinal\n    setVolatileActionConfigurationList(actionConfigurationsList);\n    setIsActionLegendEditing(false);\n  }\n  function handleSaveActionConfiguration(newConfiguration) {\n    const configurationIndex = volatileActionConfigurationList.findIndex(\n      (config) => config.id === newConfiguration.id\n    );\n    let configCopy = [...volatileActionConfigurationList];\n    configCopy[configurationIndex] = newConfiguration;\n\n    // if an action configuration isn't a raw event and was deleted, remove it.\n    /*if (newConfiguration.type !== \"raw\" && newConfiguration.hidden) {\n      console.log(\"deleting config\", configCopy);\n      configCopy.splice(configurationIndex, 1);\n    }*/\n    setVolatileActionConfigurationList(configCopy);\n    setActionItemBeingEdited(null);\n  }\n  function saveChanges() {\n    setActionConfigurationsList(volatileActionConfigurationList);\n    setIsActionLegendEditing(false);\n  }\n  return (\n    <div>\n      {!props.collapsed ? (\n        isActionLegendEditing ? (\n          <div>\n            <Button variant={\"primary\"} onClick={saveChanges}>\n              Apply Changes\n            </Button>\n            <Button variant=\"secondary\" onClick={cancelChanges}>\n              Cancel\n            </Button>\n          </div>\n        ) : (\n          <Button\n            variant={\"primary\"}\n            onClick={() => setIsActionLegendEditing(true)}>\n            Edit Action List\n          </Button>\n        )\n      ) : null}\n      <ActionLegendDragContainer\n        hashMapConfig={hashMapConfig}\n        isActionLegendEditing={isActionLegendEditing}\n        setActionConfigurationsList={setVolatileActionConfigurationList}\n        actionConfigurations={volatileActionConfigurationList}\n        handleActionItemEdit={\n          isActionLegendEditing ? setActionItemBeingEdited : null\n        }\n        collapsed={props.collapsed}></ActionLegendDragContainer>\n      {actionItemBeingEdited && (\n        <Modal\n          open={!!actionItemBeingEdited}\n          onClose={() => setActionItemBeingEdited(null)}\n          style={{\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n          }}\n          aria-labelledby=\"simple-modal-title\"\n          aria-describedby=\"simple-modal-description\">\n          <EditActionForm\n            actionConfiguration={actionItemBeingEdited}\n            handleActionConfigurationCancel={() =>\n              setActionItemBeingEdited(null)\n            }\n            handleActionConfigurationChange={\n              handleSaveActionConfiguration\n            }></EditActionForm>\n        </Modal>\n      )}\n    </div>\n  );\n};\n\nclass ActionConfiguration {\n  constructor(icon, name, id, color) {\n    this.icon = icon;\n    this.name = name;\n    this.id = id;\n    this.color = color;\n  }\n}\n\nconst CustomTypeFields = ({\n  volatileConfiguration,\n  handleConfigurationPropertyChange,\n}) => {\n  let fields;\n  if (volatileConfiguration.type === \"raw\") {\n    fields = (\n      <Switch\n        checked={volatileConfiguration.hidden}\n        onChange={(event) =>\n          handleConfigurationPropertyChange(\"hidden\", event.target.value)\n        }\n        name=\"checkedA\"\n        inputProps={{ \"aria-label\": \"secondary checkbox\" }}\n      />\n    );\n  } else {\n    fields = (\n      <Button onClick={() => {}} color=\"secondary\">\n        Delete\n      </Button>\n    );\n  }\n  return <div>{fields}</div>;\n};\n\nconst EditActionForm = ({\n  actionConfiguration,\n  handleActionConfigurationChange,\n  handleActionConfigurationCancel,\n}) => {\n  // console.log(\"in edit action form\", actionConfiguration);\n\n  const [volatileConfiguration, setVolatileConfiguration] = useState(\n    actionConfiguration\n  );\n  // console.log(\"edit form volatile config\", volatileConfiguration);\n  if (!actionConfiguration.id) {\n    // console.error(`action configuration is missing an id.`);\n    return <div></div>;\n  }\n  function handleConfigurationPropertyChange(key, newValue) {\n    // console.log(\"property changing\", key, newValue);\n    let clonedConfiguration = JSON.parse(JSON.stringify(volatileConfiguration));\n    let newConfiguration = {};\n    newConfiguration[key] = newValue;\n\n    clonedConfiguration = Object.assign(clonedConfiguration, newConfiguration);\n    setVolatileConfiguration(clonedConfiguration);\n  }\n\n  return (\n    <div\n      style={{\n        width: \"300px\",\n        height: \"500px\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        backgroundColor: \"white\",\n      }}>\n      <div style={{ order: 0, margin: \"auto\" }}>\n        <TextField\n          value={volatileConfiguration[\"id\"]}\n          onChange={(newValue) =>\n            handleConfigurationPropertyChange(\"id\", newValue.target.value)\n          }\n          disabled\n          id=\"standard-basic\"\n          label={\"id\"}\n        />\n      </div>\n      <div style={{ order: 1, margin: \"auto\" }}>\n        <TextField\n          value={volatileConfiguration[\"name\"]}\n          onChange={(newValue) =>\n            handleConfigurationPropertyChange(\"name\", newValue.target.value)\n          }\n          id=\"standard-basic\"\n          label={\"name\"}\n        />\n      </div>\n      <div style={{ order: 2, margin: \"auto\" }}>\n        <label\n          for={\"colorPicker\"}\n          className={\n            \"MuiFormLabel-root MuiInputLabel-root MuiInputLabel-animated MuiInputLabel-shrink MuiFormLabel-filled\"\n          }>\n          Action Color\n        </label>\n        <ColorPicker\n          name={\"colorPicker\"}\n          id={\"colorPicker\"}\n          defaultValue={volatileConfiguration[\"color\"]}\n          value={volatileConfiguration[\"color\"]}\n          onChange={(newValue) => {\n            handleConfigurationPropertyChange(\"color\", newValue);\n          }}></ColorPicker>\n      </div>\n\n      <div style={{ order: 3, margin: \"auto\" }}>\n        <label\n          for={\"deleteToggle\"}\n          className={\n            \"MuiFormLabel-root MuiInputLabel-root MuiInputLabel-animated MuiInputLabel-shrink MuiFormLabel-filled\"\n          }>\n          {volatileConfiguration.type === \"raw\"\n            ? \"Hide Element\"\n            : \"Delete Element\"}\n        </label>\n        <Switch\n          id={\"deleteToggle\"}\n          checked={volatileConfiguration.hidden}\n          onChange={(event) =>\n            handleConfigurationPropertyChange(\n              \"hidden\",\n              !volatileConfiguration.hidden\n            )\n          }\n          name=\"checkedA\"\n          inputProps={{ \"aria-label\": \"secondary checkbox\" }}\n        />\n      </div>\n      <div style={{ order: 4 }}></div>\n      <div style={{ order: 5, margin: \"auto\" }}>\n        <Button\n          color=\"primary\"\n          onClick={() =>\n            handleActionConfigurationChange(volatileConfiguration)\n          }>\n          Submit\n        </Button>\n        <Button onClick={handleActionConfigurationCancel}>Cancel</Button>\n      </div>\n    </div>\n  );\n};\nfunction uuid() {\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n    var r = (Math.random() * 16) | 0,\n      v = c == \"x\" ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n/**\n * Moves an item from one list to another list.\n */\nconst copy = (source, destination, droppableSource, droppableDestination) => {\n  const sourceClone = Array.from(source);\n  const destClone = Array.from(destination);\n  const item = sourceClone[droppableSource.index];\n\n  destClone.splice(droppableDestination.index, 0, { ...item, dragId: uuid() });\n  return destClone;\n};\n\nconst move = (source, destination, droppableSource, droppableDestination) => {\n  const sourceClone = Array.from(source);\n  const destClone = Array.from(destination);\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\n\n  destClone.splice(droppableDestination.index, 0, removed);\n\n  const result = {};\n  result[droppableSource.droppableId] = sourceClone;\n  result[droppableDestination.droppableId] = destClone;\n\n  return result;\n};\nconst Pop = ({\n  open,\n  handleActionItemEdit,\n  reference,\n  handleAddConfigurationToList,\n  actionConfigurationsList,\n  hashMapConfig,\n}) => {\n  // console.log(\"in render popover\", open, handleActionItemEdit, reference);\n  return (\n    <div>\n      {\n        <Popper\n          open={open}\n          id={\"hidingpop\"}\n          anchorEl={reference}\n          placement={\"right-start\"}>\n          <div\n            style={{\n              backgroundColor: \"white\",\n              width: \"650px\",\n              height: \"100%\",\n              padding: \"8px\",\n              display: \"flex\",\n              overflow: \"auto\",\n              border: \"1px lightgray solid\",\n            }}>\n            {\n              <EventManager\n                hashMapConfig={hashMapConfig}\n                actionConfigurationsList={actionConfigurationsList}\n                handleAddConfigurationToList={handleAddConfigurationToList}\n                handleEditActionConfiguration={\n                  handleActionItemEdit\n                }></EventManager>\n            }\n          </div>\n        </Popper>\n      }\n    </div>\n  );\n};\nconst ActionLegendPresentational = ({\n  actionConfigurations,\n  handleActionItemEdit,\n  collapsed,\n  listRef,\n  hashMapConfig,\n}) => {\n  const renderedItems = React.useMemo(() => {\n    return actionConfigurations.map((config) =>\n      Object.assign(config, { dragId: uuid() })\n    );\n  }, [actionConfigurations]);\n  /*\n  <List ref={listRef}>\n    {actionConfigurations.map((actionConfiguration) => {\n      return (\n        <ActionItemNode\n          collapsed={collapsed}\n          actionConfiguration={actionConfiguration}\n          handleActionItemEdit={handleActionItemEdit}></ActionItemNode>\n      );\n    })}\n  </List>\n  */\n\n  // console.log(\"at hashmap config\", hashMapConfig);\n  return (\n    <React.Fragment>\n      <div ref={listRef}>\n        <Droppable droppableId=\"ITEMS\" isDropDisabled={true}>\n          {(provided, snapshot) => (\n            <div\n              ref={provided.innerRef}\n              isDraggingOver={snapshot.isDraggingOver}>\n              {renderedItems.map((item, index) => (\n                <Draggable\n                  isDragDisabled={collapsed}\n                  key={item.dragId}\n                  draggableId={item.dragId}\n                  index={index}>\n                  {(provided, snapshot) => (\n                    <React.Fragment>\n                      <div\n                        ref={provided.innerRef}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        isDragging={snapshot.isDragging}\n                        style={provided.draggableProps.style}>\n                        {\n                          <ActionItemNode\n                            hashMapConfig={hashMapConfig}\n                            collapsed={collapsed}\n                            handleActionItemEdit={handleActionItemEdit}\n                            actionConfiguration={item}></ActionItemNode>\n                        }\n                      </div>\n                      {snapshot.isDragging && (\n                        <div>\n                          <ActionItemNode\n                            collapsed={collapsed}\n                            hashMapConfig={hashMapConfig}\n                            handleActionItemEdit={handleActionItemEdit}\n                            actionConfiguration={item}></ActionItemNode>\n                        </div>\n                      )}\n                    </React.Fragment>\n                  )}\n                </Draggable>\n              ))}\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport const ActionItemNode = ({\n  actionConfiguration,\n  handleActionItemEdit,\n  collapsed,\n  hashMapConfig,\n}) => {\n  // console.log(\"in node\", actionConfiguration);\n  return (\n    <ListItem>\n      <IsolatedNode\n        node={{ name: actionConfiguration.id }}\n        configToUse={hashMapConfig}></IsolatedNode>\n      {!collapsed && (\n        <React.Fragment>\n          <ListItemText\n            style={{\n              maxWidth: \"160px\",\n              overflow: \"hidden\",\n              textOverflow: \"truncate\",\n            }}>\n            {actionConfiguration.name}\n          </ListItemText>\n          {handleActionItemEdit && (\n            <EditIcon\n              style={{ cursor: \"pointer\", \"margin-left\": \"auto\" }}\n              onClick={() =>\n                handleActionItemEdit(actionConfiguration)\n              }></EditIcon>\n          )}\n        </React.Fragment>\n      )}\n    </ListItem>\n  );\n};\n","import React, { useEffect } from \"react\";\nimport ProvenanceDataContext from \"./ProvenanceDataContext\";\nimport styled from \"styled-components\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport { ActionItemNode } from \"./ActionLegend\";\nimport { Delete } from \"@material-ui/icons\";\nconst EventManager = ({\n  handleAddConfigurationToList,\n  handleEditActionConfiguration,\n  actionConfigurationsList,\n  hashMapConfig,\n}) => {\n  // filter\n\n  return (\n    <div style={{ display: \"flex\" }}>\n      {[\"sequence\", \"group\"].map((type) => {\n        console.log();\n        const typedConfigs = actionConfigurationsList.filter(\n          (config) => config.type === type\n        );\n        const nonHiddenConfigs = typedConfigs.filter((config) => {\n          console.log(config);\n          return config.hidden === 0 || config.hidden === false;\n        });\n        let listEvents = {};\n        nonHiddenConfigs.forEach((config) => {\n          listEvents[config.id] = config;\n        });\n        return (\n          <GroupedList\n            hashMapConfig={hashMapConfig}\n            listEvents={listEvents}\n            handleAddGroup={handleAddConfigurationToList}\n            initialItems={actionConfigurationsList}\n            handleEditActionConfiguration={handleEditActionConfiguration}\n            type={type}></GroupedList>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default EventManager;\n\nconst grid = 8;\n\nconst Content = styled.div`\n  width: 310px;\n`;\n\nconst Item = styled.div`\n  display: flex;\n  user-select: none;\n  padding: 0.5rem;\n  margin: 0 0 0.5rem 0;\n  align-items: flex-start;\n  align-content: flex-start;\n  line-height: 1.5;\n  border-radius: 3px;\n  background: #fff;\n  border: 1px ${(props) => (props.isDragging ? \"dashed #000\" : \"solid #ddd\")};\n`;\n\nconst Clone = styled(Item)`\n  ~ div {\n    transform: none !important;\n  }\n`;\n\nconst Handle = styled.div`\n  display: flex;\n  align-items: center;\n  align-content: center;\n  user-select: none;\n  margin: -0.5rem 0.5rem -0.5rem -0.5rem;\n  padding: 0.5rem;\n  line-height: 1.5;\n  border-radius: 3px 0 0 3px;\n  background: #fff;\n  border-right: 1px solid #ddd;\n  color: #000;\n`;\n\nconst List = styled.div`\n  border: 1px\n    ${(props) => (props.isDraggingOver ? \"dashed #000\" : \"solid #ddd\")};\n  background: #fff;\n  padding: 0.5rem 0.5rem 0;\n  border-radius: 3px;\n  flex: 0 0 150px;\n  font-family: sans-serif;\n`;\n\nconst Kiosk = styled(List)`\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  width: 200px;\n`;\n\nconst Container = styled(List)`\n  margin: 0.5rem 0.5rem 1.5rem;\n`;\n\nconst Notice = styled.div`\n  display: flex;\n  align-items: center;\n  align-content: center;\n  justify-content: center;\n  padding: 0.5rem;\n  margin: 0 0.5rem 0.5rem;\n  border: 1px solid transparent;\n  line-height: 1.5;\n  color: #aaa;\n`;\n\nconst Button = styled.button`\n  display: flex;\n  align-items: center;\n  align-content: center;\n  justify-content: center;\n  margin: 0.5rem;\n  padding: 0.5rem;\n  color: #000;\n  border: 1px solid #ddd;\n  background: #fff;\n  border-radius: 3px;\n  font-size: 1rem;\n  cursor: pointer;\n`;\n\nconst ButtonText = styled.div`\n  margin: 0 1rem;\n`;\nfunction uuid() {\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n    var r = (Math.random() * 16) | 0,\n      v = c == \"x\" ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\nexport const GroupedList = ({\n  initialItems,\n  type,\n  handleAddGroup,\n  handleEditActionConfiguration,\n  listEvents,\n  hashMapConfig,\n}) => {\n  console.log(initialItems);\n\n  useEffect(() => {\n    console.log(\"in unique render of grouped list\");\n  }, []);\n\n  //const [listEvents, setListEvents] = useState({});\n  function addList(e) {\n    //let copyEvents = Object.assign({}, listEvents);\n    let newListName = uuid(); //uuid();\n\n    let newListEvents = {\n      [newListName]: {\n        id: newListName,\n        name: `${type}-${newListName}`,\n        type: type,\n        hidden: false,\n        icon: \"Add\",\n        color: \"#ddd\",\n        elements: [],\n      },\n    };\n    handleAddGroup(newListEvents[newListName]);\n    /*\n    setListEvents((currentEvents) => {\n      let copyEvents = Object.assign({}, currentEvents);\n      copyEvents = Object.assign(copyEvents, newListEvents);\n      console.log(\"about to add\", copyEvents);\n\n      return copyEvents;\n    });*/\n  }\n\n  console.log(listEvents);\n  return (\n    <div>\n      {/*<DragDropContext onDragEnd={onDragEnd}>*/}\n\n      <Content>\n        <Button onClick={addList}>\n          <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n            <path\n              fill=\"currentColor\"\n              d=\"M19,13H13V19H11V13H5V11H11V5H13V11H19V13Z\"\n            />\n          </svg>\n          <ButtonText>Add {type}</ButtonText>\n        </Button>\n        {/*<Droppable droppableID=\"DELETE\">\n          {(provided, snapshot) => <Delete></Delete>}\n                    </Droppable>*/}\n\n        {Object.keys(listEvents).map((list, i) => (\n          <React.Fragment>\n            <Droppable key={list} droppableId={list}>\n              {(provided, snapshot) => (\n                <Container\n                  ref={provided.innerRef}\n                  isDraggingOver={snapshot.isDraggingOver}>\n                  <div>\n                    <ActionItemNode\n                      hashMapConfig={hashMapConfig}\n                      handleActionItemEdit={(actionItem) => {\n                        console.log(\"dywootto in actionitem edit\", actionItem);\n                        handleEditActionConfiguration(actionItem);\n                      }}\n                      actionConfiguration={listEvents[list]}></ActionItemNode>\n                  </div>\n                  {listEvents[list].elements.length\n                    ? listEvents[list].elements.map((item, index) => (\n                        <Draggable\n                          key={item.dragId}\n                          draggableId={item.dragId}\n                          index={index}>\n                          {(provided, snapshot) => {\n                            let copyItem = Object.assign({}, item);\n                            /*copyItem = Object.assign(copyItem, {\n                            dragId: copyItem.dragId,\n                          });*/\n                            return (\n                              <Item\n                                ref={provided.innerRef}\n                                {...provided.draggableProps}\n                                isDragging={snapshot.isDragging}\n                                style={provided.draggableProps.style}>\n                                <div {...provided.dragHandleProps}>\n                                  {\n                                    <ActionItemNode\n                                      hashMapConfig={hashMapConfig}\n                                      actionConfiguration={\n                                        copyItem\n                                      }></ActionItemNode>\n                                  }\n                                </div>\n                              </Item>\n                            );\n                          }}\n                        </Draggable>\n                      ))\n                    : !provided.placeholder && <Notice>Drop items here</Notice>}\n                  {provided.placeholder}\n                </Container>\n              )}\n            </Droppable>\n          </React.Fragment>\n        ))}\n        {Object.keys(listEvents).length === 0 && (\n          <span>\n            No {type}s have been created. Click Add {type} to get started\n            dragging items.\n          </span>\n        )}\n      </Content>\n      {/*</DragDropContext>*/}\n    </div>\n  );\n};\n","import React, { useContext } from \"react\";\nimport { Input } from \"antd\";\nimport { relativeProvenanceData } from \"../common/data/provenanceMocks.js\";\nimport EventAccordion from \"../components/EventAccordion\";\nimport Event_Layers from \"../components/Event_Layers\";\nimport EventManager from \"../components/EventManager\";\nimport EcoIcon from \"@material-ui/icons/Eco\";\nimport { PlusSquareOutlined } from \"@ant-design/icons\";\n\nimport CollapsibleTable from \"../components/EventTable\";\nimport * as d3 from \"d3\";\nimport ProvenanceDataContext from \"../components/ProvenanceDataContext\";\n\nconst { Search } = Input;\n\nconst Overview = ({ location }) => {\n  const { data } = useContext(ProvenanceDataContext);\n\n  const [search, setSearch] = React.useState(\"\");\n\n  function createEvent(value) {\n    {\n      setSearch(\"\");\n      console.log(\"new Event is\", value);\n      newEvent(value);\n    }\n  }\n\n  return (\n    <div style={{ padding: \"15px\" }}>\n      <Search\n        placeholder=\"Create Event Type\"\n        enterButton={<PlusSquareOutlined />}\n        size=\"large\"\n        // onSearch={newEvent}\n        // onChange={event => setSearch(event.target.value)}\n        style={{ width: 672 }}\n        // value={search}\n      />\n      <div style={{ paddingTop: \"15px\" }}>\n        {/* {patternComponent} */}\n        {/* <EventAccordion /> */}\n        {/* <CollapsibleTable data={data} onChange={setData} /> */}\n        {/*\n          <EventAccordion\n            data={data}\n            onChange={(newData) => console.log(newData)}\n          />*/}\n        {\n          <EventManager\n            handleEditActionConfiguration={(val) =>\n              console.log(val)\n            }></EventManager>\n        }\n      </div>\n    </div>\n  );\n};\n\nexport default Overview;\n","import React from \"react\";\nimport TableDataLoader from \"../components/TableDataLoader\";\n\nconst Export = () => {\n  return <div>This is export </div>;\n};\n\nexport default Export;\n","//@ts-nocheck\nimport React, { useState, useRef, useEffect, useMemo } from \"react\";\nimport * as d3 from \"d3\";\nimport { select, event } from \"d3-selection\";\nimport { scaleLinear } from \"d3-scale\";\nimport { brushX } from \"d3-brush\";\nimport { axisBottom } from \"d3-axis\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport Fade from \"@material-ui/core/Fade\";\n\nfunction obtainItemCounts(arr) {\n  let occurrences = {};\n  for (let i = 0, j = arr.length; i < j; i++) {\n    occurrences[arr[i]] = (occurrences[arr[i]] || 0) + 1;\n  }\n  return occurrences;\n}\nexport const CategoricalFilter = (props) => {\n  const { data, width, scale, labels, onFilter = () => {} } = props;\n  const occurrences = useMemo(() => obtainItemCounts(data), [data]);\n  // search through data for all states\n  const [currentFilter, setCurrentFilterInternal] = useState(\n    Object.keys(occurrences)\n  );\n  const height = 20;\n  const fullHeight = 20 + 15;\n  const maxOccurance = Object.values(occurrences).reduce((a, b) =>\n    a > b ? a : b\n  );\n  const yScale = d3.scaleLinear().domain([0, maxOccurance]).range([0, height]);\n  function setCurrentFilter(currentValues) {\n    onFilter(currentValues);\n    setCurrentFilterInternal(currentValues);\n  }\n  return (\n    <svg width={width} height={fullHeight}>\n      {Object.entries(occurrences).map(([key, value], index) => {\n        const color = currentFilter.includes(key) ? \"black\" : \"#cfcfcf\";\n        return (\n          <Tooltip\n            TransitionComponent={Fade}\n            TransitionProps={{ timeout: 600 }}\n            title={key}\n            key={key}\n            PopperProps={{\n              popperOptions: {\n                modifiers: {\n                  offset: {\n                    enabled: true,\n                    offset: \"0px, -6px\",\n                  },\n                },\n              },\n            }}>\n            <g\n              pointerEvents={\"bounding-box\"}\n              key={key}\n              onClick={() => {\n                const indexOfValue = currentFilter.indexOf(key);\n                let temp = Object.assign([], currentFilter);\n\n                if (indexOfValue > -1) {\n                  temp.splice(indexOfValue, 1);\n                } else {\n                  temp.push(key);\n                }\n                setCurrentFilter(temp);\n              }}\n              cursor={\"pointer\"}\n              fill={\"none\"}>\n              <rect\n                x={scale(key)}\n                width={20}\n                height={yScale(value)}\n                y={height - yScale(value)}\n                fill={color}></rect>\n\n              <g transform={`translate(${scale(key)},${height})`} fill={color}>\n                {labels[key]}\n              </g>\n            </g>\n          </Tooltip>\n        );\n      })}\n    </svg>\n  );\n};\n\nexport const Histogram = ({\n  hovered,\n  data,\n  xScale,\n  buckets,\n  yScale,\n  height,\n}) => {\n  const binWidth = 10;\n  const [min, max] = xScale.domain();\n  const currentBinCounter = d3\n    .histogram()\n    .domain([min - 0.001, max + 0.001]) // to make inclusive of threshold\n    .thresholds(buckets.map((bucket) => bucket.x1));\n\n  const currentBins = currentBinCounter(data);\n  const average = d3.mean(data);\n  const bars = (\n    <g transform={`translate(${(1 / 3) * binWidth},0)`}>\n      {buckets.map((bucket, index) => {\n        return (\n          <g key={index}>\n            <rect\n              key={`old${index}`}\n              x={xScale(bucket.x0) - 0.5 * binWidth} // 1/2 xBandwidth to move to middle 1/2 another because of -1 index on xBand domain\n              y={yScale(bucket.length)}\n              width={binWidth}\n              fill={\"gray\"}\n              opacity={0.3}\n              height={height - yScale(bucket.length)}></rect>\n            <rect\n              key={index}\n              x={xScale(bucket.x0) - 0.5 * binWidth} // 1/2 xBandwidth to move to middle 1/2 another because of -1 index on xBand domain\n              y={yScale(currentBins[index].length)}\n              width={binWidth}\n              fill={\"black\"}\n              height={height - yScale(currentBins[index].length)}></rect>\n          </g>\n        );\n      })}\n    </g>\n  );\n\n  return (\n    <g>\n      {\n        <rect\n          width={xScale.range()[1] - xScale.range()[0]}\n          fill={\"lightgray\"}\n          x={0}\n          y={height - 1}\n          height={1}></rect>\n      }\n\n      {bars}\n      <g>\n        {average !== null && (\n          <g>\n            <rect\n              x={xScale(average)}\n              y={0}\n              height={height}\n              width={2}\n              fill={\"rgb(61, 119, 245)\"}></rect>\n            <text\n              style={{\n                fill: \"rgb(61, 119, 245)\",\n                fontSize: \"1em\",\n                textAnchor: \"middle\",\n                stroke: \"#fff\",\n                \"paint-order\": \"stroke\",\n                \"stroke-width\": \"2px\",\n              }}\n              x={xScale(average)}\n              y={height + 14}>\n              {average.toFixed(2)}\n            </text>\n          </g>\n        )}\n      </g>\n      <g className={\"sample group dywootto\"}></g>\n      {hovered && (\n        <>\n          <text\n            style={{\n              fill: \"rgb(0,0,0,0.25)\",\n              fontSize: \"1em\",\n              textAnchor: \"end\",\n              stroke: \"#fff\",\n              \"paint-order\": \"stroke\",\n\n              \"stroke-width\": \"1px\",\n            }}\n            x={10}\n            y={35}>\n            {\" \"}\n            {Math.round(xScale.domain()[0])}{\" \"}\n          </text>\n\n          <text\n            style={{\n              fill: \"rgb(0,0,0,0.25)\",\n              fontSize: \"1em\",\n              textAnchor: \"end\",\n              stroke: \"#fff\",\n              \"paint-order\": \"stroke\",\n\n              \"stroke-width\": \"1px\",\n            }}\n            x={xScale.range()[1]}\n            y={35}>\n            {\" \"}\n            {Math.round(xScale.domain()[1])}{\" \"}\n          </text>\n        </>\n      )}\n    </g>\n  );\n};\n\nconst Brush = (props) => {\n  const { width, height, onChange } = props;\n  const brushRef = useRef(null);\n\n  useEffect(() => {\n    const node = brushRef.current;\n\n    const dayBrush = brushX()\n      .extent([\n        [0, 0],\n        [width, height],\n      ])\n      //.on(\"brush\", brushed)\n      .on(\"end\", brushed);\n\n    select(node)\n      .selectAll(\"g.brush\")\n      .data([0])\n      .enter()\n      .append(\"g\")\n      .attr(\"class\", \"brush\");\n\n    select(node).select(\"g.brush\").call(dayBrush);\n\n    /*\n    Code for updating brush if we want it to dynamically update while brushing\n    function brushed() {\n      console.warn(event);\n      onBrushFunction(event.selection);\n    }*/\n    function brushed() {\n      // if filter cleared, set to all\n      if (!event.selection) {\n        event.selection = [0, width];\n      }\n      console.warn(\"clear\", event);\n      onChange(event.selection);\n    }\n  });\n  return (\n    <svg ref={brushRef} height={height + 15} width={width + 10}>\n      <g transform={\"translate(5,0)\"}>{props.children}</g>\n    </svg>\n  );\n};\n\nconst BrushableHistogram = ({\n  data,\n  xScale,\n  buckets,\n  yScale,\n  height,\n  setMinimum,\n  setMaximum,\n}) => {\n  const width = xScale.range()[1];\n  const [hovered, setHovered] = React.useState(false);\n\n  function setFilterBounds(inputs) {\n    if (inputs?.length !== 2) {\n      inputs = xScale.domain();\n    }\n    // scale inversion\n    setMinimum(xScale.invert(inputs[0]));\n    // set bounds\n    setMaximum(xScale.invert(inputs[1]));\n  }\n\n  return (\n    <div\n      onMouseEnter={() => setHovered(true)}\n      onMouseLeave={() => setHovered(false)}>\n      <Brush width={width} height={height} onChange={setFilterBounds}>\n        <Histogram\n          hovered={hovered}\n          data={data}\n          width={width}\n          height={height}\n          yScale={yScale}\n          xScale={xScale}\n          buckets={buckets}></Histogram>\n      </Brush>\n    </div>\n  );\n};\n\nexport const QuantitativeFilter = ({\n  data,\n  xScale,\n  buckets,\n  height,\n  yScale,\n  onFilter = (val) => {},\n}) => {\n  const [minimum, setMinimum] = useState(d3.min(data));\n  const [maximum, setMaximum] = useState(d3.max(data));\n  const debouncedMin = useDebounce(minimum, 100);\n  const debouncedMax = useDebounce(maximum, 100);\n  useEffect(() => {\n    onFilter({ filterMin: debouncedMin, filterMax: debouncedMax });\n  }, [debouncedMin, debouncedMax]);\n  return (\n    <BrushableHistogram\n      yScale={yScale}\n      xScale={xScale}\n      buckets={buckets}\n      height={height}\n      data={data}\n      setMinimum={setMinimum}\n      setMaximum={setMaximum}></BrushableHistogram>\n  );\n};\nfunction useDebounce(value, delay) {\n  // State and setters for debounced value\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(\n    () => {\n      // Update debounced value after delay\n      const handler = setTimeout(() => {\n        setDebouncedValue(value);\n      }, delay);\n\n      // Cancel the timeout if value changes (also on delay change or unmount)\n      // This is how we prevent debounced value from updating if value is changed ...\n      // .. within the delay period. Timeout gets cleared and restarted.\n      return () => {\n        clearTimeout(handler);\n      };\n    },\n    [value, delay] // Only re-call effect if value or delay changes\n  );\n\n  return debouncedValue;\n}\n","import React from \"react\";\nimport ReactTags from \"react-tag-autocomplete\";\nimport \"./reacttags.css\";\n\nconst TagWrapper = ({ tags, onTagChange, isMaster, id }) => {\n  function handleAddTag(tag) {\n    onTagChange(\"Add\", tag);\n  }\n\n  function handleDeleteTag(i) {\n    const allTags = tags.slice(0);\n    const tag = allTags.splice(i, 1);\n    onTagChange(\"Delete\", tag);\n  }\n  console.log(\"dywootto\", id);\n  return (\n    <div id={id}>\n      <ReactTags\n        autofocus={false}\n        tags={tags}\n        allowNew={true}\n        handleDelete={handleDeleteTag}\n        handleAddition={handleAddTag}\n      />\n    </div>\n  );\n};\nexport default TagWrapper;\n","import React, { useEffect, useContext, useMemo } from \"react\";\nimport styles from \"./EventSearch.module.css\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport { Divider } from \"antd\";\nimport Popover from \"@material-ui/core/Popover\";\nimport Button from \"@material-ui/core/Button\";\nimport Category from \"@material-ui/icons/Category\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Delete from \"@material-ui/icons/Delete\";\nimport ProvenanceDataContext from \"./ProvenanceDataContext\";\nimport { IsolatedNode } from \"./ProvenanceIsolatedNodes\";\nfunction uuidv4() {\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n    var r = (Math.random() * 16) | 0,\n      v = c == \"x\" ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\nconst actions = [\n  \"Finished Task\",\n  \"Select Node\",\n  \"Searched for Node\",\n  \"Dragged Node\",\n  \"Unselect Node\",\n  \"search\",\n  \"colLabel\",\n  \"sort\",\n  \"attrRow\",\n  \"answerBox\",\n  \"cell\",\n  \"rowLabel\",\n  \"cleared all selected nodes\",\n  \"clear\",\n  \"Hard Unselected a Node\",\n  \"Hard Selected a Node\",\n];\nconst COLLECTION = actions.map((actionName) => {\n  return { id: uuidv4(), label: actionName };\n});\n\n// This method is needed for rendering clones of draggables\nconst getRenderItem = (items, className) => (provided, snapshot, rubric) => {\n  const item = items[rubric.source.index];\n  return (\n    <React.Fragment>\n      <div\n        {...provided.draggableProps}\n        {...provided.dragHandleProps}\n        ref={provided.innerRef}\n        style={provided.draggableProps.style}\n        className={snapshot.isDragging ? \"dragging\" : \"\"}>\n        <IsolatedNode node={{ name: item.id }} />\n      </div>\n    </React.Fragment>\n  );\n};\n\nfunction ActionList(props) {\n  return (\n    <div\n      style={{ width: \"100%\", height: \"100%\", backgroundColor: \"whitesmoke\" }}>\n      <Droppable\n        renderClone={getRenderItem(props.items, props.className)}\n        droppableId={props.droppableId}\n        isDropDisabled={true}>\n        {(provided, snapshot) => (\n          <div ref={provided.innerRef} className={props.className}>\n            {props.items.map((item, index) => {\n              const shouldRenderClone =\n                item.id === snapshot.draggingFromThisWith;\n              return (\n                <React.Fragment key={item.id}>\n                  {shouldRenderClone ? (\n                    <div className=\"react-beatiful-dnd-copy\">\n                      {\" \"}\n                      <IsolatedNode node={{ name: item.id }} />\n                    </div>\n                  ) : (\n                    <Draggable draggableId={item.id} index={index}>\n                      {(provided, snapshot) => {\n                        return (\n                          <React.Fragment>\n                            <div\n                              ref={provided.innerRef}\n                              {...provided.draggableProps}\n                              {...provided.dragHandleProps}\n                              className={snapshot.isDragging ? \"dragging\" : \"\"}>\n                              <IsolatedNode\n                                key={`node-${item.id}`}\n                                node={{ name: item.id }}\n                              />\n                            </div>\n                          </React.Fragment>\n                        );\n                      }}\n                    </Draggable>\n                  )}\n                </React.Fragment>\n              );\n            })}\n            {provided.placeholder}\n          </div>\n        )}\n      </Droppable>\n    </div>\n  );\n}\n\nfunction Shop(props) {\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const open = Boolean(anchorEl);\n  const id = open ? \"simple-popover\" : undefined;\n\n  return (\n    <React.Fragment>\n      <IconButton aria-label=\"Open Event List\" onClick={handleClick}>\n        <Category />\n      </IconButton>\n\n      <Popover\n        id={id}\n        open={open}\n        anchorEl={anchorEl}\n        onClose={handleClose}\n        anchorOrigin={{\n          vertical: \"bottom\",\n          horizontal: \"center\",\n        }}\n        transformOrigin={{\n          vertical: \"top\",\n          horizontal: \"center\",\n        }}>\n        <div style={{ overflow: \"auto\", width: \"300px\", height: \"100px\" }}>\n          <ActionList\n            droppableId=\"SHOP\"\n            className={styles.searchOptions}\n            items={props.items}\n          />\n        </div>\n      </Popover>\n    </React.Fragment>\n  );\n}\n\nfunction ShoppingBag(props) {\n  return (\n    <div style={{ width: \"100%\", height: \"100%\" }}>\n      <Droppable droppableId=\"BAG\" direction={\"horizontal\"}>\n        {(provided, snapshot) => (\n          <div ref={provided.innerRef} className={styles.searchBar}>\n            {props.items.map((item, index) => (\n              <Draggable\n                key={item.dragID}\n                draggableId={item.dragID}\n                index={index}>\n                {(provided, snapshot) => (\n                  <div\n                    ref={provided.innerRef}\n                    {...provided.draggableProps}\n                    {...provided.dragHandleProps}\n                    style={provided.draggableProps.style}>\n                    <IsolatedNode node={{ name: item.id }} />\n                  </div>\n                )}\n              </Draggable>\n            ))}\n            {provided.placeholder}\n          </div>\n        )}\n      </Droppable>\n    </div>\n  );\n}\n\nconst reorder = (list, startIndex, endIndex) => {\n  const [removed] = list.splice(startIndex, 1);\n  list.splice(endIndex, 0, removed);\n\n  return [...list];\n};\n\nconst copy = (source, destination, droppableSource, droppableDestination) => {\n  const item = source[droppableSource.index];\n  destination.splice(droppableDestination.index, 0, {\n    ...item,\n    dragID: `copy${uuidv4()}`,\n  });\n  return [...destination];\n};\n\nconst EventSearch = ({ onFilter = (val) => {} }) => {\n  const { actionConfigurationsList } = useContext(ProvenanceDataContext);\n  const collection = useMemo(\n    () =>\n      actionConfigurationsList.map((config) => {\n        let value = Object.assign({}, config);\n        value = Object.assign(value, { dragID: uuidv4() });\n        return value;\n      }),\n    [actionConfigurationsList]\n  );\n\n  const [shoppingBagItems, setShoppingBagItems] = React.useState([]);\n  useEffect(() => {\n    if (onFilter) {\n      onFilter(shoppingBagItems.length > 0 ? shoppingBagItems : null);\n    }\n  }, [shoppingBagItems]);\n  const onDragEnd = React.useCallback(\n    (result) => {\n      const { source, destination } = result;\n\n      // if dragged out of any box, delete it\n      if (!destination) {\n        setShoppingBagItems((state) => {\n          const copy = [...state];\n          copy.splice(source.index, 1);\n\n          return copy;\n        });\n        return;\n      }\n\n      switch (source.droppableId) {\n        case destination.droppableId:\n          setShoppingBagItems((state) =>\n            reorder(state, source.index, destination.index)\n          );\n          break;\n        case \"SHOP\":\n          setShoppingBagItems((state) =>\n            copy(actionConfigurationsList, state, source, destination)\n          );\n          break;\n        default:\n          break;\n      }\n    },\n    [shoppingBagItems]\n  );\n\n  return (\n    <div className={styles.searchContainer}>\n      <DragDropContext onDragEnd={onDragEnd}>\n        <div className={styles.outerSearchBar}>\n          <ShoppingBag items={shoppingBagItems} />\n        </div>\n        <div className={styles.outerSearchOptions}>\n          <Shop items={actionConfigurationsList} />\n        </div>\n        <div className={styles.outerSearchDiscard}>\n          <Discard />\n        </div>\n      </DragDropContext>\n    </div>\n  );\n};\nconst Discard = (props) => {\n  return (\n    <Droppable droppableId={\"DISCARD\"} isDropDisabled={true}>\n      {(provided, snapshot) => (\n        <div ref={provided.innerRef} className={props.className}>\n          <IconButton>\n            {\" \"}\n            <Delete></Delete>\n          </IconButton>\n        </div>\n      )}\n    </Droppable>\n  );\n};\nexport default EventSearch;\n/*const ActionNode = ({ actionName }) => {\n  return <div>{actionName[0]}</div>;\n};\nconst SearchOptions = () => {\n  /*return (\n    <div className={styles.searchOptions}>\n      {\" \"}\n      {actions.map((action) => (\n        <ActionNode actionName={action} />\n      ))}{\" \"}\n    </div>\n  );\n  return <Droppable\n      renderClone={getRenderItem(props.items, props.className)}\n      droppableId={props.droppableId}\n      isDropDisabled={true}\n    >\n      {(provided, snapshot) => (\n        <ul ref={provided.innerRef} className={props.className}>\n          {props.items.map((item, index) => {\n            const shouldRenderClone = item.id === snapshot.draggingFromThisWith;\n            return (\n              <React.Fragment key={item.id}>\n                {shouldRenderClone ? (\n                  <li className=\"react-beatiful-dnd-copy\">{item.label}</li>\n                ) : (\n                  <Draggable draggableId={item.id} index={index}>\n                    {(provided, snapshot) => (\n                      <React.Fragment>\n                        <li\n                          ref={provided.innerRef}\n                          {...provided.draggableProps}\n                          {...provided.dragHandleProps}\n                          className={snapshot.isDragging ? \"dragging\" : \"\"}\n                        >\n                          {item.label}\n                        </li>\n                      </React.Fragment>\n                    )}\n                  </Draggable>\n                )}\n              </React.Fragment>\n            );\n          })}\n          {provided.placeholder}\n        </ul>\n      )}\n    </Droppable>\n};\nconst SearchList = () => {\n  return <div></div>;\n};\nconst SearchBar = () => {\n  const [sequence, setSequenceInternal] = React.useState([\"a\", \"b\", \"c\"]);\n  console.log(sequence);\n  return (\n    <div className={styles.searchBar}>\n      <Droppable droppableId={\"searchBar\"}>\n        {(provided) => {\n          console.log(sequence, provided);\n\n          return (\n            <div {...provided.droppableProps} ref={provided.innerRef}>\n              {sequence.map((item, index) => {\n                return <SearchIcon item={item} index={index}></SearchIcon>;\n              })}\n              {provided.placeholder}\n            </div>\n          );\n        }}\n      </Droppable>\n    </div>\n  );\n};\nconst SearchIcon = ({ item, index }) => {\n  console.log(item, index);\n  return (\n    <Draggable draggableId={`item${index}`} index={index}>\n      {(provided) => {\n        console.log(\"innerest\", `item${index}`);\n        return (\n          <div\n            ref={provided.innerRef}\n            {...provided.draggableProps}\n            {...provided.dragHandleProps}>{`item${index}`}</div>\n        );\n      }}\n    </Draggable>\n  );\n};\n\nexport default () => {\n  console.log(\"search\", styles, styles.searchContainer);\n  function handleSequenceChange(input) {\n    console.log(input);\n  }\n  return (\n    <div className={styles.searchContainer}>\n      <DragDropContext onDragEnd={handleSequenceChange}>\n        <SearchBar></SearchBar>\n        <SearchOptions></SearchOptions>;\n      </DragDropContext>\n    </div>\n  );\n};\n*/\n","import React, { useState } from \"react\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\n\nconst initialState = {\n  mouseX: null,\n  mouseY: null,\n};\n\nexport default function Tagger({ text = undefined, tagDivId, rowData }) {\n  const [state, setState] = React.useState<{\n    mouseX: null | number;\n    mouseY: null | number;\n  }>(initialState);\n\n  const [tags, setTags] = useState([]);\n  const [remove, setRemove] = useState();\n  console.log(text, tags);\n  text =\n    text ||\n    \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam ipsum purus, bibendum sit  amet vulputate eget, porta semper ligula. Donec bibendum vulputate erat, ac fringilla mi   finibus nec. Donec ac dolor sed dolor porttitor blandit vel vel purus. Fusce vel malesuada   ligula. Nam quis vehicula ante, eu finibus est. Proin ullamcorper fermentum orci, quis   finibus massa. Nunc lobortis, massa ut rutrum ultrices, metus metus finibus ex, sit amet   facilisis neque enim sed neque. Quisque accumsan metus vel maximus consequat. Suspendisse  lacinia tellus a libero volutpat maximus\";\n\n  //    console.log('text is ', text)\n  const handleClick = (event: React.MouseEvent<HTMLDivElement>) => {\n    event.preventDefault();\n    console.log(window.getSelection().toString());\n    // console.log(window.getSelection().toString().length,remove)\n    if (window.getSelection().toString().length > 0 || remove) {\n      setState({\n        mouseX: event.clientX - 2,\n        mouseY: event.clientY - 4,\n      });\n    }\n  };\n\n  //on mouse up select that input box.\n\n  const handleClose = () => {\n    let tag = window.getSelection().toString();\n    setRemove(undefined);\n    //   console.log(text.split(tag))\n    if (tag.length > 0) {\n      let currentTags = [...tags];\n      currentTags.push(tag);\n      setTags(currentTags);\n    }\n    if (document.getElementById(tagDivId)?.querySelectorAll(\"input\")) {\n      setTimeout(function () {\n        document.getElementById(tagDivId).querySelectorAll(\"input\")[0].focus();\n      }, 500);\n    }\n\n    setState(initialState);\n  };\n\n  const removeTag = () => {\n    let tag = remove;\n    let currentTags = [...tags];\n    let newTags = currentTags.filter((t) => t != tag);\n\n    setRemove(undefined);\n    setTags(newTags);\n\n    setState(initialState);\n  };\n  let taggedText = text;\n  // console.log(typeof(text))\n  tags.map((t) => {\n    console.log(\"before\", taggedText);\n\n    taggedText = taggedText.replace(t, \"<tag>>\" + t + \"<tag>\");\n    console.log(\"after\", taggedText);\n  });\n  console.log(taggedText);\n\n  return (\n    <div onMouseUp={handleClick}>\n      {tags.length > 0 ? (\n        <Typography>\n          {\" \"}\n          {taggedText.split(\"<tag>\").map((t, i) => {\n            if (t[0] == \">\") {\n              t = t.substring(1);\n              console.log(rowData.tags, i);\n              return (\n                <Tooltip title={\"Interesting Pattern\"}>\n                  <span\n                    onMouseDown={() => setRemove(t)}\n                    style={{\n                      cursor: \"pointer\",\n                      backgroundColor: \"rgb(255 153 0 / 24%)\",\n                    }}>\n                    {t}\n                  </span>\n                </Tooltip>\n              );\n            } else {\n              return <span>{t}</span>;\n            }\n          })}\n          {/* {text.split(tags).map((t, i) => {\n              return <><span>{t}</span><Tooltip title={'Interesting Pattern'}><span onClick={()=>setRemove(true)} style={{backgroundColor: \"rgb(255 153 0 / 24%)\"}}>{tags}</span></Tooltip></>\n          })}  */}\n        </Typography>\n      ) : (\n        <Typography>{text}</Typography>\n      )}\n      <Menu\n        keepMounted\n        open={state.mouseY !== null}\n        onClose={handleClose}\n        anchorReference=\"anchorPosition\"\n        anchorPosition={\n          state.mouseY !== null && state.mouseX !== null\n            ? { top: state.mouseY, left: state.mouseX }\n            : undefined\n        }>\n        {remove ? (\n          <MenuItem onClick={removeTag}>Remove Tag</MenuItem>\n        ) : (\n          <MenuItem onClick={handleClose}>Tag</MenuItem>\n        )}\n      </Menu>\n    </div>\n  );\n}\n","import React, { useState, useEffect, useMemo } from \"react\";\nimport { QuantitativeFilter, CategoricalFilter } from \"./TableFilters\";\nimport * as d3 from \"d3\";\nimport TagWrapper from \"./reactTagWrapper\";\nimport ProvenanceIsolatedNodes from \"./ProvenanceIsolatedNodes\";\nimport EventSearch from \"./EventSearch\";\nimport Tagger from \"./Tagger\";\nimport { getTopPatternsForGroup } from \"../fetchers/fetchMocks.js\";\nimport { useFetchAPIData } from \"../hooks/hooks\";\nimport Skeleton from \"@material-ui/lab/Skeleton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { pure } from \"recompose\";\n\nconst columnOverrides = {};\nconst filterQuantitativeValues = (filter, value) =>\n  value >= filter.filterMin && value <= filter.filterMax;\n\nconst QuantitativeCell = ({ rowData, name, commonScale }) => {\n  let additionalComponents;\n  const cellHeight = 20;\n  if (name === \"time\" && rowData?.sequence) {\n    // map through requences\n    additionalComponents = rowData.sequence.map((node) => {\n      return (\n        <rect\n          width={3}\n          x={commonScale(node.time)}\n          height={cellHeight}\n          opacity={0.25}></rect>\n      );\n    });\n  }\n  return (\n    <svg width={commonScale.range()?.[1]} height={cellHeight}>\n      <rect\n        fill={\"gray\"}\n        width={commonScale(rowData[name])}\n        height={cellHeight}></rect>\n      {additionalComponents}\n    </svg>\n  );\n};\nexport class NotesColumn {\n  constructor(metaData) {\n    this.width = metaData.width;\n    this.handleTagCreation = metaData.handleTagCreation;\n    this.selectionIndicies = [];\n  }\n  generateColumnObject() {\n    return {\n      title: \"Notes\",\n      name: \"None\",\n      cellStyle: {\n        padding: \"4px 16px\",\n      },\n      width: this.width,\n      customSort: (a, b) => b.tags.length - a.tags.length,\n      filterComponent: () => <div></div>,\n      render: (rowData) => {\n        if (!Array.isArray(rowData.tags)) {\n          rowData.tags = [];\n        }\n        return (\n          <TagWrapper\n            id={generateRowId(rowData)}\n            tags={rowData.tags}\n            onTagChange={(action, tag) => {\n              if (action === \"Add\") {\n                rowData.tags.push(tag);\n              } else {\n                const index = rowData.tags.findIndex((iterTag) => {\n                  return iterTag.name === tag[0]?.name;\n                });\n                if (index > -1) {\n                  rowData.tags.splice(index, 1);\n                }\n              }\n\n              this.handleTagCreation(\n                rowData.participantID,\n                rowData.taskID,\n                tag,\n                action\n              );\n            }}></TagWrapper>\n        );\n      },\n    };\n  }\n}\nfunction generateRowId(rowData) {\n  return `row${rowData[\"id\"]}`;\n}\nexport class LongTextColumn {\n  constructor(data, name, metaData) {\n    this.name = name;\n    this.data = data;\n    this.width = metaData.width ? metaData.width : 300;\n    this.order = metaData.order;\n    this.hideByDefault = metaData.hideByDefault;\n  }\n\n  generateColumnObject() {\n    return {\n      title: this.name,\n      name: this.name,\n      render: (rowData) => {\n        return (\n          <div style={{ \"white-space\": \"normal\" }}>\n            <Tagger\n              text={rowData[this.name]}\n              tagDivId={`${generateRowId(rowData)}`}\n              rowData={rowData}></Tagger>\n          </div>\n        );\n      },\n      width: this.width,\n      hideByDefault: this.hideByDefault,\n      order: this.order,\n    };\n  }\n}\nexport class CategoricalColumn {\n  constructor(data, name, metaData) {\n    this.name = name;\n    this.data = data;\n    this.width = metaData.width ? metaData.width : 100;\n    this.order = metaData.order;\n    this.hideByDefault = metaData.hideByDefault;\n  }\n\n  generateColumnObject() {\n    return {\n      title: this.name,\n      name: this.name,\n      render: (rowData) => {\n        return (\n          <span>{rowData[this.name] ? rowData[this.name] : this.name}</span>\n        );\n      },\n      width: this.width,\n      hideByDefault: this.hideByDefault,\n      order: this.order,\n    };\n  }\n}\nexport class QuantitativeColumn {\n  constructor(data, name, metaData, handleFilterChange) {\n    this.name = name;\n    this.data = data;\n    this.type = \"quantitative\";\n    this.height = 42.5;\n    this.width = metaData.width ? metaData.width : 100;\n    this.order = metaData.order;\n    this.hideByDefault = metaData.hideByDefault;\n    this.customSort = (a, b) => a[this.name] - b[this.name];\n    this.handleFilterChange = handleFilterChange;\n    this.customFilterAndSearch = (filter, value) => {\n      return filterQuantitativeValues(filter.value, value);\n    };\n    this.cellComponent = (rowData) => {\n      return (\n        <QuantitativeCell\n          rowData={rowData}\n          name={this.name}\n          commonScale={this.xScale}></QuantitativeCell>\n      );\n    };\n    let [min, max] = d3.extent(this.data, (datum) => datum[this.name]);\n    if (min > 0) {\n      min = 0;\n    }\n\n    this.xScale = d3\n      .scaleLinear()\n      .domain([min - 0.001, max + 0.001])\n      .range([10, this.width - 20]); // offset from sides\n    this.yScale = d3.scaleLinear().range([this.height, 0]);\n    // the scale\n    let niceX = this.xScale.nice();\n    const binner = d3.histogram().domain(niceX.domain());\n    const buckets = binner(data.map((datum) => datum[this.name]));\n    this.yScale = this.yScale.domain([\n      0,\n      d3.max(buckets, (bucket) => bucket.length),\n    ]);\n    this.buckets = buckets;\n  }\n\n  set setWidth(newWidth) {\n    this.width = newWidth;\n    this.scale.range([0, this.width]);\n  }\n\n  set setRender(Component) {\n    this.cellComponent = Component;\n  }\n\n  generateColumnObject() {\n    return {\n      title: this.name,\n      name: this.name,\n      width: this.width,\n      type: this.type,\n      customSort: this.customSort,\n      render: this.cellComponent,\n      order: this.order,\n      hideByDefault: this.hideByDefault,\n      customFilterAndSearch: this.customFilterAndSearch,\n      groupedSummaryComponent: ({ incomingData }) => {\n        return (\n          <div style={{ pointerEvents: \"all\", opacity: 0.7 }}>\n            <GroupDataResolver incomingData={incomingData}>\n              {({ partitionedData }) => {\n                if (partitionedData.length === 0) {\n                  return <div></div>;\n                }\n                return (\n                  <QuantitativeFilter\n                    xScale={this.xScale}\n                    yScale={this.yScale}\n                    buckets={this.buckets}\n                    height={this.height}\n                    data={partitionedData.map(\n                      (datum) => datum[this.name]\n                    )}></QuantitativeFilter>\n                );\n              }}\n            </GroupDataResolver>\n          </div>\n        );\n      },\n      filterComponent: (props) => {\n        return (\n          <QuantitativeFilter\n            {...props}\n            xScale={this.xScale}\n            yScale={this.yScale}\n            buckets={this.buckets}\n            height={this.height}\n            onFilter={(filter, value, row) => {\n              return this.handleFilterChange(this.name, filter);\n            }}\n            data={this.data.map(\n              (datum) => datum[this.name]\n            )}></QuantitativeFilter>\n        );\n      },\n    };\n  }\n}\n\nfunction hasSubArrayStrict(master, sub) {\n  return master.join(\",\").indexOf(sub.join(\",\")) > -1;\n}\n\nfunction hasSubArrayNonStrict(master, sub) {\n  return sub.every(((i) => (v) => (i = master.indexOf(v, i) + 1))(0));\n}\n\nconst EventsSummary = (props) => {\n  let { incomingData } = props;\n  incomingData = incomingData?.incomingData;\n  if (!incomingData || !incomingData[0]) {\n    return <div></div>;\n  }\n\n  return <EventSearch onFilter={props.onFilter}></EventSearch>;\n};\n\n/* */\nfunction filterEvents(filterValue, rowValue) {\n  if (!filterValue || !rowValue) {\n    return true;\n  }\n  return hasSubArrayNonStrict(\n    rowValue.map((val) => val.name),\n    filterValue.map((val) => val.id)\n  ); //rowValue.length >= 5;\n}\nconst GroupedContainer = (props) => {\n  if (\n    typeof props.children === \"undefined\" ||\n    typeof props.children !== \"function\"\n  ) {\n    return <div></div>;\n  }\n  return (\n    <div style={{ pointerEvents: \"none\", opacity: 0.7 }}>\n      {props.children()}\n    </div>\n  );\n};\nexport class ProvenanceColumn {\n  constructor(data, name, metaData, handleFilterChange) {\n    this.name = name;\n    this.width = 300;\n    this.data = data;\n    this.handleProvenanceNodeClick = metaData.handleProvenanceNodeClick;\n    this.handleFilterChange = handleFilterChange;\n    this.customFilterAndSearch = (filter, value) => {\n      return filterEvents(filter.value, value);\n    };\n  }\n  generateColumnObject() {\n    return {\n      title: \"Events Used\",\n      name: this.name,\n      width: this.width,\n      customSort: (a, b) => a.sequence.length - b.sequence.length,\n      customFilterAndSearch: this.customFilterAndSearch,\n      render: (renderData) =>\n        renderProvenanceNodeCell(renderData, this.handleProvenanceNodeClick),\n      groupedSummaryComponent: ({ incomingData }) => {\n        console.log(\"in generate column object\");\n        return (\n          <GroupDataResolver incomingData={incomingData}>\n            {({ partitionedData }) => {\n              if (partitionedData.length === 0) {\n                return <div></div>;\n              }\n              return (\n                <GroupedEventSummary\n                  incomingData={partitionedData}></GroupedEventSummary>\n              );\n            }}\n          </GroupDataResolver>\n        );\n      },\n\n      type: \"provenance\",\n      filterComponent: (props) => (\n        <EventsSummary\n          incomingData={{ incomingData: this.data }}\n          onFilter={(filter, value, row) => {\n            return this.handleFilterChange(this.name, filter);\n          }}></EventsSummary>\n      ),\n    };\n  }\n}\n\nconst GroupedEventSummaryFunc = ({ incomingData }) => {\n  const filteredList = useMemo(() => {\n    return incomingData.map((row) => {\n      return {\n        participantID: row.participantID,\n        // uniqueID: row.uniqueID,\n        condition: row.condition,\n        taskID: row.taskID,\n      };\n    });\n  });\n\n  const [\n    isLoading,\n    errorLoading,\n    patternDataFromServer,\n  ] = useFetchAPIData(async () => {\n    const response = await getTopPatternsForGroup(filteredList);\n    return response;\n  }, []);\n\n  // create list of individuals in each group\n  return (\n    <div>\n      {isLoading && (\n        <Skeleton width={\"150px\"} height={\"35px\"} variant={\"rect\"}></Skeleton>\n      )}\n      {errorLoading && <p>{errorLoading}</p>}\n      <div style={{ height: \"60px\", overflow: \"auto\" }}>\n        <Typography style={{ float: \"left\", marginTop: \"20px\" }}>\n          {filteredList.length} Participants\n        </Typography>\n        {patternDataFromServer &&\n          patternDataFromServer[0][\"topK\"].map((topSequence, index) => {\n            return (\n              <div\n                key={`sequence${index}`}\n                style={{\n                  display: \"inline-block\",\n                  backgroundColor: \"whitesmoke\",\n                  borderRadius: \"20px\",\n                  padding: \"4px\",\n                  margin: \"10px\",\n                }}>\n                <div style={{ float: \"left\" }}>\n                  <ProvenanceIsolatedNodes\n                    nodes={topSequence.sequence.map((seq) => {\n                      return { name: seq };\n                    })}\n                    handleProvenanceNodeClick={\n                      console.log\n                    }></ProvenanceIsolatedNodes>\n                </div>\n\n                <span style={{ float: \"right\" }}> {topSequence[\"count\"]}</span>\n              </div>\n            );\n          })}{\" \"}\n      </div>\n    </div>\n  );\n};\nconst GroupedEventSummary = pure(GroupedEventSummaryFunc);\n\nfunction renderNotesCell(rowData) {\n  if (!Array.isArray(rowData.tags)) {\n    rowData.tags = [];\n  }\n  return (\n    <TagWrapper\n      id={generateRowId(rowData)}\n      tags={rowData.tags}\n      onTagChange={(action, tag) => {\n        // check if rowData is selected;\n        if (action === \"Add\") {\n          rowData.tags.push(tag);\n        } else {\n          const index = rowData.tags.findIndex((iterTag) => {\n            return iterTag.name === tag[0]?.name;\n          });\n          if (index > -1) {\n            rowData.tags.splice(index, 1);\n          }\n        }\n      }}></TagWrapper>\n  );\n}\n\nfunction renderNotesColumn(notesColumnWidth) {\n  return {\n    title: \"Notes\",\n    name: \"None\",\n    cellStyle: {\n      padding: \"4px 16px\",\n    },\n    width: notesColumnWidth,\n    customSort: (a, b) => b.tableData.tags.length - a.tableData.tags.length,\n    filterComponent: () => <div></div>,\n    render: renderNotesCell,\n  };\n}\n\nfunction renderProvenanceNodeCell(data, handleProvenanceNodeClick) {\n  return (\n    <ProvenanceIsolatedNodes\n      nodes={data.sequence}\n      handleProvenanceNodeClick={\n        handleProvenanceNodeClick\n      }></ProvenanceIsolatedNodes>\n  );\n}\n\nconst GroupDataResolverFunc = (props) => {\n  const { incomingData, children } = props;\n  const [partitionedData, setPartitionedData] = useState([]);\n  useEffect(() => {\n    console.log(\"in groupdata useEffect!!!\");\n    if (incomingData && incomingData.length > 0) {\n      setPartitionedData(incomingData);\n    }\n  }, [incomingData.length]);\n  if (_.isFunction(children)) {\n    return children({ partitionedData });\n  }\n  return <div></div>;\n};\n\nconst GroupDataResolver = pure(GroupDataResolverFunc);\n","//@ts-nocheck\nimport React, {\n  useState,\n  useEffect,\n  forwardRef,\n  useRef,\n  useCallback,\n  useMemo,\n} from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\nimport {\n  GroupingState,\n  SelectionState,\n  IntegratedSelection,\n  IntegratedGrouping,\n  FilteringState,\n  IntegratedFiltering,\n  IntegratedSummary,\n  SummaryState,\n} from \"@devexpress/dx-react-grid\";\nimport {\n  Grid,\n  VirtualTable,\n  TableHeaderRow,\n  TableGroupRow,\n  TableSelection,\n  GroupingPanel,\n  Toolbar,\n  DragDropProvider,\n  TableFilterRow,\n  TableColumnResizing,\n  ColumnChooser,\n  TableColumnVisibility,\n  TableSummaryRow,\n  ExportPanel,\n} from \"@devexpress/dx-react-grid-material-ui\";\nimport { GridExporter } from \"@devexpress/dx-react-grid-export\";\n\nimport { pure } from \"recompose\";\nimport saveAs from \"file-saver\";\n\nimport ProvenanceGraph from \"./ProvenanceGraph\";\nimport * as d3 from \"d3\";\nimport TagsInput from \"react-tagsinput\";\nimport TagStyles from \"./tagstyles.module.css\";\nimport TagWrapper from \"./reactTagWrapper\";\nimport { QuantitativeFilter, CategoricalFilter } from \"./TableFilters\";\nimport styles from \"./ProvenanceTable.module.css\";\nimport { ifError } from \"assert\";\nimport _ from \"lodash\";\nimport {\n  QuantitativeColumn,\n  CategoricalColumn,\n  ProvenanceColumn,\n  NotesColumn,\n  LongTextColumn,\n} from \"./ColumnDefinitions.tsx\";\nimport {\n  CodeSandboxCircleFilled,\n  PropertySafetyFilled,\n} from \"@ant-design/icons\";\nimport { Typography } from \"@material-ui/core\";\n\nconst differenceFilter = (firstArray, secondArray) => {\n  return firstArray.filter(\n    (firstArrayItem) =>\n      !secondArray.some(\n        (secondArrayItem) =>\n          firstArrayItem.columnName === secondArrayItem.columnName\n      )\n  );\n};\nfunction toFixedTrunc(x, n) {\n  const v = (typeof x === \"string\" ? x : x.toString()).split(\".\");\n  if (n <= 0) return v[0];\n  let f = v[1] || \"\";\n  if (f.length > n) return `${v[0]}.${f.substr(0, n)}`;\n  while (f.length < n) f += \"0\";\n  return `${v[0]}.${f}`;\n}\nconst GroupCellContentFunc = (props) => {\n  const { provenanceData, column, row, children } = props;\n  const groupData = children.props.columnSummaries[0].value;\n\n  let Content = () => <div></div>;\n  if (column.groupedSummaryComponent) {\n    Content = column.groupedSummaryComponent;\n  }\n\n  return (\n    <TableSummaryRow.GroupCell {...props}>\n      <Content incomingData={groupData} partitionedData={groupData}></Content>\n    </TableSummaryRow.GroupCell>\n  );\n};\nconst GroupCellContent = pure(GroupCellContentFunc);\nconst GroupRowContent = (props) => {\n  return (\n    <div>\n      <p>Hello this is a test</p>\n      <TableGroupRow.Row {...props}></TableGroupRow.Row>\n    </div>\n  );\n};\n\nconst nameGroupCriteria = (value) => {\n  const firstLetter = String(value).substr(0, 1).toLowerCase();\n  const groupValue =\n    firstLetter < \"n\" ? { from: \"A\", to: \"M\" } : { from: \"N\", to: \"Z\" };\n  return {\n    value: groupValue,\n    key: `${groupValue.from}-${groupValue.to}`,\n  };\n};\nconst FilterCells = ({ value, other, ...restProps }) => {\n  let Item; //= () => <div></div>;\n  let itemProps = Object.assign({}, restProps);\n  if (restProps.column.filterComponent) {\n    itemProps[\"onFilter\"] = restProps.onFilter;\n    Item = restProps.column.filterComponent;\n    //Item = (props) => <NewItem {...props}></NewItem>;\n  } else {\n    Item = (props) => <TableFilterRow.Cell {...props}></TableFilterRow.Cell>;\n  }\n  return (\n    <VirtualTable.Cell style={{ width: \"100%\" }}>\n      <Item {...itemProps}></Item>\n    </VirtualTable.Cell>\n  );\n};\nconst ProvenanceCells = ({ value, style, ...restProps }) => {\n  let item;\n  if (restProps.column.render) {\n    item = restProps.column.render(restProps.row);\n  }\n  return (\n    <VirtualTable.Cell {...restProps} style={{ margin: \"16px\" }}>\n      {item}\n    </VirtualTable.Cell>\n  );\n};\nfunction onSave(workbook) {\n  workbook.xlsx.writeBuffer().then((buffer) => {\n    saveAs(\n      new Blob([buffer], { type: \"application/octet-stream\" }),\n      \"DataGrid.xlsx\"\n    );\n  });\n}\n\nfunction getGroupSummaryValues(props) {\n  //const { selection, rows, totalSummaryItems } = this.state;\n  //const selectionSet = new Set(selection);\n  //const selectedRows = rows.filter((row, rowIndex) => selectionSet.has(rowIndex));\n  return rows; /*totalSummaryItems.map((summary) => {\n      const { columnName, type } = summary;\n      return IntegratedSummary.defaultCalculator(type, selectedRows, row => row[columnName]);\n    });*/\n}\n// must use non zero order else !order is true\n\nfunction getColumnMetaData(columnKey, columnMetaData) {\n  if (columnMetaData[columnKey]) {\n    return columnMetaData[columnKey];\n  } else {\n    return { hideByDefault: true };\n  }\n}\n\nfunction generateColumnDefinition(\n  columnSchema,\n  data,\n  columnsMetaData,\n  handleFilterChange\n) {\n  let defaultColumnDefinition;\n  const columnMetaData = getColumnMetaData(\n    columnSchema.COLUMN_NAME,\n    columnsMetaData\n  );\n  if (columnSchema.DATA_TYPE === \"int\" || columnSchema.DATA_TYPE === \"float\") {\n    defaultColumnDefinition = new QuantitativeColumn(\n      data,\n      columnSchema.COLUMN_NAME,\n      columnMetaData,\n      handleFilterChange\n    );\n  } else if (columnSchema.DATA_TYPE === \"text\") {\n    defaultColumnDefinition = new CategoricalColumn(\n      data,\n      columnSchema.COLUMN_NAME,\n      columnMetaData,\n      handleFilterChange\n    );\n  } else if (columnSchema.DATA_TYPE === \"longtext\") {\n    defaultColumnDefinition = new LongTextColumn(\n      data,\n      columnSchema.COLUMN_NAME,\n      columnMetaData,\n      handleFilterChange\n    );\n  } else if (columnSchema.DATA_TYPE === \"provenance\") {\n    defaultColumnDefinition = new ProvenanceColumn(\n      data,\n      \"sequence\",\n      columnMetaData,\n      handleFilterChange\n    );\n  } else if (columnSchema.DATA_TYPE === \"tag\") {\n    defaultColumnDefinition = new NotesColumn(columnMetaData);\n    /*\n    defaultColumnDefinition = {\n      title: columnSchema.COLUMN_NAME,\n      name: columnSchema.COLUMN_NAME,\n      render: (rowData) => <span>{\"tag\"}</span>,\n      width: 100,\n    };*/\n  } else {\n    console.error(\n      `[DevExtremeTable.tsx] ERROR: Column Schema contains unkown column type ${columnSchema.DATA_TYPE}.`\n    );\n  }\n\n  return defaultColumnDefinition;\n}\nconst DevExtremeTable = ({\n  provenanceData,\n  handleProvenanceNodeClick,\n  tableSchema,\n  handleTagCreation,\n}) => {\n  const exporterRef = useRef(null);\n\n  const [filters, setFilters] = React.useState([]);\n  const handleFilter = (columnName, value) => {\n    const currentFilterIndex = filters.findIndex(\n      (filter) => filter.columnName === columnName\n    );\n    let clonedFilters = [...filters];\n    if (currentFilterIndex > -1) {\n      clonedFilters[currentFilterIndex] = {\n        columnName: columnName,\n        value: value,\n      };\n    } else {\n      clonedFilters.push({ columnName: columnName, value: value });\n    }\n    setFilters(clonedFilters);\n  };\n  let columnMetaData = {\n    participantID: { order: 1 },\n    condition: { order: 2 },\n    accuracy: { width: 125, order: 3 },\n    time: { width: 200, order: 4 },\n    sequence: {\n      width: 300,\n      order: 5,\n      handleProvenanceNodeClick: handleProvenanceNodeClick,\n    },\n    notes: { width: 200, order: 6, handleTagCreation: handleTagCreation },\n  };\n\n  React.useEffect(() => {\n    /*\n    setTimeColumnDefinition(renderTimeColumn(provenanceData, 250));\n    setAccuracyColumnDefinition(renderAccuracyColumn(provenanceData, 100));\n    setEventsColumnDefinition(renderProvenanceNodeColumn(provenanceData, 500));\n    //setNotesColumnDefinition(renderNotesColumn(200));\n    setRows(provenanceData);*/\n\n    setColumns(\n      tableSchema\n        .map((columnSchema) =>\n          generateColumnDefinition(\n            columnSchema,\n            provenanceData,\n            columnMetaData,\n            handleFilter\n          ).generateColumnObject()\n        )\n        .sort((a, b) => {\n          if (!a.order) {\n            return 1;\n          }\n          if (!b.order) {\n            return -1;\n          }\n          return a.order > b.order ? 1 : -1;\n        })\n    );\n  }, [provenanceData]);\n\n  const [columns, setColumns] = useState(\n    tableSchema\n      .map((columnSchema) =>\n        generateColumnDefinition(\n          columnSchema,\n          provenanceData,\n          columnMetaData\n        ).generateColumnObject()\n      )\n      .sort((a, b) => {\n        if (!a.order) {\n          return 1;\n        }\n        if (!b.order) {\n          return -1;\n        }\n        return a.order > b.order ? 1 : -1;\n      })\n  );\n  const [selection, setSelectionInternal] = useState([]);\n\n  const setSelection = (selectionIndicies) => {\n    setSelectionInternal(selectionIndicies);\n  };\n\n  const [rows, setRows] = useState(provenanceData);\n  const startExport = useCallback(\n    (options) => {\n      exporterRef.current.exportGrid(options);\n    },\n    [exporterRef]\n  );\n  // when task ID changes, use new data\n  useEffect(() => {\n    setRows(provenanceData);\n  }, [provenanceData]);\n  const [grouping, setGroupingInternal] = useState([]);\n  const setGrouping = (newGrouping) => {\n    // if an item is recently grouped on, remove any filters for it.\n    let newlyAddedGroups = differenceFilter(newGrouping, grouping)?.[0];\n    if (newlyAddedGroups) {\n      let currentFilter = filters.find(\n        (filterItem) => newlyAddedGroups.columnName === filterItem.columnName\n      );\n\n      if (!currentFilter) {\n        currentFilter = { value: { filterMin: 0.5, filterMax: 1.5 } };\n      }\n      const newGroupIndex = newGrouping.findIndex(\n        (newGroup) => newGroup.columnName === newlyAddedGroups.columnName\n      );\n      newGrouping[newGroupIndex] = Object.assign(newGrouping[newGroupIndex], {\n        groupMetaData: currentFilter.value,\n      });\n    }\n    // search through grouping,\n    setGroupingInternal(newGrouping);\n    //setFilters(clonedFilters);\n  };\n  const groupingPredicate = (value, column, filterValue) => {\n    // find filter value\n    const isRowInTrueGroup = column.customFilterAndSearch(\n      { value: filterValue },\n      value\n    );\n    return {\n      value: isRowInTrueGroup,\n      key: `${column.name}-${isRowInTrueGroup}`,\n    };\n  };\n  const integratedGroupingColumnExtensions = useMemo(\n    () => {\n      return columns.map((column) => {\n        // if quantitative column, group with filter value\n        if (column.type === \"quantitative\") {\n          const group = grouping.find(\n            (group) => group.columnName === column.name\n          );\n          let groupingValue = group\n            ? group.groupMetaData\n            : { filterMin: 0.2, filterMax: 1.2 };\n\n          return {\n            columnName: column.name,\n            criteria: (value) =>\n              groupingPredicate(value, column, groupingValue),\n          };\n        } else if (column.type === \"provenance\") {\n          const group = grouping.find(\n            (group) => group.columnName === column.name\n          );\n          let groupingValue = group ? group.groupMetaData : null;\n\n          return {\n            columnName: column.name,\n            criteria: (value) =>\n              groupingPredicate(value, column, groupingValue),\n          };\n        }\n        return { columnName: column.name };\n      });\n    },\n    [columns, grouping]\n\n    // { columnName: \"visType\", criteria: nameGroupCriteria },\n    //{ columnName: \"answer\", criteria: (data) => data.accuracy > 0.5 },\n  );\n  const [tableGroupColumnExtension] = useState([\n    columns.map((column) => ({\n      columnName: column.name,\n      showWhenGrouped: true,\n    })),\n    //  { columnName: \"visType\", showWhenGrouped: true },\n    // { columnName: \"answer\", showWhenGrouped: true },\n  ]);\n\n  const [defaultColumnWidths] = useState(\n    columns.map((column) => {\n      return {\n        columnName: column.name,\n        width: column.width ? column.width : 100,\n      };\n    })\n  );\n\n  const [filteringColumnExtensions] = useState(\n    columns.map((column) => {\n      return {\n        columnName: column.name,\n        predicate: (value, filter, row) => {\n          //if (!filter.value.length) return true;\n          if (column.customFilterAndSearch) {\n            return column.customFilterAndSearch(filter, value, row);\n          }\n          return IntegratedFiltering.defaultPredicate(value, filter, row);\n        },\n      };\n    })\n  );\n\n  const [groupSummaryItems] = useState(\n    columns.map((column) => {\n      return {\n        name: column.name,\n        columnName: column.name,\n        type: \"custom\",\n        showInGroupFooter: false,\n        alignByColumn: true,\n      };\n    })\n  );\n\n  const [defaultHiddenColumnNames] = useState(\n    columns\n      .filter((column) => column.hideByDefault)\n      .map((column) => column.name)\n  );\n  const summaryCalculator = (type, rows, getValue) => {\n    if (type === \"custom\") {\n      if (!rows.length) {\n        return null;\n      }\n      return rows;\n    }\n    return rows;\n  };\n  const TempRowComponent = (props) => {\n    const [hidden, setHidden] = useState(false);\n    let groupedRowHeader = `Grouped Row`;\n    const columnName = props.row.groupedBy;\n    const columnInfo = columns.find((column) => column.name == columnName);\n    if (columnInfo) {\n      if (columnInfo.type === \"quantitative\") {\n        const groupIndex = grouping.findIndex(\n          (group) => group.columnName === columnName\n        );\n        const group = grouping[groupIndex];\n\n        if (props.row.value === true) {\n          // grab values from filters\n          groupedRowHeader = `${\"---\".repeat(\n            groupIndex\n          )} Grouped on: ${columnName} [${toFixedTrunc(\n            group.groupMetaData.filterMin,\n            2\n          )},${toFixedTrunc(group.groupMetaData.filterMax, 2)}]`;\n        } else {\n          groupedRowHeader = `${\"---\".repeat(\n            groupIndex\n          )} Grouped on: ${columnName} is outside of range [${toFixedTrunc(\n            group.groupMetaData.filterMin,\n            2\n          )}, ${toFixedTrunc(group.groupMetaData.filterMax, 2)}]`;\n        }\n      } else if (columnInfo.type === \"provenance\") {\n        const groupIndex = grouping.findIndex(\n          (group) => group.columnName === columnName\n        );\n        const group = grouping[groupIndex];\n\n        if (props.row.value === true) {\n          // grab values from filters\n          groupedRowHeader = `${\"---\".repeat(\n            groupIndex\n          )} Grouped on provenance sequence:${group.groupMetaData\n            .map((node) => node.label)\n            .join(\",\")}`;\n        } else {\n          groupedRowHeader = `${\"---\".repeat(\n            groupIndex\n          )} Grouped on not containing provenance sequence`;\n        }\n      } else {\n        groupedRowHeader = `${columnName} is ${props.row.value}`;\n      }\n    }\n    return (\n      <React.Fragment>\n        <tr className={styles.groupHeaderRow}>\n          <td colSpan={42} onClick={() => setHidden(!hidden)}>\n            <Typography\n              className={styles.groupHeaderContent}\n              variant={\"overline\"}>\n              {groupedRowHeader}\n            </Typography>\n          </td>\n        </tr>\n        {!hidden && (\n          <TableGroupRow.Row {...props}>{props.children}</TableGroupRow.Row>\n        )}\n      </React.Fragment>\n    );\n  };\n  return (\n    <Paper>\n      <Grid rows={rows} columns={columns}>\n        <DragDropProvider />\n        <GroupingState\n          grouping={grouping}\n          onGroupingChange={setGrouping}\n          columnGroupingEnabled\n          columnExtensions={tableGroupColumnExtension}\n        />\n        <SummaryState groupItems={groupSummaryItems} />\n        <IntegratedGrouping\n          columnExtensions={integratedGroupingColumnExtensions}\n        />\n        <IntegratedSummary calculator={summaryCalculator} />\n        <FilteringState filters={filters} onFiltersChange={setFilters} />\n        <IntegratedFiltering\n          columnExtensions={filteringColumnExtensions}></IntegratedFiltering>\n        <SelectionState\n          selection={selection}\n          onSelectionChange={setSelection}\n        />\n        <IntegratedSelection />\n        <VirtualTable cellComponent={ProvenanceCells} height={1000} />\n        <TableColumnVisibility\n          defaultHiddenColumnNames={defaultHiddenColumnNames}\n        />\n        <TableColumnResizing defaultColumnWidths={defaultColumnWidths} />\n        <TableHeaderRow showGroupingControls />\n        <TableSelection showSelectAll />\n        <TableFilterRow cellComponent={FilterCells} />\n        <TableGroupRow\n          rowComponent={TempRowComponent}\n          columnExtensions={tableGroupColumnExtension}\n          summaryCellComponent={(props) => (\n            <GroupCellContent\n              columns={columns}\n              provenanceData={provenanceData}\n              {...props}></GroupCellContent>\n          )}\n          contentComponent={() => {\n            return <div></div>;\n          }}\n          showColumnsWhenGrouped\n          stubCellComponent={(stubProps) => {\n            let shouldHideStub = false;\n            // if this stub prop matches last grouping, hide it\n            // this is used to fix a bug where the inner most grouped row is off by one td\n\n            if (grouping.length > 0) {\n              const groupedByRow = stubProps.tableRow.row.groupedBy;\n              shouldHideStub =\n                grouping[grouping.length - 1].columnName === groupedByRow;\n            }\n            return (\n              <td style={shouldHideStub ? { display: \"none\" } : null}></td>\n            );\n          }}\n        />\n        <Toolbar />\n        <ExportPanel startExport={startExport} />\n\n        <ColumnChooser />\n        <GroupingPanel showGroupingControls></GroupingPanel>\n      </Grid>\n      <GridExporter\n        ref={exporterRef}\n        rows={rows}\n        columns={columns}\n        onSave={onSave}\n        selection={selection}\n      />\n    </Paper>\n  );\n};\n\nfunction generateCategoricalScale(data, width) {\n  const uniqueValues = Array.from(new Set(data));\n  return d3.scaleBand().rangeRound([0, width]).padding(0).domain(uniqueValues);\n}\n\nfunction renderStimulusDefinition(provenanceData, stimulusColumnWidth) {\n  // TODO: Refactor to generalized\n  return {\n    title: \"Stimulus\",\n    name: \"visType\",\n    render: (rowData) => <span>{rowData.visType}</span>,\n    width: stimulusColumnWidth,\n  };\n}\n\nfunction renderUserIdColumn(provenanceData, userIdColumnWidth) {\n  return {\n    title: \"User Id\",\n    name: \"workerID\",\n    render: (rowData) => <span>{rowData.workerID}</span>,\n    width: userIdColumnWidth,\n    groupedSummaryComponent: () => <div></div>,\n  };\n}\n\n/**\n *\n * @param filter\n * @param value\n * @param accesssor\n */\nfunction filterCategoricalValue(filter, value, accesssor) {\n  if (!Array.isArray(value)) {\n    value = [value];\n  }\n  // for each value\n  let newValues = value;\n  if (accesssor) {\n    newValues = newValues.map(accesssor);\n  }\n  for (let i = 0; i < newValues.length; i++) {\n    if (Object.values(filter).includes(newValues[i])) {\n      return true;\n    }\n  }\n  return false;\n}\n\nconst GroupDataResolver = (props) => {\n  const { incomingData, children } = props;\n  const [partitionedData, setPartitionedData] = useState([]);\n  useEffect(() => {\n    if (incomingData && incomingData.length > 0) {\n      setPartitionedData(incomingData);\n    }\n  }, incomingData);\n  if (_.isFunction(children)) {\n    return children({ partitionedData });\n  }\n  return <div></div>;\n};\n\n/* Accuracy */\nfunction renderAccuracyCell(rowData, accuracyScale) {\n  return (\n    <svg width={100} height={20}>\n      <rect\n        x={accuracyScale(rowData.answer.accuracy)}\n        width={20}\n        height={20}></rect>\n    </svg>\n  );\n}\n\nfunction renderAccuracyColumn(currentProvenanceData, columnWidth) {\n  // TODO: Refactor to categorical or Numerical\n  let accuracyScale = generateCategoricalScale([\"1\", \"0\"], columnWidth);\n\n  return {\n    title: \"Accuracy\",\n    name: \"answer\",\n    width: columnWidth,\n    cellStyle: {\n      maxWidth: columnWidth,\n      padding: \"4px 16px\",\n    },\n    customSort: (a, b) => a.answer.accuracy - b.answer.accuracy,\n    render: (rowData) => renderAccuracyCell(rowData, accuracyScale),\n    customFilterAndSearch: (filter, value, row) => {\n      return filterCategoricalValue(\n        filter,\n        value,\n        (answer) => `${answer.accuracy}`\n      );\n    },\n    groupedSummaryComponent: ({ incomingData }) => {\n      return (\n        <GroupDataResolver incomingData={incomingData}>\n          {({ partitionedData }) => {\n            if (partitionedData.length === 0) {\n              return <div></div>;\n            }\n            return (\n              <CategoricalFilter\n                width={columnWidth}\n                scale={accuracyScale}\n                labels={{ \"1\": \"true\", \"0\": \"false\" }}\n                data={partitionedData.map(\n                  // TODO: fix from hard coded\n                  (graph) => graph.answer.correct\n                )}></CategoricalFilter>\n            );\n          }}\n        </GroupDataResolver>\n      );\n    },\n\n    filterComponent: (props) => (\n      <CategoricalFilter\n        {...props}\n        width={columnWidth}\n        scale={accuracyScale}\n        labels={{ \"1\": \"true\", \"0\": \"false\" }}\n        data={currentProvenanceData.map(\n          // TODO: fix from hard coded\n          (graph) => graph.answer.correct\n        )}></CategoricalFilter>\n    ),\n  };\n}\n\n/* Time */\nfunction renderTimeCell(rowData, timeScale) {\n  return (\n    <svg width={timeScale.range()?.[1]} height={20}>\n      <ProvenanceGraph performance={rowData} xScale={timeScale} />\n    </svg>\n  );\n}\nfunction renderTimeColumn(currentProvenanceData, columnWidth) {\n  const max = d3.max(currentProvenanceData, (datum) => datum.totalTime);\n  const timeScale = d3.scaleLinear().domain([0, max]).range([0, columnWidth]);\n\n  return {\n    title: \"Time To Complete\",\n    name: \"totalTime\",\n    width: columnWidth,\n    cellStyle: {\n      maxWidth: columnWidth,\n      padding: \"4px 16px\",\n    },\n    customSort: (a, b) => a.totalTime - b.totalTime,\n    render: (rowData) => renderTimeCell(rowData, timeScale),\n    customFilterAndSearch: (filter, value, row) => {\n      return filterQuantitativeValues(filter, value, row);\n    },\n    groupedSummaryComponent: ({ incomingData }) => {\n      return (\n        <GroupDataResolver incomingData={incomingData}>\n          {({ partitionedData }) => {\n            if (partitionedData.length === 0) {\n              return <div></div>;\n            }\n            return (\n              <QuantitativeFilter\n                xScale={timeScale}\n                data={partitionedData.map(\n                  (graph) => graph.totalTime\n                )}></QuantitativeFilter>\n            );\n          }}\n        </GroupDataResolver>\n      );\n    },\n    filterComponent: (props) => (\n      <QuantitativeFilter\n        {...props}\n        xScale={timeScale}\n        data={currentProvenanceData.map(\n          (graph) => graph.totalTime\n        )}></QuantitativeFilter>\n    ),\n  };\n}\n\nexport default DevExtremeTable;\n","import React, { useContext, useEffect, useState } from \"react\";\nimport DevTable from \"./DevExtremeTable\";\nimport ProvenanceDataContext from \"./ProvenanceDataContext\";\nimport Skeleton from \"@material-ui/lab/Skeleton\";\nimport LoaderStyles from \"./TableDataLoader.module.css\";\nimport Measure from \"react-measure\";\nimport { getSchema } from \"../fetchers/fetchMocks\";\nimport { useFetchAPIData } from \"../hooks/hooks\";\n\nconst TableDataLoader = (props) => {\n  const [height, setHeight] = useState(1000);\n  const {\n    currentTaskData,\n    handleProvenanceNodeClick,\n    handleTagCreation,\n  } = useContext(ProvenanceDataContext);\n  const [tableSchema, setTableSchema] = useState(null);\n\n  let [isLoading, isError, schemaFromServer] = useFetchAPIData(async () => {\n    return await getSchema(\"Performance\");\n  }, []);\n\n  // Set Schema\n  useEffect(() => {\n    let tableSchema = schemaFromServer;\n\n    const hiddenColumns = [\"id\"];\n    // TODO: make this smart, if > column is highly variable, don't show.\n    const hideAggregate = [\"participantID\", \"answer\"];\n\n    if (tableSchema) {\n      // append the provenance sequence nodes onto the end of performance schema\n\n      tableSchema = tableSchema.concat({\n        COLUMN_NAME: \"sequence\",\n        DATA_TYPE: \"provenance\",\n        ORDINAL_POSITION: schemaFromServer.length,\n      });\n\n      tableSchema = tableSchema.concat({\n        COLUMN_NAME: \"notes\",\n        DATA_TYPE: \"tag\",\n        ORDINAL_POSITION: schemaFromServer.length + 2,\n      });\n\n      tableSchema = tableSchema.map((column) => {\n        column.hideAggregate = hideAggregate.includes(column);\n        return column;\n      });\n\n      tableSchema = tableSchema.filter(\n        (column) => !hiddenColumns.includes(column.COLUMN_NAME)\n      );\n    }\n\n    setTableSchema(tableSchema);\n  }, [schemaFromServer]);\n  console.log(\"tableschema\", tableSchema);\n  const dependenciesLoaded = !!(\n    currentTaskData &&\n    currentTaskData.length > 0 &&\n    tableSchema\n  );\n\n  return dependenciesLoaded ? (\n    <DevTable\n      provenanceData={currentTaskData}\n      tableSchema={tableSchema}\n      handleProvenanceNodeClick={handleProvenanceNodeClick}\n      handleTagCreation={handleTagCreation}></DevTable>\n  ) : (\n    <div>\n      <Measure\n        bounds\n        onResize={(contentRect) => {\n          setHeight(contentRect.bounds.height);\n        }}>\n        {(measureRef) => {\n          console.log(\"height\", height);\n          return (\n            <div ref={measureRef} className={LoaderStyles.loader}>\n              <Skeleton height={height} variant=\"rect\" animation=\"wave\" />\n            </div>\n          );\n        }}\n      </Measure>\n    </div>\n  );\n};\n\nexport default TableDataLoader;\n","//@ts-nocheck\nimport React, { useMemo, useEffect } from \"react\";\nimport ProvenanceIsolatedNodes from \"./ProvenanceIsolatedNodes\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ArrowForward from \"@material-ui/icons/ArrowForward\";\nimport ArrowBack from \"@material-ui/icons/ArrowBack\";\nimport PlayCircleOutline from \"@material-ui/icons/PlayCircleOutline\";\nimport PauseCircleOutline from \"@material-ui/icons/PauseCircleOutline\";\nimport * as d3 from \"d3\";\nimport { AutoSizer, List } from \"react-virtualized\";\n\nconst conditionEnums = Object.freeze({\n  adjMatrix: \"AM\",\n  nodeLink: \"NL\",\n});\nfunction parseTaskNumFromId(taskID) {\n  let taskNumber = taskID.match(/\\d/g);\n  taskNumber = taskNumber.join(\"\");\n  // remove leading zeros\n  return parseInt(taskNumber, 10);\n}\nconst ProvenanceController = ({ nodes, selectedNode }) => {\n  //  \"https://vdl.sci.utah.edu/mvnv-study/?vis=NL&taskNum=7&participantID=5588d7a1fdf99b304ee56840&taskID=S-task07/#c0203065-9927-42f5-88f6-07189cae6cff\";\n  const [playInterval, setPlayInterval] = React.useState(null);\n  const [hoveredItemId, setHoveredItemId] = React.useState(null);\n  const [selectedItemId, setSelectedItemIdInternal] = React.useState(\n    selectedNode.id\n  );\n  const url = selectedNode.url;\n\n  useEffect(() => {\n    let currentIndex = nodes.findIndex((node) => node.id === selectedItemId);\n    if (currentIndex > -1) {\n      let currentNode = nodes[currentIndex];\n      document\n        .querySelector(\"#childFrame\")\n        .contentWindow.postMessage(currentNode.nodeID, \"*\");\n    }\n  }, [selectedItemId]);\n\n  function handlePlayClick() {\n    // set if not selected\n    setPlayInterval(setInterval(handleForward, 1000));\n  }\n  function handlePauseClick() {\n    clearInterval(playInterval);\n    setPlayInterval(null);\n  }\n\n  const setSelectedItemId = (id) => {\n    // unselect the currently selected node\n    if (id === selectedItemId) {\n      setSelectedItemIdInternal(null);\n    } else {\n      setSelectedItemIdInternal(id);\n    }\n  };\n\n  function handleForward() {\n    // TODO handle case if\n\n    setSelectedItemId((previousId) => {\n      if (!previousId) {\n        setSelectedItemId(nodes[0].id);\n      }\n      const currentIndex = nodes.findIndex((node) => node.id === previousId);\n\n      // if at the end, do nothing\n      if (currentIndex === nodes.length - 1 || currentIndex === -1) {\n        return nodes[0].id;\n      }\n      return nodes[currentIndex + 1].id;\n    });\n  }\n\n  function handleBackward() {\n    if (!selectedItemId) {\n      setSelectedItemId(nodes[0].id);\n    }\n    const currentIndex = nodes.findIndex((node) => node.id === selectedItemId);\n\n    // if at the begining, do nothing\n    if (currentIndex < 1) {\n      return;\n    }\n    setSelectedItemId(nodes[currentIndex - 1].id);\n  }\n\n  console.log(\"new url for iframe\", url);\n  return (\n    <div style={{ backgroundColor: \"white\" }}>\n      <div style={{ height: \"85vh\" }}>\n        <iframe\n          id={\"childFrame\"}\n          width={\"100%\"}\n          height={\"100%\"}\n          src={url}></iframe>\n      </div>\n      <div\n        style={{\n          margin: \"0 auto\",\n          width: \"fit-content\",\n          display: \"grid\",\n          gridTemplateRows: \"50px 50px\",\n          gridTemplateColumns: \"min(max-content,1000)\",\n        }}>\n        <div style={{ gridRow: 1, overflow: \"scroll\" }}>\n          <ProvenanceIsolatedNodes\n            hoveredItemId={hoveredItemId}\n            handleHover={(id) => setHoveredItemId(id)}\n            selectedItemId={selectedItemId}\n            nodes={nodes}\n            handleProvenanceNodeClick={(node) =>\n              setSelectedItemId(node.id)\n            }></ProvenanceIsolatedNodes>\n          <AutoSizer>\n            {({ height, width }) => (\n              <TimeLine\n                width={width}\n                hoveredItemId={hoveredItemId}\n                setHoveredItemId={(id) => setHoveredItemId(id)}\n                selectedItemId={selectedItemId}\n                nodes={nodes}\n                setSelectedItemId={(node) =>\n                  setSelectedItemId(node.id)\n                }></TimeLine>\n            )}\n          </AutoSizer>\n        </div>\n        <div style={{ gridRow: 2, width: \"100%\", height: \"100%\" }}>\n          <div\n            style={{\n              margin: \"0 auto\",\n              display: \"flex\",\n              justifyContent: \"center\",\n            }}>\n            <IconButton aria-label=\"delete\" onClick={handleBackward}>\n              <ArrowBack />\n            </IconButton>\n            {playInterval && (\n              <IconButton aria-label=\"delete\" onClick={handlePauseClick}>\n                <PauseCircleOutline />\n              </IconButton>\n            )}\n            {!playInterval && (\n              <IconButton aria-label=\"delete\" onClick={handlePlayClick}>\n                <PlayCircleOutline />\n              </IconButton>\n            )}\n\n            <IconButton aria-label=\"delete\" onClick={handleForward}>\n              <ArrowForward />\n            </IconButton>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ProvenanceController;\n\nconst TimeLine = (props) => {\n  const {\n    width,\n    nodes,\n    setSelectedItemId,\n    setHoveredItemId,\n    selectedItemId,\n    hoveredItemId,\n  } = props;\n  function determineItemOpacity(node, selectedItemId, hoveredItemId) {\n    let opacity;\n    if (selectedItemId && node.id !== selectedItemId) {\n      opacity = 0.1;\n    } else if (hoveredItemId && node.id !== hoveredItemId) {\n      opacity = 0.1;\n    }\n    if (node.id === hoveredItemId || node.id === selectedItemId) {\n      opacity = 1;\n    }\n    return opacity;\n  }\n\n  const commonScale = useMemo(() => {\n    return d3\n      .scaleLinear()\n      .domain(d3.extent(nodes, (node) => node.time))\n      .range([5, width - 5]);\n  }, [nodes, width]);\n\n  return (\n    <svg width={width} height={35}>\n      {nodes.map((node, index) => {\n        const opacity = determineItemOpacity(\n          node,\n          selectedItemId,\n          hoveredItemId\n        );\n        //const opacity = node.id === selectedItemId ? 0.5 : 0.1;\n        return (\n          <rect\n            key={`item-${index}`}\n            onMouseEnter={() => setHoveredItemId(node.id)}\n            onMouseLeave={() => setHoveredItemId(null)}\n            onClick={() => setSelectedItemId(node)}\n            width={0.75}\n            x={commonScale(node.time)}\n            height={20}\n            opacity={opacity}></rect>\n        );\n      })}\n    </svg>\n  );\n};\n","import React, { useContext } from \"react\";\nimport Modal from \"@material-ui/core/Modal\";\n\nimport TableDataLoader from \"../components/TableDataLoader\";\nimport ProvenanceDataContext from \"../components/ProvenanceDataContext\";\nimport ProvenanceController from \"../components/ProvenanceController\";\n\nconst Table = ({ location }) => {\n  const { currentlyVisitedNodes, setCurrentlyVisitedNodes } = useContext(\n    ProvenanceDataContext\n  );\n  console.log(currentlyVisitedNodes, setCurrentlyVisitedNodes);\n  return (\n    <React.Fragment>\n      <TableDataLoader />\n      {currentlyVisitedNodes && (\n        <Modal\n          open={true}\n          onClose={() => setCurrentlyVisitedNodes(null)}\n          style={{ backgroundColor: \"whitesmoke\" }}\n          aria-labelledby=\"simple-modal-title\"\n          aria-describedby=\"simple-modal-description\">\n          <ProvenanceController\n            nodes={currentlyVisitedNodes}\n            selectedNode={currentlyVisitedNodes[0]}></ProvenanceController>\n        </Modal>\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default Table;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { Route, Switch, withRouter } from \"react-router-dom\";\nimport styles from \"./Main.module.css\";\nimport _ from \"lodash\";\nimport { relativeProvenanceData } from \"./common/data/provenanceMocks.js\";\nimport MaterialTableWrapper from \"./components/ProvenanceTable\";\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\nimport Home from \"./pages/Home\";\nimport Study from \"./pages/Study\";\nimport Upload from \"./pages/Upload\";\nimport Overview from \"./pages/Overview\";\nimport Export from \"./pages/Export\";\nimport Table from \"./pages/Table\";\n\nconst Main = ({ location }) => {\n  return (\n    <Wrapper>\n      <TransitionGroup className=\"transition-group\">\n        <CSSTransition key={location.key} timeout={500} classNames=\"fade\">\n          <section className=\"route-section\">\n            <Switch location={location}>\n              <Route path=\"/Home\" component={Home}></Route>\n              <Route path=\"/Study\" component={Study}></Route>\n              <Route path=\"/Upload\" component={Upload}></Route>\n              <Route path=\"/Overview\" component={Overview}></Route>\n              <Route path=\"/Table\" component={Table}></Route>\n              <Route path=\"/Export\" component={Export}></Route>\n            </Switch>\n          </section>\n        </CSSTransition>\n      </TransitionGroup>\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.div`\n  .fade-enter {\n    opacity: 0.01;\n  }\n\n  .fade-enter.fade-enter-active {\n    opacity: 1;\n    transition: opacity 300ms ease-in;\n  }\n\n  .fade-exit {\n    opacity: 1;\n  }\n\n  .fade-exit.fade-exit-active {\n    opacity: 0.01;\n    transition: opacity 300ms ease-in;\n  }\n\n  div.transition-group {\n    position: relative;\n  }\n\n  section.route-section {\n    position: absolute;\n    width: 100%;\n    top: 0;\n    left: 0;\n  }\n`;\nexport default withRouter(Main);\n","import React from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Typography from \"@material-ui/core/Typography\";\n\n\nexport default function CheckBox({condition,visible,checkBoxCallback}) {\n  const [checked, setChecked] = React.useState(true);\n\n  const handleChange = (evt) => {\n\n    evt.stopPropagation(); \n    checkBoxCallback(condition,evt.target.checked)\n    setChecked(evt.target.checked);\n  };\n  return (condition && visible ? <>\n      <Checkbox\n        checked={checked}\n        onChange={handleChange}\n        color=\"default\"\n        inputProps={{ 'aria-label': 'checkbox with default color' }}\n      />\n      <Typography\n                            // style={{ display: \"block\" }}\n                            color=\"primary\"\n                            variant=\"overline\">\n                            {condition}\n                        </Typography>\n      </> :null)\n    \n    {/* <div>\n      \n      <Checkbox\n        defaultChecked\n        color=\"primary\"\n        inputProps={{ 'aria-label': 'secondary checkbox' }}\n      />\n      <Checkbox inputProps={{ 'aria-label': 'uncontrolled-checkbox' }} />\n      <Checkbox disabled inputProps={{ 'aria-label': 'disabled checkbox' }} />\n      <Checkbox disabled checked inputProps={{ 'aria-label': 'disabled checked checkbox' }} />\n      <Checkbox\n        defaultChecked\n        indeterminate\n        inputProps={{ 'aria-label': 'indeterminate checkbox' }}\n      />\n      <Checkbox\n        defaultChecked\n        color=\"default\"\n        inputProps={{ 'aria-label': 'checkbox with default color' }}\n      />\n      <Checkbox\n        defaultChecked\n        size=\"small\"\n        inputProps={{ 'aria-label': 'checkbox with small size' }}\n      />\n    </div> */}\n\n}","import React, { useState, useContext } from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Menu from '@material-ui/core/Menu';\nimport ProvenanceDataContext from \"../components/ProvenanceDataContext\";\nimport Grid, { GridSpacing } from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Box from \"@material-ui/core/Box\";\n\nimport SortIcon from '@material-ui/icons/Sort';\n\nimport CheckBox from '../components/CheckBox'\n\n\n\n// const useStyles = makeStyles((theme: Theme) =>\n//     createStyles({\n//         root: {\n//             // backgroundColor: theme.palette.background.paper,\n//             'padding-top': 0,\n//             'padding-bottom': 0\n//         },\n//     }),\n// );\n\n\n\nconst useStyles = makeStyles({\n    root: {\n        minWidth: 275,\n        flexGrow: 1,\n        padding:'0px'\n    },\n    table: {\n        padding: \"10px\",\n    },\n    condition: {\n        fontSize: \"1em\",\n        color:\"white\",\n        paddingTop:\"10px\",\n        cursor:'pointer'\n    },\n    sort:{\n        cursor:'pointer',\n        marginTop:'16px', \n        marginLeft:'5px'\n    },\n    bullet: {\n        display: \"inline-block\",\n        margin: \"0 2px\",\n        transform: \"scale(0.8)\",\n    },\n    title: {\n        fontSize: 14,\n    },\n    pos: {\n        marginBottom: 12,\n    },\n});\n\nfunction MenuWrapper({option,index,handleMenuItemClickCallback,setHoveredRowCallback,hoveredRow,selectedIndex,conditions}){\n\n    let initialState = {}\n    conditions.map(c=>initialState[c] = true)\n    const [filterConditions,setConditions] = useState(initialState)\n\n    function checkBoxCallback(condition,checked){\n        let currentState = {... filterConditions}\n        currentState[condition]=checked;\n        setConditions(currentState)\n        \n    }\n\n    let checkboxes = conditions.map(c=><CheckBox key = {c} visible = {(index == hoveredRow || index == selectedIndex ) && option.type !== 'global'} condition ={c} checkBoxCallback={checkBoxCallback}></CheckBox>) \n\n    return (<MenuItem\n    key={option.prompt}\n    // disabled={index === 0}\n    selected={index === selectedIndex}\n    onClick={(event) => handleMenuItemClickCallback(event, index,{desc:true, metric:option['key'],conditions:filterConditions})}\n    onMouseEnter={()=>setHoveredRowCallback(index)}\n    onMouseLeave={()=>setHoveredRowCallback(selectedIndex)}\n>\n    {<div style={{ 'width': '150px' }} > <Typography\n        // style={{ display: \"block\" }}\n        color=\"primary\"\n        variant=\"overline\">\n        {option.prompt}\n    </Typography></div>} \n    <div onClick={(evt)=>evt.stopPropagation()}>\n    {checkboxes}\n        </div> \n    \n</MenuItem>)\n}\n\n\nexport default function SortMenu() {\n\n    \n    const { metrics, conditions,setHomeTaskSort } = useContext(ProvenanceDataContext);\n\n\n    let options = [{ prompt: 'by Task Name', key: 'name' , type:'global'}]; \n\n    if (metrics){\n        Object.keys(metrics).map(m=>options.push({ prompt: 'by ' + m, key: m , type:'metric'}))\n    }\n        \n        // { prompt: 'by Task ', key: 'accuracy' },\n        // { prompt: 'by task completion time', key: 'time' },\n        // { prompt: 'by difference in performance across conditions', key: 'diff' }\n\n\n    // console.log('metrics are ', metrics)\n\n    // console.log('conditions', conditions)\n\n\n\n    const classes = useStyles();\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n    const [selectedIndex, setSelectedIndex] = React.useState(0);\n\n\n    const handleClickListItem = (event: React.MouseEvent<HTMLElement>) => {\n        // console.log('handleClickListItem')\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleMenuItemClick = (event: React.MouseEvent<HTMLElement>, index: number, sortObj) => {\n        setSelectedIndex(index);\n        setHomeTaskSort(sortObj)\n        // console.log('handleMenuItemClick')\n\n        // setTaskSort(options[index].key)\n        setAnchorEl(null);\n\n    };\n\n    let [hoveredRow,setHoveredRow] = useState(selectedIndex)\n\n    let setHoveredRowCallback = (value)=>{\n        setHoveredRow (value)\n    }\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n\n    return ( !conditions ? <></> : \n        <div className={classes.root} style={{ display: \"flex\", flexDirection: \"row-reverse\" }}>\n            <List component=\"nav\" aria-label=\"Sort tasks\" className={classes.root}>\n                <ListItem\n                    button\n                    aria-haspopup=\"true\"\n                    aria-controls=\"lock-menu\"\n                    aria-label=\"Sort tasks\"\n                    onClick={handleClickListItem}\n                >\n                    <ListItemText primary=\"Sort tasks\" secondary={options[selectedIndex].prompt} />\n                </ListItem>\n            </List>\n            <Menu\n                id=\"lock-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n            >\n                {options.map((option, index) => (\n                  <MenuWrapper key={option.prompt} hoveredRow={hoveredRow} selectedIndex= {selectedIndex} conditions= {conditions} setHoveredRowCallback={setHoveredRowCallback} handleMenuItemClickCallback = {handleMenuItemClick} option={option} index={index}></MenuWrapper>  \n                ))}\n            </Menu>\n        </div>\n    );\n}\n\n    // <>\n\n       // const classes = useStyles();\n\n    // function MetricAxis({ data, axisLength }) {\n    //     let padding = 20\n    //     let width  = axisLength + 2*padding\n    //     let height = 50\n    //     return typeof(data.range[0]) == 'string' ? null : <svg height={height} width={width}>\n    //         <line\n    //             x1={padding}\n    //             y1={height/2}\n    //             x2={axisLength+padding}\n    //             y2={height/2}\n    //             style={{ stroke: \"white\", strokeWidth: 1 }}></line>\n    //             <text\n    //             style={{\n    //               fontSize: \"1em\",\n    //               textAnchor: \"middle\",\n    //               fill:\"white\" ,\n    //                 fontWeight:'400'               }}\n               \n    //             x={padding+axisLength/2}\n    //             y={height/2-5}>\n    //             {\" \"}\n    //             {data.metric.toUpperCase()}{\" \"}\n    //           </text>\n\n\n    //             <text\n    //             style={{\n    //               fontSize: \"1em\",\n    //               textAnchor: \"end\",\n    //               fill:\"white\" ,\n    //               alignmentBaseline:'middle'                 }}\n                 \n    //             x={padding - 3}\n    //             y={height/2}>\n    //             {\" \"}\n    //             {data.range[0]}{\" \"}\n    //           </text>\n    //           <text\n    //             style={{\n    //               fontSize: \"1em\",\n    //               textAnchor: \"start\",\n    //               fill:\"white\" ,\n    //             alignmentBaseline:'middle'               }}\n               \n    //             x={axisLength+padding}\n    //             y={height/2}>\n    //             {\" \"}\n    //             {data.range[1]}{\" \"}\n    //           </text>\n    //           <g style={{transform:\"translate(\" + (padding + axisLength/2) + 'px,' + (height/2 + 5) + 'px)'}}>   \n    //           <SortIcon  width={'16px'} height={'16px'} className={classes.sort}></SortIcon>\n\n    //           </g>\n              \n\n\n    //     </svg>\n    // }\n\n    //     <React.Fragment key={'Menu'}>\n\n    //         <Grid container className={classes.root} spacing={2}>\n    //             <Grid item xs={12}>\n    //                 <Grid container justify=\"flex-start\" spacing={2}>\n\n    //                     {/* <Grid key={\"condition\"} item>\n    //                         <Box height={rowHeight} width={572} mt={\"5px\"} mb={\"6px\"} mr={'10px'} boxShadow={0} style={{ fontWeight:'bolder' }}>\n    //                             <Typography className={classes.condition} variant=\"overline\">\n    //                             <SortIcon/> Condition\n    //                         </Typography>                            </Box>\n\n    //                     </Grid> */}\n\n    //                     <Grid key={\"tasks\"} item>\n    //                         <Box height={rowHeight} width={572} pt={\"5px\"} pb={\"6px\"} pr={'10px'} boxShadow={0} style={{ display:'inline-flex', fontWeight:'bolder'  }}>\n    //                             <Typography\n    //                                 className={classes.condition}\n    //                                 variant=\"overline\">\n    //                                 Task Name\n    //                              </Typography>\n    //                              <SortIcon className={classes.sort}></SortIcon>\n                                 \n    //                         </Box>\n    //                         </Grid>\n\n\n    //                     <Grid key={\"actions\"} item>\n    //                         <Box height={rowHeight} width={375} pt={\"5px\"} pb={\"6px\"} pr={'10px'} boxShadow={0} style={{ display:'inline-flex', fontWeight:'bolder'  }}>\n    //                             <Typography\n    //                                 className={classes.condition}\n    //                                 variant=\"overline\">\n    //                                 Interaction Sequence Length\n    //                              </Typography>\n    //                              <SortIcon className={classes.sort}></SortIcon>\n\n                                 \n    //                         </Box>\n\n    //                         <Box height={rowHeight} width={250} mt={\"5px\"} mb={\"6px\"} mr={'10px'} boxShadow={0} style={{display:'inline-flex',  fontWeight:'bolder'  }}>\n    //                             <Typography\n    //                                 className={classes.condition}\n    //                                 variant=\"overline\">\n    //                                  Participant Count\n    //                              </Typography>\n    //                              <SortIcon className={classes.sort}></SortIcon>\n\n                                 \n    //                         </Box>\n\n    //                     </Grid>\n    //                     <Grid key={\"metrics\"} style={{display:'inline-flex'}} item>\n\n    //                     {!metrics ? <></> : Object.keys(metrics).map(metric=>{\n    //                         let range = metrics[metric];\n    //                         let labelLength = metric.length * 10;\n    //                     return  <Box height={rowHeight} mt={\"5px\"} mb={\"6px\"} mr={'15px'} boxShadow={0} style={{display:'inline-flex',   fontWeight:'bolder'  }}>\n    //                         {/* <Typography\n    //                             className={classes.condition}\n    //                             variant=\"overline\">\n    //                              {metric}\n    //                             </Typography> */}\n    //                             <MetricAxis data={{metric,range}} axisLength={labelLength}></MetricAxis>\n\n    //                     </Box>\n    //                     })\n    //                 }\n\n    //                     {/* <Box height={rowHeight} mt={\"5px\"} mb={\"6px\"} mr={'15px'} boxShadow={0} style={{display:'inline-flex',   fontWeight:'bolder'  }}>\n    //                         <Typography\n    //                             className={classes.condition}\n    //                             variant=\"overline\">\n    //                              Choose Metrics\n    //                             </Typography>\n    //                     </Box> */}\n\n\n    //                     </Grid>\n\n    //                 </Grid>\n    //             </Grid>\n    //         </Grid>\n    //     </React.Fragment>\n\n    // </>\n\n\n\n","import React from \"react\";\nimport {\n  createStyles,\n  makeStyles,\n  useTheme,\n  Theme,\n} from \"@material-ui/core/styles\";\nimport clsx from \"clsx\";\n\nimport Box from \"@material-ui/core/Box\";\nimport Skeleton from \"@material-ui/lab/Skeleton\";\n\nimport styles from \"./SidePane.module.css\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport List from \"@material-ui/core/List\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport CloudUpload from \"@material-ui/icons/CloudUpload\";\nimport TableChart from \"@material-ui/icons/TableChart\";\nimport GetApp from \"@material-ui/icons/GetApp\";\nimport BarChart from \"@material-ui/icons/BarChart\";\nimport { Link, LinkProps, useLocation } from \"react-router-dom\";\nimport ProvenanceDataContext from \"./components/ProvenanceDataContext\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport ComputerIcon from \"@material-ui/icons/Computer\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport HomeIcon from \"@material-ui/icons/Home\";\nimport { ActionLegend } from \"./components/ActionLegend\";\nimport SortMenu from \"./components/sortMenu\";\n\nconst drawerWidth = 260;\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"flex\",\n    },\n    typography: {\n      // In Chinese and Japanese the characters are usually larger,\n      // so a smaller fontsize may be appropriate.\n      fontSize: 18,\n    },\n    appBar: {\n      \"background-color\": \"#ababab\",\n      zIndex: theme.zIndex.drawer + 1,\n      transition: theme.transitions.create([\"width\", \"margin\"], {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n      }),\n    },\n    appBarShift: {\n      marginLeft: drawerWidth,\n      width: `calc(100% - ${drawerWidth}px)`,\n      transition: theme.transitions.create([\"width\", \"margin\"], {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.enteringScreen,\n      }),\n    },\n    menuButton: {\n      marginRight: 36,\n    },\n    hide: {\n      display: \"none\",\n    },\n\n    drawer: {\n      width: drawerWidth,\n      flexShrink: 0,\n      whiteSpace: \"nowrap\",\n    },\n    drawerOpen: {\n      width: drawerWidth,\n      transition: theme.transitions.create(\"width\", {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.enteringScreen,\n      }),\n    },\n    drawerClose: {\n      transition: theme.transitions.create(\"width\", {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n      }),\n      overflowX: \"hidden\",\n      width: theme.spacing(7) + 1,\n      [theme.breakpoints.up(\"sm\")]: {\n        width: theme.spacing(9) + 1,\n      },\n    },\n    toolbar: {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"flex-end\",\n      padding: theme.spacing(0, 1),\n      // necessary for content to be below app bar\n      ...theme.mixins.toolbar,\n    },\n    content: {\n      flexGrow: 1,\n      padding: theme.spacing(3),\n    },\n  })\n);\n\nconst SidePane = ({}) => {\n  const {\n    taskList,\n    loadingTaskList,\n    handleChangeSelectedTaskId,\n    selectedTaskId,\n  } = React.useContext(ProvenanceDataContext);\n\n  let selectedPrompt =\n    taskList && selectedTaskId\n      ? taskList.find((p) => p.taskID == selectedTaskId).prompt\n      : \"\";\n  const classes = useStyles();\n  const theme = useTheme();\n  const [open, setOpen] = React.useState(false);\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  const HomeLink = React.forwardRef<\n    HTMLAnchorElement,\n    Omit<LinkProps, \"innerRef\" | \"to\">\n  >((props, ref) => <Link innerRef={ref as any} to=\"/Home\" {...props} />);\n  const StudyLink = React.forwardRef<\n    HTMLAnchorElement,\n    Omit<LinkProps, \"innerRef\" | \"to\">\n  >((props, ref) => <Link innerRef={ref as any} to=\"/Study\" {...props} />);\n  const Upload = React.forwardRef<\n    HTMLAnchorElement,\n    Omit<LinkProps, \"innerRef\" | \"to\">\n  >((props, ref) => <Link innerRef={ref as any} to=\"/Upload\" {...props} />);\n  const Overview = React.forwardRef<\n    HTMLAnchorElement,\n    Omit<LinkProps, \"innerRef\" | \"to\">\n  >((props, ref) => <Link innerRef={ref as any} to=\"/Overview\" {...props} />);\n  const Table = React.forwardRef<\n    HTMLAnchorElement,\n    Omit<LinkProps, \"innerRef\" | \"to\">\n  >((props, ref) => <Link innerRef={ref as any} to=\"/Table\" {...props} />);\n  const Export = React.forwardRef<\n    HTMLAnchorElement,\n    Omit<LinkProps, \"innerRef\" | \"to\">\n  >((props, ref) => <Link innerRef={ref as any} to=\"/Export\" {...props} />);\n  // console.log(\n  //   \"task list\",\n  //   loadingTaskList,\n  //   taskList,\n  //   \"value\",\n  //   !loadingTaskList && taskList,\n  //   \"end\"\n  // );\n  //let taskInfo = taskList.find((t) => t.id == selectedTaskIds[0]);\n\n  let location = useLocation();\n  function appBarWidget() {\n    if (location.pathname.includes(\"Home\")) {\n      return <SortMenu></SortMenu>;\n    } else {\n      return (\n        <>\n          <FormControl className={styles.SelectedTaskInput}>\n            <Select\n              labelId=\"demo-simple-select-label\"\n              id=\"demo-simple-select\"\n              value={selectedTaskId}\n              onChange={handleChangeSelectedTaskId}\n              label=\"name\">\n              {!loadingTaskList &&\n                taskList &&\n                taskList.map((value) => {\n                  return (\n                    <MenuItem key={value.taskID} value={value.taskID}>\n                      {value.taskID}\n                    </MenuItem>\n                  );\n                })}\n              {loadingTaskList && (\n                <Skeleton\n                  variant=\"rect\"\n                  width={\"200\"}\n                  height={50}\n                  style={{ margin: \"20px\", padding: \"20px\" }}>\n                  Loading task selector\n                </Skeleton>\n              )}\n            </Select>\n          </FormControl>\n          <Box ml={3}>\n            <Typography variant=\"button\" noWrap>\n              {selectedPrompt}\n            </Typography>\n          </Box>\n        </>\n      );\n    }\n  }\n\n  function makeIcon(item) {\n    let isCurrent = location.pathname.includes(item.id);\n    const Icon = item.icon;\n    return isCurrent ? (\n      <Icon style={{ color: \"rgb(93, 131, 210)\" }}> </Icon>\n    ) : (\n      <Icon></Icon>\n    );\n  }\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n        className={clsx(classes.appBar, {\n          [classes.appBarShift]: open,\n        })}>\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            edge=\"start\"\n            className={clsx(classes.menuButton, {\n              [classes.hide]: open,\n            })}>\n            <MenuIcon />\n          </IconButton>\n\n          {appBarWidget()}\n          {/* {taskInfo.prompt} */}\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        variant=\"permanent\"\n        className={clsx(classes.drawer, {\n          [classes.drawerOpen]: open,\n          [classes.drawerClose]: !open,\n        })}\n        classes={{\n          paper: clsx({\n            [classes.drawerOpen]: open,\n            [classes.drawerClose]: !open,\n          }),\n        }}>\n        <div className={classes.toolbar}>\n          <IconButton onClick={handleDrawerClose}>\n            {theme.direction === \"rtl\" ? (\n              <ChevronRightIcon />\n            ) : (\n              <ChevronLeftIcon />\n            )}\n          </IconButton>\n        </div>\n        <Divider />\n        <List>\n          {[\n            {\n              text: \"Task Overview\",\n              id: \"Home\",\n              link: HomeLink,\n              icon: HomeIcon,\n            },\n            {\n              text: \"Participant Timeline\",\n              id: \"Study\",\n              link: StudyLink,\n              icon: ComputerIcon,\n            },\n            // { text: \"Upload\", id: \"Upload\", link: Upload, icon: CloudUpload },\n            // {\n            //   text: \"Provenance Prep \",\n            //   id: \"Overview\",\n            //   link: Overview,\n            //   icon: BarChart,\n            // },\n            {\n              text: \"Task Analysis\",\n              link: Table,\n              id: \"Table\",\n              icon: TableChart,\n            },\n            // { text: \"Export\", link: Export, icon: GetApp },\n          ].map((item, index) => {\n            return (\n              //added key={index} to get rid of unique key error\n              <React.Fragment key={index}>\n                <ListItem button component={item.link}>\n                  <ListItemIcon>{makeIcon(item)}</ListItemIcon>\n                  <ListItemText primary={item.text} />\n                </ListItem>\n              </React.Fragment>\n            );\n          })}\n        </List>\n\n        <Divider />\n        <ActionLegend collapsed={!open}></ActionLegend>\n      </Drawer>\n    </div>\n  );\n};\n\nexport default SidePane;\n","import React from \"react\";\nimport { MemoryRouter, Link as RouterLink } from \"react-router-dom\";\nimport styles from \"./App.module.css\";\nimport Main from \"./Main\";\nimport SidePane from \"./SidePane\";\nimport \"antd/dist/antd.css\";\n\nimport { ProvenanceDataContextProvider } from \"./components/ProvenanceDataContext\";\n//import { fetchProvenance } from \"./firebase/fetchData\";\n//fetchProvenance();\nfunction App() {\n  return (\n    <div className=\"App\">\n      {\n        <ProvenanceDataContextProvider>\n          <MemoryRouter initialEntries={[\"/Home\"]} initialIndex={0}>\n            <div className={styles.container}>\n              <div className={styles.sidePane}>\n                <SidePane></SidePane>\n              </div>\n              <div className={styles.main}>\n                <Main></Main>\n              </div>\n            </div>\n          </MemoryRouter>\n        </ProvenanceDataContextProvider>\n      }\n    </div>\n  );\n}\n/*\nused to determine why components updated\nif (process.env.NODE_ENV !== \"production\") {\n  const { whyDidYouUpdate } = require(\"why-did-you-update\");\n  whyDidYouUpdate(React);\n}*/\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}